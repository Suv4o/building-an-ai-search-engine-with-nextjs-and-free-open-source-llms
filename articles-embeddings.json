[
  {
    "articlePath": "/2021/05/12/the-mysterious-this-keyword-in-vueland",
    "embeddings": [
      -0.08633880317211151,
      0.033010926097631454,
      0.005872966255992651,
      0.051907725632190704,
      0.1177954450249672,
      -0.04909306392073631,
      0.06216828152537346,
      -0.04191038757562637,
      0.09950488060712814,
      -0.002357308752834797,
      0.031700581312179565,
      0.06885335594415665,
      -0.052008941769599915,
      0.016788816079497337,
      0.0007273865630850196,
      0.003575707785785198,
      -0.015980444848537445,
      -0.04473722726106644,
      -0.11566949635744095,
      -0.016039052978157997,
      0.07387856394052505,
      0.02477130852639675,
      -0.008131161332130432,
      -0.0019591120071709156,
      0.030122505500912666,
      0.05147048830986023,
      -0.10574038326740265,
      -0.039916910231113434,
      -0.02402719110250473,
      -0.04038682207465172,
      0.04163820669054985,
      0.037360940128564835,
      -0.08765631169080734,
      0.011042297817766666,
      -0.06271053850650787,
      0.12494323402643204,
      -0.011327441781759262,
      -0.0428001843392849,
      0.0002946329186670482,
      0.023839306086301804,
      0.026994241401553154,
      0.04019393026828766,
      -0.1185951679944992,
      -0.029346691444516182,
      0.052777428179979324,
      -0.03659111633896828,
      -0.056373629719018936,
      -0.07363484799861908,
      -0.09097957611083984,
      0.006603260990232229,
      -0.1258155256509781,
      -0.04503067582845688,
      -0.017776891589164734,
      -0.026770716533064842,
      -0.011297134682536125,
      -0.019186003133654594,
      -0.04430708661675453,
      -0.005032628774642944,
      0.00129797519184649,
      0.03374961391091347,
      0.043553732335567474,
      -0.008955558761954308,
      0.02232564426958561,
      -0.008767866529524326,
      0.016189876943826675,
      -0.041923440992832184,
      0.02637298032641411,
      -0.044562697410583496,
      -0.007244340609759092,
      0.011672934517264366,
      -0.01150245126336813,
      0.048937804996967316,
      0.018636517226696014,
      0.03569969907402992,
      0.030024079605937004,
      -0.03034217841923237,
      0.02181902714073658,
      -0.008246799930930138,
      0.07335871458053589,
      -0.024754555895924568,
      0.03293820843100548,
      -0.01221084501594305,
      -0.001611948711797595,
      -0.020607758313417435,
      0.07151641696691513,
      0.10714137554168701,
      -0.006126044783741236,
      -0.053221240639686584,
      0.08514906466007233,
      -0.01797354221343994,
      -0.07897225767374039,
      -0.16359956562519073,
      -0.0037516707088798285,
      0.1059063971042633,
      0.09817131608724594,
      0.005549134220927954,
      0.025193043053150177,
      0.011389778926968575,
      -0.010724468156695366,
      0.010681829415261745,
      -0.032590754330158234,
      0.036115843802690506,
      -0.03676300868391991,
      0.005773021373897791,
      0.0712192952632904,
      0.021977178752422333,
      0.023011695593595505,
      0.004386279731988907,
      -0.019008221104741096,
      -0.030047599226236343,
      -0.04237428680062294,
      0.03393127769231796,
      -0.0379120372235775,
      -0.12916769087314606,
      -0.047258105129003525,
      -0.003589488100260496,
      0.047268178313970566,
      -0.06547185033559799,
      0.1048928052186966,
      0.1037035882472992,
      0.07979075610637665,
      0.03793187066912651,
      -0.022902920842170715,
      -0.024615665897727013,
      -0.04927131161093712,
      -0.06306605786085129,
      0.007857265882194042,
      4.1547157226882644e-33,
      -0.014128215610980988,
      0.01485464721918106,
      -0.026033053174614906,
      0.0054434966295957565,
      0.05871463194489479,
      -0.05564689636230469,
      -0.044359996914863586,
      0.006067672744393349,
      -0.1347583532333374,
      -0.020792372524738312,
      0.041072454303503036,
      -0.00025447821826674044,
      -0.012460422702133656,
      0.028636513277888298,
      0.007389537524431944,
      0.014348930679261684,
      0.07279469817876816,
      0.006820342503488064,
      0.019483134150505066,
      -0.07372051477432251,
      0.04584696143865585,
      -0.0027004582807421684,
      -0.034073758870363235,
      -0.0060065751895308495,
      -0.08285720646381378,
      0.040739625692367554,
      0.027316052466630936,
      -0.010546485893428326,
      -0.035715218633413315,
      0.008495128713548183,
      0.0346972793340683,
      0.03353814035654068,
      -0.009270424023270607,
      0.009638755582273006,
      0.02873404510319233,
      -0.03749090060591698,
      -0.027595361694693565,
      -0.05395878851413727,
      -0.08709787577390671,
      -0.0032234168611466885,
      0.03517816215753555,
      0.00736649427562952,
      -0.04864966496825218,
      -0.06511389464139938,
      -0.0010815929854288697,
      -0.030643247067928314,
      -0.010947990231215954,
      0.05520256608724594,
      0.042299479246139526,
      0.05910133942961693,
      -0.11452745646238327,
      0.07579844444990158,
      0.014552455395460129,
      -0.019571010023355484,
      -0.004741379991173744,
      0.04609493538737297,
      0.05292598158121109,
      -0.024383017793297768,
      -0.0112833296880126,
      -0.04236568883061409,
      0.045342132449150085,
      -0.024969972670078278,
      0.043866295367479324,
      0.02640860714018345,
      0.0006867864285595715,
      -0.0345086008310318,
      0.018561888486146927,
      0.03263520821928978,
      0.02791738510131836,
      0.06620613485574722,
      -0.02539246529340744,
      0.054215844720602036,
      0.003745769616216421,
      -0.0070868972688913345,
      0.05965280905365944,
      -0.09623005241155624,
      -0.0362115278840065,
      -0.010877186432480812,
      0.003728831186890602,
      0.001977294683456421,
      -0.059888698160648346,
      -0.03217720985412598,
      -0.07000043988227844,
      0.04746096581220627,
      -0.08226090669631958,
      -0.007008279208093882,
      0.022372642531991005,
      -0.05861133709549904,
      0.039282314479351044,
      0.0355478934943676,
      0.04829489812254906,
      0.006924585439264774,
      -0.06882187724113464,
      -0.04350442439317703,
      -0.09109067916870117,
      -7.644616656273568e-33,
      0.06075374037027359,
      -0.021893590688705444,
      -0.033196188509464264,
      0.07142595946788788,
      -0.05129070207476616,
      -0.02602151595056057,
      -0.01694718562066555,
      0.026675010100007057,
      -0.0027624613139778376,
      -0.025061532855033875,
      0.04051034897565842,
      0.017804553732275963,
      -0.04638715088367462,
      -0.01595381088554859,
      0.07997269183397293,
      0.09743841737508774,
      -0.0689648911356926,
      -0.14555417001247406,
      0.060278214514255524,
      0.0376114659011364,
      -0.005784139968454838,
      0.023367518559098244,
      0.0029511749744415283,
      0.04757634550333023,
      0.006424493156373501,
      -0.027236532419919968,
      0.045734703540802,
      0.03388655558228493,
      -0.08300711214542389,
      -0.07372506707906723,
      -0.07764644920825958,
      0.013735959306359291,
      -0.13928206264972687,
      -0.030208073556423187,
      0.040111102163791656,
      0.03140163794159889,
      0.01502889022231102,
      -0.009540972299873829,
      0.03664477914571762,
      0.013749929144978523,
      0.04498090595006943,
      0.05101571977138519,
      -0.009932336397469044,
      -0.015804503113031387,
      -0.055955566465854645,
      0.034963108599185944,
      0.02798912115395069,
      0.025941310450434685,
      0.09041150659322739,
      0.021444203332066536,
      0.11015666276216507,
      -0.11162564903497696,
      -0.047416169196367264,
      0.03292979672551155,
      -0.024475222453475,
      0.019088035449385643,
      -0.04024764150381088,
      -0.00018116962746717036,
      -0.036664195358753204,
      0.048150788992643356,
      0.056228894740343094,
      -0.03615735098719597,
      -0.03186655789613724,
      0.04957181587815285,
      -0.020049698650836945,
      -0.03757854178547859,
      -0.15865515172481537,
      -0.01860075257718563,
      0.05603788048028946,
      -0.05228602886199951,
      0.04466523230075836,
      -0.010038012638688087,
      0.031804408878088,
      -0.062448885291814804,
      -0.028450805693864822,
      -0.027874870225787163,
      0.07753172516822815,
      -0.03318397328257561,
      0.015536051243543625,
      -0.043321188539266586,
      -0.00844898633658886,
      0.018959946930408478,
      0.012334838509559631,
      -0.037210613489151,
      -0.0062059867195785046,
      0.0462946891784668,
      -0.06412895023822784,
      0.01487683691084385,
      -0.06472284346818924,
      -0.047692347317934036,
      0.036631058901548386,
      -0.010834014974534512,
      -0.09223850071430206,
      0.04487127065658569,
      -0.03365976735949516,
      -5.497687993738509e-8,
      -0.09296519309282303,
      0.025445882230997086,
      -0.07723020762205124,
      -0.10425486415624619,
      0.008025611750781536,
      -0.0369950570166111,
      0.08051570504903793,
      0.031223272904753685,
      -0.03901314362883568,
      0.054197005927562714,
      0.08874345570802689,
      0.023850692436099052,
      0.006840241141617298,
      0.00886197853833437,
      0.01577659696340561,
      -0.0006128592067398131,
      -0.07663190364837646,
      0.044815968722105026,
      -0.021416347473859787,
      -0.0212361142039299,
      0.00699784979224205,
      0.014169182628393173,
      0.021135002374649048,
      -0.07757838815450668,
      0.07691605389118195,
      0.046908095479011536,
      -0.04526883363723755,
      0.05267510935664177,
      0.03913550078868866,
      -0.0393468476831913,
      0.00978014338761568,
      0.09569407999515533,
      0.007862580940127373,
      -0.03692404553294182,
      -0.017136864364147186,
      0.0437571220099926,
      -0.008662035688757896,
      -0.027352888137102127,
      -0.069219209253788,
      0.08196505159139633,
      0.0654996857047081,
      -0.10726533085107803,
      -0.02075747586786747,
      0.0032064912375062704,
      -0.015954917296767235,
      0.08024048060178757,
      -0.013217508792877197,
      -0.0346803143620491,
      -0.01186636183410883,
      -0.06429628282785416,
      0.009201637469232082,
      -0.004932394251227379,
      0.0517466701567173,
      0.10555008053779602,
      -0.030445434153079987,
      -0.028958722949028015,
      0.10312861949205399,
      -0.045219458639621735,
      0.060483839362859726,
      -0.052378423511981964,
      0.07987722009420395,
      0.028410322964191437,
      0.05064518004655838,
      0.07978930324316025
    ],
    "content": "---\ntitle: The mysterious this keyword in Vueland\ndescription: If you are new to Vue.JS you might have realised that \"this\" keyword is used everywhere. Some people might think that \"this\" keyword is part of the Vue.JS framework\nimage: https://res.cloudinary.com/suv4o/image/upload/q_auto,f_auto,w_1200,e_sharpen:100/v1618488085/blog/the_misterios_this_keyword_in_vueland\nkeywords:\n    - Vue.js\n    - Javascript\n    - Frontend\n    - development\n    - web development\n    - this keyword\ntype: page\nblog: post\npublished: 12th May 2021\nreadTime: 12\nauthor: Aleksandar Trpkovski\narticleTags:\n    - Vue.js\n    - JavaScript\n    - FrontEnd\n---\n\n# The mysterious `this` keyword in Vueland\n\n_{{$document.published}} • {{$document.readTime}} min read — by **[{{$document.author}}](/)**_\n\n::tag-pills{:tags=\"articleTags\"}\n::\n\n![blog hero image](https://res.cloudinary.com/suv4o/image/upload/q_auto,f_auto,w_750,e_sharpen:100/v1618488085/blog/the_misterios_this_keyword_in_vueland)\n\nIf you are new to Vue.JS you might have realised that `this` keyword is used everywhere. Some people might think that `this` keyword is part of the Vue.JS framework itself. Others may wonder why `this` keyword behaves a little differently in JavaScript, as compared to other languages such as Java, C++, PHP, etc. If you've experience an error that reads `this is undefined`, you are not alone. In this article we will take a closer look at this common problem in Vue.JS, and how to solve it.\n\nBefore we dive into Vue.JS, we need to understand what exactly is `this` keyword.\n\n`this` has been part of the JavaScript language for a very long time. To give you a time reference, Internet Explorer version 4.0 had fully supported `this` keyword. Inspite of it being with us for a very long period of time, people still struggle to understand it. So how do we define `this`? In most cases, the value of `this` is determined by how a function is called in JavaScript.\n\n## The two types of functions in JavaScript\n\nIn Javascript we have two different types of functions, **regular functions** and **arrow functions**. They operate in almost the same manner, with one exception — they treat `this` variable differently.\n\n### Example of a Regular function\n\n```js\nvar sum = function (a, b) {\n    return a + b;\n};\n```\n\n### Example of an Arrow function\n\n```js\nvar sum = (a, b) => a + b;\n```\n\nEven though both functions above do exactly the same job, a difference is noted when we start using `this` keyword in the function.\n\n### Regular function\n\n```js\nvar person = {\n\tfirstName: “Aleks”,\n\tlastName: “Trpkovski”\n \tthisInRegularFunction() {\n \t\tconsole.log(\"My full name is \" + this.firstName + “ “ + this.lastName);\n \t}\n};\nperson.thisInRegularFunction(); // Output: My full name is Aleks Trpkovski\n```\n\n### Arrow function\n\n```js\nvar person = {\n\tfirstName: “Aleks”,\n\tlastName: “Trpkovski”\n\tthisInArrowFunction:() => {\n\t\tconsole.log(\"My full name is \" + this.firstName + “ “ + this.lastName);\n \t}\n};\nperson.thisInArrowFunction; // Output: My full name is\n```\n\nFrom the examples above, this demonstrates the point of arrow functions not having their own `this`. In order to fully understand the behaviour of `this` keyword in both regular and arrow functions, please review the following reasoning.\n\n## `this` in Regular functions\n\n`this` in regular JavaScript functions refers to the object that the function belongs to. In other words the value of `this` depends on how the function is called, not where the function was declared. Even though the function was declared in a specific file or a particular object, `this` changes its value based on the owner to the function call. It is important to remember the same function can have different owners in different scenarios.\n\nThe value of `this` in regular JavaScript function is determined by 4 rules.\n\n## 1. Default Binding\n\nDefault Binding happens when a function is invoked without any of these other 3 rules. In this rule `this` points to the global object. This means that if you are in the browser, `this` will be the window object. Default binding is applied for standalone functions. For example, any functions that are called without a “.” before it.\n\n```js\nobj.foo(); // Not Standalone function\nfoo(); // Standalone function, Default Binding applies\n```\n\n### Examples for Default Binding\n\n```js\nfunction foo() {\n\tconsole.log(“My name is “ + this.name);\n}\n\nvar name = “Aleks”;\n\nfoo(); // Output: My name is Aleks.\n```\n\n## 2. Implicit Binding\n\nImplicit Binding happens when invoked with a ”.” before it. For instance, `obj.foo()`. In this rule, whatever is to the left of the dot becomes the context for `this` in the function.\n\n```js\nobj.foo(); // the value of `this` in foo is obj\nobj1.obj2.foo(); // the value of `this` in foo is obj2\nobj1.obj2.obj3.foo(); // the value of `this` in foo is obj3\n```\n\n### Examples for Implicit Binding\n\n```js\nfunction foo() {\n\tconsole.log(“My name is “ + this.name);\n}\n\nvar obj = {\n\tname: “Aleks”,\n\tfoo: foo\n};\n\nobj.foo(); // Output: My name is Aleks.\n```\n\nOne of the common frustrations you would face when **Implicitly Binding** a function, is that in certain circumstances, the function loses `this` binding. This means that it will usually fall back to the **Default Binding**. This often happens with nested functions or when creating a reference to the function to a new variable.\n\n## 2.1. Implicit Binding with Nested Functions\n\nWhen a function is nested inside a method of an object, `this` variable depends on the inner function invocation.\n\n```js\nvar obj = {\n \tname: “Aleks”,\n  \touter: function() {\n    \t\tfunction inner() {\n       \t\t\tconsole.log(“My name is “ + this.name);\n    \t\t}\n    \t\tinner(); // Default Binding applies\n  \t},\n};\n\nvar name = “Nicole”;\n\nobj.outer(); // Output: My name is Nicole\n\n```\n\nIn the example above, although the outer function was called using implicit binding, the inner function was called using default binding. Thus, `this` points to the global object.\n\n## 2.2. Implicit Binding with a reference to the function\n\n```js\nfunction foo() {\n\tconsole.log(“My name is “ + this.name);\n}\n\nvar obj = {\n\tname: “Aleks”,\n\tfoo: foo\n};\n\nvar name: “Nicole”;\n\nvar bar = obj.foo();\n\nbar(); // Output: My name is Nicole.\n```\n\nAlthough bar appears to be reference to `obj.foo()`, `bar()` directly refers to `foo()`. Hence, default binding applies.\n\n## 3. Explicit Binding\n\nExplicit binding of `this` happens when one of the three `.call()`, .`apply()`, or .`bind()` are used in a function. In that way we can force a function to use a certain object as `this`. For instance, when calling `foo.call(obj)`, the value of `this` in the function `foo` becomes `obj`. **Call**, **apply** and **bind** do the same thing, with some little differences.\n\n- `.call()`: Pass in the required object (value of `this`) as the first parameter, along with additional parameters that are separated by comma. For example `foo.call(obj, param1, param2, …)`.\n\n- `.apply`: Is almost the same as `.call()` with only difference in the way the actual parameters are passed. Unlikely **Call**, **Apply** accepts parameters as an array. For example `foo.apply(obj, [param1, param2, …])`.\n\n```js\nfunction foo(age, city) {\n\tconsole.log(“My full name is “ + this.firstName + “ ” + this.lastName + “ ” + age + “ years old, living in ” + city);\n }\n\nvar obj = {\n\tfirstName: “Aleks”,\n\tlastName: “Trpkovski”\n}\n\nvar age= 32, city = “Melbourne”;\n\nfoo.call(obj, age, city); // Output: My full name is Aleks Trpkovski 32 years old, living in Melbourne\nfoo.apply(obj, [age, city]); // Output: My full name is Aleks Trpkovski 32 years old, living in Melbourne\n```\n\n- `.bind()`: Is a little bit different than **Call** and **Apply**. When call a function with **Bind**, returns new function of the same name.\n\n```js\nfunction foo(age, city) {\n\tconsole.log(“My full name is “ + this.firstName + “ ” + this.lastName + “ ” + age + “ years old, living in ” + city);\n }\n\nvar obj = {\n\tfirstName: “Aleks”,\n\tlastName: “Trpkovski”\n}\n\nvar age= 32, city = “Melbourne”;\n\nvar bar = foo.bind(obj, age, city)\nbar(); // Output: My full name is Aleks Trpkovski 32 years old, living in Melbourne\n```\n\n## 4. `new` Binding\n\nWhen a function is invoked using the `new` operator, also known as a constructor call, we create a brand new empty object and set that new object as `this` inside the function.\n\n```js\nfunction foo(name) {\n\tthis.name = “My name is “ + name;\n}\n\nvar bar = new foo(“Aleks”);\nconsole.log(bar.name); // Output: My name is Aleks\n```\n\n## Arrow functions\n\nES6 introduced a special kind of function known as arrow functions. Unlike the regular functions where the value of `this` is determined by the 4 rules mentioned above, the arrow functions use `this` from the outer function or the global scope in which it is declared. For example, if the outer function is an arrow function, then it checks for the next outer function and repeats till the global scope.\n\n```js\nfunction foo(){\n\tvar bar = () => {\n      \t\tconsole.log(this);\n    \t};\n    bar();\n}\n\nvar obj1 = {\n\tname: “Aleks”,\n  \tfoo: foo\n};\n\nvar obj2 = {\n  \tname: “”Nicole\n};\n\nfoo(); // Output: Window {}\nobj1.foo(); // {name: “Aleks”, foo: ƒ}\nfoo.call(obj2); // {name: “Nicole”}\n```\n\nAs we can see from the example above, each time `bar` is called, the value of `this` is taken from the outer function. In this case, `foo`.\n\n```js\nvar foo = () => {\n    console.log(this);\n};\n\nvar obj1 = {\n    foo: foo,\n    bar: () => {\n        console.log(this);\n    },\n};\n\nvar obj2 = {};\n\nfoo(); // Output: Window {}\nobj1.foo(); // Output: Window {}\nobj1.bar(); // Output: Window {}\nfoo.call(obj2); // Output: Window {}\nvar obj3 = new foo(); // Output: Window {}\n```\n\nAs we can see in the last example above, none of the 4 binding rules has any direct impact on arrow functions.\n\nNow when `this` make sense, it brings us to the next section — how all this applies to Vue.JS.\n\n## Understanding `this` keyword in Vue.JS\n\nIn this blog post, we won't focus on the fundamentals of Vue.JS framework. That would be going off track from the main purpose of this post. We will instead look at how `this` keyword affects the function declaration in the method property.\n\nAs seen previously, we have two types of functions in JavaScript. So technically we can use either regular or arrow to declare a function in Vue.JS.\n\n```js\nmethods: {\n  \tregularFunction() {\n    \t\tconsole.log(this); // Output: Vue componet\n  \t}\n}\n```\n\n```js\nmethods: {\n    arrowFunction: () => {\n        console.log(this); // Output: this is undefined\n    };\n}\n```\n\nEven though both function declarations are correct, there is a difference in how they treat `this` variable.\n\nIn a regular function, `this` refers to the owner of the function. In our case, `this` refers to the Vue component. Hence, we can safely use `this` to get any of the data properties, computed properties or methods of the Vue component.\n\nOn the other hand, in an arrow function, `this` does not refer to the Vue component. As explained previously, the arrow functions use `this` from the outer function or the global scope in which it is declared. In our example above that is the global scope and the reasoning behind of getting `this is undefined` printed in the console.\n\nIt is recommended to use a regular function with Vue, especially when creating methods, computed properties, watched properties. But in certain scenarios, arrow functions come in very handy as well. We will have a look at various issues and how to solve them with either regular or arrow functions in the next few examples below.\n\nConsider this code:\n\n```js\ndata() {\n\treturn {\n      \t\tname: \"Aleks\",\n    \t}\n},\nmethods: {\n    \tfoo() {\n\t\tconsole.log(\"My name is: \" + this.name); // Output: My name is Aleks.\n\t\t\t\t\t\t\t\t\t\t         // `this` on this line, refers to the Vue Component.\n\t\t\t\t\t\t\t\t\t\t         // we can use `this` to get any of the data properties of this Vue Component.\n\n      \t\tvar bar = function() {\n        \t\tconsole.log(\"My name is: \" + this.name); // Output: this is undefined\n      \t\t};\t\t\t\t\t\t\t\t\t         // this here refers to the Window object.\n\t\t\t\t\t\t\t\t\t\t\t             // the Default Binding applies\n      \t\tsetTimeout(bar(), 100);\n    \t},\n}\n```\n\nWhere most likely we will get into trouble using `this`, is when we declare another function inside the current function, as shown in the previous example. We have explained this scenario in the **Implicit Binding** section under **Implicit Binding with Nested Functions**.\n\nThis is a common problem in Vue.JS, especially when dealing with callbacks. `this` in the `bar` refers to the global object (the Window). As explained in the previous section in JavaScript, when you declare a new regular function, that function has it's own `this` variable, which is different from the outer function, in our case, `foo` in which it is declared. The confusing part in the example above is the **Default Binding** in the second function.\n\nLets refactor the provided built-in function `setTimeout()` in JavaScript.\n\n```js\nfunction SetTimeout(bar(), delay) {\n\t// wait (somehow) for ‘delay’ milliseconds\n\tbar(); // Standalone function, Default Binding applies\n}\n```\n\n### How can we fix `this`\n\nThere are several ways to deal with `this` inside a function in Vue.JS.\n\nOne solution would be to use **Explicit Binding** with one of the three `.call()`, .`apply()`, or .`bind()` methods on the function call.\n\n```js\nsetTimeout(bar.call(this), 100); // Output: My name is Aleks.\nsetTimeout(bar.apply(this), 100); // Output: My name is Aleks.\nsetTimeout(bar.bind(this), 100); // Output: My name is Aleks.\n```\n\nThe other solution is most commonly used — by using a closure.\n\n```js\ndata() {\n\treturn {\n      \t\tname: \"Aleks\",\n    \t}\n},\nmethods: {\n    \tfoo() {\n\t\tvar self = this; // In the variable self we save a reference to the this\n\n\t\tconsole.log(\"My name is: \" + this.name); // Output: My name is Aleks.\n\t\t\t\t\t\t\t\t\t\t         // `this` on this line, refers to the Vue Component.\n\n      \t\tvar bar = function() {\n        \t\tconsole.log(\"My name is: \" + self.name);  // Output: My name is Aleks.\n      \t\t};\t\t\t\t\t\t\t\t\t          // this here refers to the Window.\n\t\t\t\t\t\t\t\t\t\t\t              // we can use the reference we declared self which is refering to the Vue Component.\n      \t\tsetTimeout(bar(), 100);\n    \t},\n}\n```\n\nAnd the last, and by far most common solution these days is to use an arrow function.\n\n```js\ndata() {\n\treturn {\n      \t\tname: \"Aleks\",\n    \t}\n},\nmethods: {\n    \tfoo() {\n\t\tconsole.log(\"My name is: \" + this.name); // Output: My name is Aleks.\n\t\t\t\t\t\t\t\t\t\t         // `this` on this line, refers to the Vue Component.\n\n      \t\tvar bar = () => {\n        \t\tconsole.log(\"My name is: \" + this.name); // Output: My name is Aleks.\n      \t\t};\t\t\t\t\t\t\t\t\t         // this here also refers to the Vue Component.\n\t\t\t\t\t\t\t\t\t\t\t             // the value of `this` is taken from the outer function, in this case ‘foo’.\n      \t\tsetTimeout(bar(), 100);\n    \t},\n}\n```\n\nI hope this make sense!\n\n## Conclusion\n\n1. The value of `this` is determined by how a function is called in JavaScript.\n2. In Javascript, we have two different types of functions, **regular functions** and **arrow functions**. They operate in almost the same manner, with one exception where they treat `this` variable differently.\n3. The value of `this` in regular JavaScript function is determined by 4 rules: **Default Binding**, **Implicit Binding**, **Explicit Binding** and **`new` Binding**.\n4. Unlike the regular functions where the value of `this` is determined by the 4 rules, the arrow functions uses `this` from the outer function, or the global scope in which it is declared.\n5. The most challenging part when working with `this` in Vue.JS, is when we declare a function inside the current function. There are several ways to fix that.\n"
  },
  {
    "articlePath": "/2021/07/13/firebase-authentication-token-verification-with-a-custom-backend-server",
    "embeddings": [
      -0.04764966294169426,
      0.0006885213661007583,
      -0.06355300545692444,
      0.03886914253234863,
      0.02434302680194378,
      -0.005650858394801617,
      0.02646988071501255,
      0.0599963441491127,
      0.02298443205654621,
      0.04327407851815224,
      -0.023770904168486595,
      0.021954495459794998,
      0.08863025158643723,
      0.05066707357764244,
      0.04565483704209328,
      0.04732554778456688,
      0.008029898628592491,
      0.02696739137172699,
      -0.02919713594019413,
      -0.0241471566259861,
      -0.0988464429974556,
      -0.013675062917172909,
      0.01289195753633976,
      0.07261761277914047,
      -0.06811240315437317,
      -0.023295486345887184,
      -0.03915921226143837,
      -0.045864537358284,
      -0.09474510699510574,
      0.014998946338891983,
      0.08832541853189468,
      -0.04419577866792679,
      -0.017934054136276245,
      0.06971603631973267,
      -0.08214980363845825,
      0.05199017748236656,
      0.04313329979777336,
      -0.04262765496969223,
      -0.04090433940291405,
      -0.050726957619190216,
      -0.05111762136220932,
      0.007563928607851267,
      -0.1303505152463913,
      0.06275397539138794,
      -0.020134184509515762,
      -0.06990250200033188,
      0.010834479704499245,
      -0.04916062951087952,
      -0.060035206377506256,
      0.006952276453375816,
      0.05479991063475609,
      -0.03825898468494415,
      -0.02420993708074093,
      0.029857173562049866,
      -0.04548491910099983,
      0.012977217324078083,
      -0.052395354956388474,
      0.0072821821086108685,
      0.0006616259925067425,
      0.043579958379268646,
      0.06927903741598129,
      -0.09963049739599228,
      0.020312407985329628,
      -0.03212862089276314,
      0.05875423923134804,
      0.004832937847822905,
      -0.024967225268483162,
      -0.026604166254401207,
      0.044499918818473816,
      -0.07968664169311523,
      0.06412173062562943,
      0.04779725894331932,
      -0.03298591077327728,
      -0.03604290634393692,
      -0.055887553840875626,
      -0.08014165610074997,
      -0.025989973917603493,
      0.047207266092300415,
      0.003944438882172108,
      -0.052834346890449524,
      -0.030733147636055946,
      -0.018340453505516052,
      0.00577978091314435,
      0.094105564057827,
      0.009859547019004822,
      0.008065049536526203,
      -0.04568090662360191,
      -0.010289204306900501,
      -0.007188891526311636,
      0.030470959842205048,
      0.02829456701874733,
      0.01007598266005516,
      0.04784485697746277,
      -0.047000858932733536,
      0.014526735059916973,
      -0.019138580188155174,
      0.0038345083594322205,
      -0.009608686901628971,
      -0.030355604365468025,
      0.0004512433661147952,
      -0.0650324895977974,
      0.007557941135019064,
      0.02312508597970009,
      -0.055765312165021896,
      0.14475774765014648,
      0.014088757336139679,
      -0.021527929231524467,
      -0.025564640760421753,
      -0.01760777458548546,
      0.016902485862374306,
      0.004376047756522894,
      0.029706163331866264,
      -0.061819370836019516,
      0.0102388272061944,
      0.041780419647693634,
      0.05969266965985298,
      0.021602898836135864,
      -0.0645567998290062,
      0.017178015783429146,
      0.11671385914087296,
      0.08569369465112686,
      0.07689566165208817,
      0.029749605804681778,
      0.008037403225898743,
      0.027366727590560913,
      -0.03202825039625168,
      -0.032364822924137115,
      6.369333855326007e-33,
      0.020313724875450134,
      0.1269747018814087,
      -0.017817873507738113,
      0.03310211002826691,
      0.02690194733440876,
      -0.009351790882647038,
      0.015432631596922874,
      -0.021810179576277733,
      -0.08373582363128662,
      -0.021142512559890747,
      -0.021090617403388023,
      0.18194888532161713,
      0.050208546221256256,
      0.021198630332946777,
      0.09292636811733246,
      -0.037846073508262634,
      -0.06972218304872513,
      0.004504492040723562,
      0.14552368223667145,
      0.006275566760450602,
      -0.016459373757243156,
      -0.052960723638534546,
      0.01088036596775055,
      0.13065259158611298,
      0.07231813669204712,
      -0.03381017595529556,
      0.026548918336629868,
      -0.03564346209168434,
      0.012511472217738628,
      -0.021156733855605125,
      -0.03294815495610237,
      -0.03372015058994293,
      0.02943045273423195,
      -0.014407067559659481,
      -0.005908363964408636,
      -0.07527003437280655,
      -0.04325767606496811,
      -0.05548662319779396,
      -0.04518716037273407,
      -0.07358896732330322,
      0.0028339603450149298,
      -0.017412222921848297,
      -0.07363156229257584,
      -0.018588131293654442,
      -0.016372403129935265,
      -0.017578352242708206,
      0.0165101308375597,
      -0.01158400159329176,
      0.09747513383626938,
      -0.005334109533578157,
      -0.06101905182003975,
      -0.03747734799981117,
      0.037993792444467545,
      -0.05513226240873337,
      -0.009918349795043468,
      -0.00587686151266098,
      -0.01567850634455681,
      -0.010985112749040127,
      0.0034843143075704575,
      -0.011685614474117756,
      -0.010099693201482296,
      -0.06783425807952881,
      -0.0071931034326553345,
      -0.024813558906316757,
      -0.012513348832726479,
      -0.07429362088441849,
      0.00014992915384937078,
      0.04827812314033508,
      0.11104267090559006,
      0.03312426060438156,
      -0.02045266702771187,
      0.033953938633203506,
      0.06667038053274155,
      0.04637349769473076,
      -0.03208709508180618,
      -0.05373373255133629,
      0.019202765077352524,
      0.020766690373420715,
      -0.0629170835018158,
      0.011567077599465847,
      -0.031577836722135544,
      -0.053006622940301895,
      -0.06634346395730972,
      0.13249702751636505,
      -0.014917884953320026,
      0.0038218272384256124,
      0.04277574643492699,
      -0.007729989942163229,
      -0.09008332341909409,
      0.03674134984612465,
      -0.004619475919753313,
      0.015784140676259995,
      0.09200478345155716,
      0.017824962735176086,
      -0.06972561776638031,
      -5.13472095486499e-33,
      0.008722280152142048,
      -0.10570152848958969,
      -0.01777428202331066,
      0.060707952827215195,
      0.05097918584942818,
      0.017350247129797935,
      0.007606693543493748,
      0.04076181352138519,
      -0.04244818910956383,
      -0.03652308136224747,
      -0.027179377153515816,
      -0.03782236948609352,
      -0.027806326746940613,
      -0.014534569345414639,
      -0.03867150470614433,
      0.03093056008219719,
      -0.09393447637557983,
      -0.09151546657085419,
      0.031198730692267418,
      -0.026522712782025337,
      -0.03850953280925751,
      0.10426290333271027,
      0.0008496629307046533,
      0.029256127774715424,
      -0.009579936973750591,
      0.050555210560560226,
      -0.06752382963895798,
      -0.022840777412056923,
      0.010844339616596699,
      -0.014163886196911335,
      -0.042238522320985794,
      -0.018615730106830597,
      -0.037504930049180984,
      -0.08798754960298538,
      -0.02225601300597191,
      -0.06239955499768257,
      -0.002171661937609315,
      0.16672495007514954,
      0.0011731883278116584,
      0.015151712112128735,
      0.022366689518094063,
      0.019464025273919106,
      0.02254396118223667,
      -0.03785949945449829,
      -0.02162817306816578,
      0.02673156000673771,
      0.006241633556783199,
      -0.0512758307158947,
      -0.051546335220336914,
      -0.003550930181518197,
      0.02960909903049469,
      -0.046346209943294525,
      -0.06292461603879929,
      0.02309185452759266,
      -0.05955329164862633,
      -0.08876247704029083,
      0.05979245901107788,
      -0.004890246316790581,
      0.005464813206344843,
      0.027004268020391464,
      0.05979449674487114,
      -0.08492264151573181,
      0.06414949148893356,
      0.08474079519510269,
      -0.06441065669059753,
      -0.07143889367580414,
      -0.03263064846396446,
      0.06351558864116669,
      -0.09022221714258194,
      0.07299041002988815,
      -0.03916020691394806,
      -0.0542386993765831,
      0.07328365743160248,
      0.07695084810256958,
      0.03238014504313469,
      -0.0182474534958601,
      0.029376011341810226,
      -0.13965733349323273,
      0.055274009704589844,
      -0.04040101170539856,
      -0.06843223422765732,
      0.044981587678194046,
      -0.030348533764481544,
      0.07747042179107666,
      0.031274084001779556,
      -0.07538390159606934,
      -0.05329933017492294,
      0.006730884779244661,
      -0.0016493052244186401,
      0.045811478048563004,
      -0.03482714295387268,
      0.025930052623152733,
      -0.0729607343673706,
      -0.021065104752779007,
      0.011209921911358833,
      -5.716568907132569e-8,
      0.023866839706897736,
      0.019088128581643105,
      -0.0327293686568737,
      -0.011384785175323486,
      0.02129034511744976,
      -0.007793814409524202,
      0.029769502580165863,
      0.01974567025899887,
      0.018648624420166016,
      -0.05358923226594925,
      0.05194967985153198,
      0.03204130381345749,
      -0.024584397673606873,
      -0.008211145177483559,
      -0.047255609184503555,
      0.04558500275015831,
      0.04850521683692932,
      -0.021713346242904663,
      -0.005674476735293865,
      0.013230822049081326,
      -0.042569566518068314,
      0.07224944978952408,
      -0.055912744253873825,
      -0.04236818104982376,
      0.03330640867352486,
      0.09386402368545532,
      -0.019242018461227417,
      0.03455395996570587,
      -0.021414633840322495,
      -0.0020839001517742872,
      0.04785602539777756,
      -0.023736270144581795,
      0.11104073375463486,
      -0.03260036185383797,
      0.025873664766550064,
      0.02271995134651661,
      -0.021863900125026703,
      -0.07013937830924988,
      -0.09799943119287491,
      0.06901176273822784,
      0.05469126999378204,
      0.020996443927288055,
      0.030611786991357803,
      -0.04779801145195961,
      -0.029144398868083954,
      -0.0789838507771492,
      0.02782069519162178,
      0.017055895179510117,
      0.07021072506904602,
      0.044709816575050354,
      0.07075224816799164,
      -0.07793337851762772,
      0.03373638913035393,
      0.07002951204776764,
      0.02099294774234295,
      0.005039949435740709,
      0.028016511350870132,
      -0.06332585960626602,
      0.13148853182792664,
      0.018758650869131088,
      0.10253770649433136,
      0.05363130569458008,
      0.07056349515914917,
      0.016524190083146095
    ],
    "content": "---\ntitle: Firebase Auth token verification with a custom backend server\ndescription: Firebase as a platform that offers a wide range of services to developers to build, improve, and grow their apps with little or almost no effort. This includes services like authentication, databases,  analytics, file storage, push messaging and more. When it comes to user authentication, Firebase provides an Authentication service that allows for codes to be written in order for users to be logged into an app right from the client side, and limit user access to resources in other Firebase products. This is fairly simple to use without the need to implement any backend solution. Firebase also provides an Admin SDK that allows developers to build a custom backend if required.\nimage: https://res.cloudinary.com/suv4o/image/upload/q_auto,f_auto,w_1200,e_sharpen:100/v1626001455/blog/firebase-authentication-token-verification-with-a-custom-backend-server\nkeywords:\n    - Firebase\n    - Authentication\n    - Firestore\n    - Javascript\n    - Node JS\n    - Token\n    - Token Verification\n    - Frontend, Backend\n    - development\n    - web development\ntype: page\nblog: post\npublished: 13th Jul 2021\nreadTime: 9\nauthor: Aleksandar Trpkovski\narticleTags:\n    - Firebase\n    - JavaScript\n    - Node.js\n---\n\n# Firebase Auth token verification with a custom backend server\n\n_{{$document.published}} • {{$document.readTime}} min read — by **[{{$document.author}}](/)**_\n\n::tag-pills{:tags=\"articleTags\"}\n::\n\n![blog hero image](https://res.cloudinary.com/suv4o/image/upload/q_auto,f_auto,w_750,e_sharpen:100/v1626001455/blog/firebase-authentication-token-verification-with-a-custom-backend-server)\n\nFirebase as a platform that offers a wide range of services to developers to build, improve, and grow their apps with little or almost no effort. This includes services like authentication, databases, analytics, file storage, push messaging and more. When it comes to user authentication, Firebase provides an Authentication service that allows for codes to be written in order for users to be logged into an app right from the client side, and limit user access to resources in other Firebase products. This is fairly simple to use without the need to implement any backend solution. Firebase also provides an Admin SDK that allows developers to build a custom backend if required.\n\nIn this article we will have a look at few examples on how we can use token ID provided by Firebase client side to verify our user on a custom backend using Node.js. Before we continue, do note that this is not an introduction to Firebase. A basic understanding of Firebase and JavaScript is required before reading on about the examples that I'm about to explain.\n\n## Connect your app to Firebase\n\nBefore we start working with Firebase we need to create a Firebase project in the <a href=\"https://console.firebase.google.com/?authuser=0\" target=\"_blank\" rel=\"noopener noreferrer\">Firebase console</a>. We will then add and initialise the Firebase SDK to our web app. For a detailed explanation on how to set up Firebase to your JavaScript project, follow the instructions on this <a href=\"https://firebase.google.com/docs/web/setup\" target=\"_blank\" rel=\"noopener noreferrer\">link</a>.\n\n## User authenticate from the client side\n\nThe example below shows user authentication using email and password on the Firebase client side SDK. As we can see it is an easy and straight forward solution without the need of backend server.\n\n```js\nfirebase\n    .auth()\n    .signInWithEmailAndPassword(email, password)\n    .then((userCredential) => {\n        console.log(userCredential.user); // Signed in\n    })\n    .catch((error) => {\n        console.log(error.code, error.message);\n    });\n```\n\nWhat happens if we would like to add on verifications for our signed in user on the custom backend server?\n\n## Verify user on the backend server\n\nTo be able to interact with Firebase from a backend server we need to use the Firebase Admin SDK. For a detailed explanation on how to set up Firebase on the backend server, follow the instructions on this <a href=\"https://firebase.google.com/docs/admin/setup\" target=\"_blank\" rel=\"noopener noreferrer\">link</a>.\n\n### Verify ID Tokens\n\nIf the user is signed in from the client app, how would we identify that user on the server. To do so, in a secure manner, we will first send the user ID token to our server from the client via HTTPS. Then, on the backend server, verify the integrity and authenticity of the ID token and retrieve the user ID (uid) from it.\n\n#### Retrieve ID token on client side\n\nWhen we sign in Firebase creates ID token that uniquely identifies the user. This ID token can be re-used to identify the user on our custom backend server. See the example below on how to get the ID token from the signed-in user:\n\n```js\nfirebase\n    .auth()\n    .currentUser.getIdToken()\n    .then((idToken) => {\n        // Send token to your backend using HTTPS\n    })\n    .catch((error) => {\n        console.log(error.code, error.message);\n    });\n```\n\n#### Verify ID token on the backend server\n\nOnce the ID token has been passed from the client app, we use the build-in method `verifyIdToken()` from the Firebase Admin SDK to verify and decode the ID token on the server. If the provided ID token has the correct format, is not expired, and is properly signed-in, then we can grab the uid of the user.\n\n```js\n// idToken comes from the client app\nadmin\n    .auth()\n    .verifyIdToken(idToken)\n    .then((decodedToken) => {\n        const uid = decodedToken.uid;\n        console.log(uid);\n    })\n    .catch((error) => {\n        console.log(error.code, error.message);\n    });\n```\n\nWhile this is a useful way to verify users on the backend server, there is one limitation faced whilst building my app. The ID tokens have a validity period of only one hour. In other words, once the ID token has been created, it lives for one hour even after the user has been sign out. Currently, there is no Firebase API to check if the user has been signed-in/out using the Admin SDK. As a work around to overcoming this limitation, continue reading the next section below.\n\n## Solution\n\nBefore we make a request to the backend server from our client app, we need to store the user ID token somewhere in the database. In our case we are going to use Firestore. We next compared the stored ID token in our database to the ID token of the user that we requested. Here are some examples below on how we can store our ID token in Firestore.\n\n```js\nconst tokenId = firebase.auth().currentUser.getIdToken(true); // With \"true\", we force refresh of new token\nconst userUid = firebase.auth().currentUser.uid;\n\n// Add a new document in collection \"tokens\". We are using uid to name the document\nfirebase\n    .firestore()\n    .collection(\"tokens\")\n    .doc(userUid)\n    .update({\n        token: tokenId,\n    })\n    .then(() => {\n        console.log(\"Token successfully written in the database!\");\n    })\n    .catch((error) => {\n        console.log(error.code, error.message);\n    });\n```\n\n> **Note:** We first need to create the collection \"tokens\" with the document named with the user \"uid\" before hand. Ideally, that would be when a user has been created. We can trigger Cloud Functions on user creation and deletion. Please refer to the following link for more details on how we can trigger Cloud Functions when user has been created <a href=\"https://firebase.google.com/docs/functions/auth-events\" target=\"_blank\" rel=\"noopener noreferrer\">link</a>.\n\nNow we need to add security rules to our Firestore where only the signed-in user can update its token based on its own uid. The Firestore rules are located in the Firebase console, under the Rules tab in the Firestore Database tab. Here is an example on how to add security rules.\n\n```js\nrules_version = '2';\nservice cloud.firestore {\n  match /databases/{database}/documents {\n    match /tokens/{id}/{u=**} {\n      allow read, write: if (isSignedIn() && isUser(id));\n    }\n    match /{document=**} {\n      allow read, write: if false;\n    }\n    function isSignedIn() {\n      return request.auth != null;\n    }\n\n    function isUser(uid) {\n      return uid == request.auth.uid;\n    }\n  }\n}\n```\n\nThe explanation of the code above can be found below:\n\n- Documents under the collection \"tokens\" can be read and written only if their document id is the same as the sent request's uid.\n- The rest of the collection are only accessible from the backend server using the Firebase Admin SDK.\n- `isSignedIn()` function checks if request is authorised.\n- `isUser(id)` function checks if id matches the authorised request's uid.\n\nLastly on the backend server we compare both ID tokens, one that we've received from the client app and the one we have stored in the Firestore. If the tokens are the same, then the user is granted access to resources in other Firebase products.\n\n> **Note:** To avoid potential security attacks, make sure you remove the user ID token in the Firestore document when user has signed-out.\n\n## Conclusion\n\n1. Firebase as a platform offers a wide range of services to developers to build, improve, and grow their apps with little or almost no effort.\n2. Users can be authenticated from the client app using Firebase Client SDK without a custom backend server.\n3. To be able to interact with Firebase from a backend server, use the Firebase Admin SDK.\n4. For verifying ID Tokens on the server, use the build-in method `verifyIdToken()` from the Firebase Admin SDK to verify and decode the ID token on the server. However, note the limitation of ID tokens having a validity period of only one hour; and the ID token remaining active even after the user has signed-out.\n5. A solution to verify only signed-in users on the server is by storing the user ID token in the Firestore and comparing that with the ID token that has been sent from the client app.\n"
  },
  {
    "articlePath": "/2021/07/24/create-a-custom-html-element-using-web-components-and-vuejs",
    "embeddings": [
      -0.06743147224187851,
      0.05172181874513626,
      -0.016826525330543518,
      0.08203013986349106,
      0.064461350440979,
      0.004944023676216602,
      -0.043658118695020676,
      0.04118194058537483,
      0.0472630076110363,
      0.0123668871819973,
      0.03135247528553009,
      0.03830501437187195,
      -0.015038086101412773,
      0.04358084872364998,
      0.08000518381595612,
      0.025818603113293648,
      -0.018138278275728226,
      0.03603643551468849,
      -0.06327641755342484,
      0.01809365674853325,
      0.03851708397269249,
      -0.016925238072872162,
      0.03218313679099083,
      0.01586155965924263,
      -0.013123192824423313,
      0.03134980425238609,
      -0.057486359030008316,
      -0.018010089173913002,
      -0.008997023105621338,
      -0.05888422206044197,
      0.10512499511241913,
      0.0070595452561974525,
      -0.0681919977068901,
      0.024471664801239967,
      -0.09531638771295547,
      0.10338972508907318,
      -0.013505405746400356,
      -0.007776167243719101,
      -0.05027399957180023,
      -0.05607883259654045,
      -0.005970176309347153,
      0.01712963357567787,
      -0.11771035939455032,
      -0.04154239967465401,
      0.0010371716925874352,
      -0.10629687458276749,
      -0.05727580562233925,
      -0.050053711980581284,
      -0.054362375289201736,
      0.017057063058018684,
      -0.0680917501449585,
      -0.11275706440210342,
      0.029254520311951637,
      0.0007485825917683542,
      -0.03349849209189415,
      0.015887511894106865,
      -0.03569050878286362,
      -0.03732844069600105,
      -0.004863486625254154,
      -0.021336663514375687,
      0.004975813440978527,
      -0.021378355100750923,
      0.051882192492485046,
      0.0045787799172103405,
      0.018835507333278656,
      0.025820497423410416,
      0.004666867200285196,
      0.03925493732094765,
      -0.016714397817850113,
      0.020739726722240448,
      -0.05309641361236572,
      0.028712688013911247,
      0.0332166850566864,
      0.04783361405134201,
      -0.0024589980021119118,
      -0.06097151339054108,
      -0.006773451343178749,
      0.016575869172811508,
      0.0150298485532403,
      -0.04685657098889351,
      0.0023736420553177595,
      0.04321683943271637,
      -0.04925040900707245,
      0.01964670605957508,
      0.048639051616191864,
      0.0880865529179573,
      0.02645152434706688,
      -0.015063455328345299,
      0.03564974665641785,
      -0.11011280119419098,
      -0.05033772066235542,
      -0.020516369491815567,
      0.07131286710500717,
      0.026990873739123344,
      0.023105651140213013,
      0.04488705098628998,
      0.06155431270599365,
      0.043804898858070374,
      -0.045970186591148376,
      0.03519529476761818,
      0.021961623802781105,
      -0.02506927400827408,
      -0.03086286224424839,
      0.014552413485944271,
      0.11194474995136261,
      0.013159054331481457,
      0.00586098013445735,
      0.029567910358309746,
      -0.06332000344991684,
      -0.031681668013334274,
      -0.017010442912578583,
      0.09359555691480637,
      -0.09627921134233475,
      -0.09360110014677048,
      0.024746982380747795,
      -0.03448346257209778,
      0.08670257031917572,
      -0.035525012761354446,
      0.11088168621063232,
      0.07173027843236923,
      0.07791419327259064,
      0.04545043781399727,
      -0.033744845539331436,
      -0.0347919836640358,
      0.04507208988070488,
      -0.057008810341358185,
      0.016914142295718193,
      8.057507577631958e-33,
      0.060661688446998596,
      0.04298252612352371,
      -0.05569024756550789,
      0.051678385585546494,
      0.07774758338928223,
      -0.02738736942410469,
      -0.0019360879668965936,
      -0.021883690729737282,
      -0.11615000665187836,
      -0.04904278367757797,
      0.04466244950890541,
      0.006446531508117914,
      -0.02500893548130989,
      0.02109278365969658,
      0.09310096502304077,
      -0.03756717965006828,
      -0.022080203518271446,
      0.0321015790104866,
      0.1018265038728714,
      -0.06402856111526489,
      0.005314640700817108,
      -0.030938778072595596,
      -0.023609708994627,
      0.06537225842475891,
      -0.021556232124567032,
      -0.0048378100618720055,
      -0.009571416303515434,
      -0.028621597215533257,
      -0.09607721865177155,
      -0.04128694161772728,
      0.09558004140853882,
      0.040694307535886765,
      -0.008572778664529324,
      0.03491048887372017,
      -0.022850530222058296,
      -0.06597506999969482,
      -0.03435393422842026,
      -0.05468504875898361,
      -0.07609675079584122,
      0.028526432812213898,
      0.03720138967037201,
      -0.00875123217701912,
      0.007860760204494,
      -0.09671539813280106,
      -0.036995984613895416,
      -0.03095110133290291,
      0.00321915908716619,
      0.09434529393911362,
      0.025708170607686043,
      -0.02885785885155201,
      -0.09834031760692596,
      0.05451318249106407,
      -0.015058391727507114,
      -0.04892792925238609,
      0.024751074612140656,
      0.023252049461007118,
      0.006368528585880995,
      -0.046779800206422806,
      0.09010028839111328,
      -0.010641809552907944,
      -0.007441651541739702,
      0.02382034622132778,
      0.00824807956814766,
      0.0020744819194078445,
      -0.05546744540333748,
      0.009982437826693058,
      0.07826044410467148,
      0.025525912642478943,
      -0.014617674052715302,
      -0.026813533157110214,
      -0.04144588112831116,
      -0.006477684248238802,
      0.02163865603506565,
      -0.07413969933986664,
      0.07022008299827576,
      -0.10161611437797546,
      -0.0007372050895355642,
      -0.09452657401561737,
      0.010721217840909958,
      -0.013177028857171535,
      -0.012534363195300102,
      -0.037703074514865875,
      -0.06964520364999771,
      0.0774618610739708,
      0.013857517391443253,
      -0.03388526290655136,
      0.0193546824157238,
      -0.07277268916368484,
      0.01604577712714672,
      -0.005142550449818373,
      -0.0005631622043438256,
      -0.01811743713915348,
      0.0015434209490194917,
      -0.14921781420707703,
      -0.029226204380393028,
      -7.777785472542348e-33,
      0.06601589173078537,
      -0.0010757161071524024,
      -0.03108067624270916,
      0.11292312294244766,
      0.05436372384428978,
      -0.032858747988939285,
      -0.019514035433530807,
      0.07008375972509384,
      -0.03343328833580017,
      -0.07385841012001038,
      -0.01705109141767025,
      -0.023722419515252113,
      -0.044325295835733414,
      0.003980832640081644,
      -0.02508416771888733,
      0.17052000761032104,
      -0.04963699355721474,
      -0.14825741946697235,
      0.10270500928163528,
      -0.07885170727968216,
      0.01498421560972929,
      0.06955267488956451,
      0.03022787906229496,
      0.041435785591602325,
      0.06370414048433304,
      -0.04067528247833252,
      -0.008022031746804714,
      0.044863663613796234,
      -0.0026089176535606384,
      -0.08697433024644852,
      -0.06268704682588577,
      0.005555060692131519,
      -0.029314689338207245,
      -0.07457610964775085,
      0.01747179590165615,
      -0.0039266664534807205,
      -0.04492882639169693,
      0.031717486679553986,
      0.0166707094758749,
      0.019810806959867477,
      0.014530874788761139,
      -0.01921486295759678,
      0.03280160576105118,
      -0.008723056875169277,
      -0.07417326420545578,
      0.009124036878347397,
      -0.02328016236424446,
      0.016989992931485176,
      0.04026500880718231,
      -0.0017141620628535748,
      0.01730884239077568,
      -0.10467378795146942,
      -0.07630185782909393,
      -0.0028982344083487988,
      -0.01577099971473217,
      -0.08476461470127106,
      0.008388263173401356,
      -0.009761489927768707,
      -0.030078260228037834,
      -0.0067456006072461605,
      0.03276081755757332,
      -0.03457282483577728,
      -0.01686658337712288,
      0.032315656542778015,
      0.016802141442894936,
      -0.09071706235408783,
      -0.10889697819948196,
      -0.03990412876009941,
      -0.04057372361421585,
      0.017165711149573326,
      0.02033960446715355,
      0.017286693677306175,
      0.06514014303684235,
      -0.02150275558233261,
      -0.005818121135234833,
      -0.04076610505580902,
      0.09247848391532898,
      -0.037523653358221054,
      0.03174500912427902,
      -0.021555162966251373,
      -0.07644001394510269,
      0.05411693453788757,
      -0.010648589581251144,
      -0.026054199784994125,
      -0.016035495325922966,
      0.028784073889255524,
      -0.09075642377138138,
      0.024585671722888947,
      0.0030398741364479065,
      0.017311017960309982,
      -0.058754704892635345,
      0.04330473765730858,
      -0.03694937378168106,
      0.09103787690401077,
      0.034702908247709274,
      -5.92409392652371e-8,
      -0.02198871597647667,
      0.011203067377209663,
      -0.09134986996650696,
      -0.06720450520515442,
      -0.04062897339463234,
      -0.02510082721710205,
      0.09528426826000214,
      0.0030793023761361837,
      -0.02292521670460701,
      0.045685041695833206,
      0.11395124346017838,
      0.08503164350986481,
      -0.014635814353823662,
      0.07088889181613922,
      -0.04029424488544464,
      0.06340266764163971,
      0.00773316016420722,
      0.05791928991675377,
      -0.018073614686727524,
      -0.03614798188209534,
      0.06874560564756393,
      0.048338841646909714,
      0.006882484070956707,
      0.0021817637607455254,
      0.12106828391551971,
      0.0585150420665741,
      0.00141928531229496,
      0.02017384208738804,
      -0.0051992470398545265,
      -0.02335614711046219,
      0.004699258599430323,
      0.009857992641627789,
      0.04565316438674927,
      0.024590061977505684,
      0.0336720310151577,
      -0.011442883871495724,
      -0.06355758756399155,
      0.0073129842057824135,
      -0.07113834470510483,
      0.04056883230805397,
      0.05170220509171486,
      -0.03789479658007622,
      -0.037344496697187424,
      -0.006028726231306791,
      0.07494118064641953,
      0.009254056960344315,
      -0.08587989956140518,
      -0.029552124440670013,
      0.04038064554333687,
      0.0013951690634712577,
      0.021365975961089134,
      -0.06484774500131607,
      0.041011910885572433,
      0.04633533954620361,
      0.01996430568397045,
      0.021323885768651962,
      0.11583193391561508,
      -0.031512219458818436,
      0.09232432395219803,
      -0.03719620406627655,
      0.0546453520655632,
      0.028088966384530067,
      0.10498864203691483,
      0.014701313339173794
    ],
    "content": "---\ntitle: Create a custom HTML element using Web Components and Vue.js\ndescription: In this day and age writing reusable components that can be used multiple times in your application or shared between other web platforms can actually save you a lot of time and effort. Web Components offer this benefit and makes it easier to build custom complex components. At the same time, this improves its reusability. Web components are a set of web platform APIs that allow you to create new custom, reusable, encapsulated HTML tags to use in web pages and web apps. Think native HTML elements <div>, <section>, <button>, but something that we can create ourselves with encapsulated functionality that can be reused across modern web browsers or any JavaScript library or framework that works with HTML.\nimage: https://res.cloudinary.com/suv4o/image/upload/q_auto,f_auto,w_1200,e_sharpen:100/v1627371334/blog/create-a-custom-HTML-element-using-Web-Components-and-Vuejs\nkeywords:\n    - Custom HTML element\n    - Custom Elements\n    - Web Components\n    - Web Components and Vue.js\n    - Vue.js\n    - Vue CLI\n    - Frontend\n    - Development\n    - Web Development\ntype: page\nblog: post\npublished: 27th Jul 2021\nreadTime: 9\nauthor: Aleksandar Trpkovski\narticleTags:\n    - JavaScript\n    - FrontEnd\n    - Vue.js\n---\n\n# Create a custom HTML element using Web Components and Vue.js\n\n_{{$document.published}} • {{$document.readTime}} min read — by **[{{$document.author}}](/)**_\n\n::tag-pills{:tags=\"articleTags\"}\n::\n\n![blog hero image](https://res.cloudinary.com/suv4o/image/upload/q_auto,f_auto,w_750,e_sharpen:100/v1627371334/blog/create-a-custom-HTML-element-using-Web-Components-and-Vuejs)\n\nIn this day and age writing reusable components that can be used multiple times in your application or shared between other web platforms can actually save you a lot of time and effort. Web Components offer this benefit and makes it easier to build custom complex components. At the same time, this improves its reusability.\n\n## What are Web Components?\n\nWeb components are a set of web platform APIs that allow you to create new custom, reusable, encapsulated HTML tags to use in web pages and web apps. Think native HTML elements `<div>` `<section>` `<button>`, but something that we can create ourselves with encapsulated functionality that can be reused across modern web browsers or any JavaScript library or framework that works with HTML.\n\nFor example, let's imagine that we've created a custom reusable HTML element `<user-register>` and subsequently used this in every web application that we need to register new users. See picture below.\n\n![blog hero image](https://res.cloudinary.com/suv4o/image/upload/q_auto,f_auto,w_750,e_sharpen:100/v1627387526/blog/register-form)\n\nWe will be creating this component later in the article using Web Components and Vue.js. However, before this takes place, we will need to build a simple web component.\n\n## Create a Web Component\n\nTo begin with let's have a look at an example of a custom HTML element created with Web Components.\n\n```js\nclass CustomElement extends HTMLElement {\n    constructor() {\n        // Always call super first in constructor\n        super();\n\n        // Create a shadow root\n        this.attachShadow({ mode: \"open\" }); // sets and returns 'this.shadowRoot'\n\n        // Create a paragraph with an id of \"paragraph\"\n        const paragraph = document.createElement(\"p\");\n        paragraph.id = \"paragraph\";\n\n        // Create some CSS to apply to the shadow dom\n        const style = document.createElement(\"style\");\n        style.textContent = `\n          p {\n           font-size: 42px;\n          }`;\n\n        // Attach the created elements to the shadow DOM\n        this.shadowRoot.append(style, paragraph);\n    }\n\n    connectedCallback() {\n        // This runs each time the element is added to the DOM\n        const shadow = this.shadowRoot;\n        const paragraph = shadow.querySelector(\"#paragraph\");\n        paragraph.innerHTML = \"This is a paragraph!\";\n    }\n}\n\ncustomElements.define(\"custom-element\", CustomElement);\n```\n\nThe JavaScript file defines a class called `CustomElement`, which extends the generic HTMLElement class. We always start by calling `super()` in the class `constructor()` method so that the correct prototype chain is established. Within the constructor, we will define all functionalities of the element when it is initialised.\n\nAn important aspect of web components is encapsulation. The Shadow DOM API is a key part of this, as it provides a way to attach a hidden separated DOM to an element. We can attach a shadow root to any element using the `attachShadow()` method with an options object that contains one option `mode` with a value of `open` or `closed`.\n\nAfter attaching the shadow root to the custom element, we next use some DOM manipulation to create the element's internal shadow DOM structure. In our case, we will create `<p>` HTML element with an id of \"**paragraph**\" and a `<style>` element with some basic style of `font-size: 42px;` to the paragraph. The final step is to attach all the created elements to the shadow root using `shadowRoot()`.\n\nThe actual updates are all handled by the life cycle callbacks, which are placed inside the class definition as methods. The `connectedCallback()` is called after the element is added to the DOM. In our case we added text to the paragraph we created.\n\nFinally, we will register our custom element using the `define()` method. In the parameters, we specify the element name, followed by the class name that defines its functionality.\n\n> **Note:** We can define a few different callbacks inside a custom element's class definition, which fire at different points in the element's lifecycle: `connectedCallback()`, `disconnectedCallback()`, `adoptedCallback()` , `attributeChangedCallback()`. For more details on using the lifecycle callbacks refer to this <a href=\"https://developer.mozilla.org/en-US/docs/Web/Web_Components/Using_custom_elements\" target=\"_blank\" rel=\"noopener noreferrer\">link</a>.\n\nOur custom HTML element is now available to use on our page. We can use the custom element in our HTML like the example below:\n\n```html\n<script src=\"custom-element.js\"></script>\n...\n<body>\n    <custom-element />\n</body>\n```\n\nThis will be reflected in the browser:\n\n![blog hero image](https://res.cloudinary.com/suv4o/image/upload/q_auto,f_auto,w_750,e_sharpen:100/v1627387526/blog/this-is-a-paragraph)\n\nA full documentation on Web Components can be found on <a href=\"https://developer.mozilla.org/en-US/docs/Web/Web_Components\" target=\"_blank\" rel=\"noopener noreferrer\">MDN Web Docs</a>.\n\n## Create a Web Components with Vue.js\n\nThe idea of using Vue.js to build a web component came whilst experimenting with some examples, as I reflected on how could I take advantage of Vue's power to create an efficient web component. It's not to say that we should include Vue.js in every web component we create, but it could be useful in certain cases. It is important to note that Vue.js adds some weight to your component, which might in turn affect your loading speed.\n\nWe are going to start by defining a class called `UserRegister`, which extends the generic HTMLElement class.\n\n```js\nclass UserRegister extends HTMLElement {\n  constructor() {\n    super();\n\n    this.attachShadow({ mode: \"open\" });\n\n    const scriptVue = document.createElement(\"script\");\n    scriptVue.src = \"https://cdn.jsdelivr.net/npm/vue@2\";\n\n    const mainApp = document.createElement(\"div\");\n    mainApp.id = \"app\";\n\n    const componentStyle = document.createElement(\"style\");\n\n    this.shadowRoot.append(scriptVue, mainApp, componentStyle);\n  }\n```\n\nIn the `constructor()` methods we attach the shadow root `attachShadow()` so that we can encapsulate our component from the rest of the document. Next, we create a `<script>` element where we import Vue.js from CDN. We also create `<div>` with an id of \"**app**\" and a `<style>` element. Lastly we attach all the created elements to the shadow root using `shadowRoot()`.\n\nWhen our `<user-register>` component is added to the DOM, we should initialise Vue.js and add some styles. We will accomplish that above by calling `connectedCallback()` in our component.\n\n```js\nconnectedCallback() {\n    const shadow = this.shadowRoot;\n    this.createVue(shadow);\n    this.updateStyle(shadow);\n  }\n```\n\nInside `connectedCallback()` we call `createVue()` and `updateStyle()` methods, passing the shadow root parameter. We define these methods inside `UserRegister` class.\n\n```js\ncreateVue(shadow) {\n    shadow.querySelector(\"script\").addEventListener(\"load\", () => {\n      const template = `\n      <form class=\"card\" @submit.prevent=\"submit\">\n        <h2 class=\"text-blue\">Register Form</h2>\n        <p>This is a custom widget Web Component made with Vue.js.</p>\n        <label class=\"label\" for=\"first\"><strong>First Name</strong></label>\n        <input v-model=\"firstName\" class=\"input\" id=\"first\" type=\"text\">\n        <label class=\"label\" for=\"last\"><strong>Last Name</strong></label>\n        <input v-model=\"lastName\" class=\"input\" id=\"last\" type=\"text\">\n        <button class=\"btn\" type=\"submit\">Register</button>\n        <p class=\"message\">{{ message }}</p>\n      </form>`;\n\n      new Vue({\n        el: shadow.querySelector(\"#app\"),\n        template,\n        data: {\n          firstName: \"\",\n          lastName: \"\",\n          message: \"\",\n        },\n        methods: {\n          submit() {\n            this.message = `User with name: ${this.fullName} has been registered!`;\n            this.firstName = \"\";\n            this.lastName = \"\";\n            setTimeout(() => {\n              this.message = \"\";\n            }, 6000);\n          },\n        },\n        computed: {\n          fullName() {\n            return `${this.firstName} ${this.lastName}`;\n          },\n        },\n      });\n    });\n  }\n```\n\nThe `createVue()` method is where we define the Vue logic. First, we select the `<script>` element that we have created in the `constructor()` method, and then wait the Vue.js script to be loaded. Once the script is loaded we continue with our Vue initialisation.\n\nHere we write our template as we normally do in Vue. We then need to tell Vue to render our templet in the `<div>` element with an id of \"**app**\" that we created earlier in the `constructor()` method. We do that with `el: shadow.querySelector(\"#app\")`. We also add three reactive properties in the data object: `firstName`, `lastName` and `message`, a `submit()` method as well as computed function `fullName()`. For more information on how Vue.js works please refer to the Vue.js documentation in the following <a href=\"https://vuejs.org/v2/guide/\" target=\"_blank\" rel=\"noopener noreferrer\">link</a>.\n\nNext, we add some styles in our component. In the `updateStyle()` method, we should first select the `<style>` element that we created in the `constructor()` , and then set textContent by adding some CSS style.\n\n```js\nupdateStyle(shadow) {\n    shadow.querySelector(\"style\").textContent = `\n      .card {\n        padding: 16px 30px;\n        max-width: 600px;\n        box-shadow: 0 4px 8px 0 rgba(0,0,0,0.2);\n      }\n      .text-blue {\n        color: #2196f3;\n      }\n      .label {\n        display: inline-block;\n        margin-top: 8px;\n        color: #2196f3;\n      }\n      .input {\n        padding: 8px;\n        margin: 2px 0;\n        display: block;\n        border: 1px solid #ccc;\n        width: 100%;\n      }\n      .btn {\n        border: none;\n        display: inline-block;\n        margin-top: 8px;\n        padding: 8px 16px;\n        vertical-align: middle;\n        overflow: hidden;\n        text-decoration: none;\n        color: #fff;\n        background-color: #2196f3;\n        text-align: center;\n        cursor: pointer;\n        white-space: nowrap;\n      }\n      .message {\n        color: #2196f3;\n        font-weight: bold;\n        text-align: center;\n      }`;\n  }\n```\n\nFinally, we register our custom element using the `define()` method. In the parameters, we specify the element name, and then the class name that defines its functionality.\n\n```js\ncustomElements.define(\"user-register\", UserRegister);\n```\n\nThat's it! Our custom `<user-register>` element is now ready to be used on our page. We can use it in our HTML like the example below:\n\n```html\n<script src=\"user-register.js\"></script>\n...\n<body>\n    <user-register />\n</body>\n```\n\n> **Note:** Now when we have created a Web Components with Vue.js, how can we compare the Web Components lifecycles to Vue.js lifecycles hooks: `constructor()` = `created()`, `connectedCallback()` = `mounted()`, `attributeChangedCallback()` = `beforeUpdate()` and `disconnectedCallback()` = `destroyed()`.\n\n## Create Web Component with Vue-CLI\n\nVue-CLI version 3 and above allow for us to export our Vue.js components into Web Components. All we're required to do is to add a build target in **`package.json`** file. More details on building targets can be found in the following <a href=\"https://cli.vuejs.org/guide/build-targets.html#library\" target=\"_blank\" rel=\"noopener noreferrer\">link</a>.\n\nIn the **`package.json`** we add the following line of code:\n\n```json\n\"scripts\": {\n\t\"wc\": \"vue-cli-service build --target wc --inline-vue --name custom-component ./src/components/custom-component.vue\"\n}\n```\n\nAnd then we run the following script in the console:\n\n```\nnpm run wc\n```\n\nThe heavy work is already done by Vue-CLI. We now can use our custom component in our HTML like the example below:\n\n```html\n<script src=\"custom-component.js\"></script>\n...\n<body>\n    <custom-component />\n</body>\n```\n\n## Conclusion\n\n1. Web components are a set of web platform APIs that allow us to create new custom, reusable, encapsulated HTML tags to use in web pages and web apps.\n2. Web Components are native HTML elements such as `<div>` `<section>` `<button>`, but something that we can create ourselves with encapsulated functionality that can be reused across modern web browsers.\n3. An important aspect of web components is encapsulation. The Shadow DOM API is a key part of this, providing a way to attach a hidden separated DOM to an element.\n4. We can take advantage of Vue's power to create efficient web components. However, we should be aware of it's size, as it affects the loading speed of the component.\n5. The Vue-CLI version 3 and above allow us to export our Vue.js components into Web Components. The heavy lifting would be carried out by Vue-CLI.\n\nAll examples above can be found in the following github repository <a href=\"https://github.com/Suv4o/Web-Components-and-Vue.js\" target=\"_blank\" rel=\"noopener noreferrer\">link</a>.\n"
  },
  {
    "articlePath": "/2021/09/07/watch-javascript-variables-for-change",
    "embeddings": [
      -0.03879833593964577,
      0.0519869327545166,
      0.03587867319583893,
      0.09767244011163712,
      0.08072111755609512,
      0.00325335212983191,
      0.06168721988797188,
      -0.039268746972084045,
      0.1120280772447586,
      -0.010052111931145191,
      -0.016298526898026466,
      0.0041236975230276585,
      -0.012276558205485344,
      0.029177449643611908,
      0.004072809591889381,
      0.06938305497169495,
      0.005474380683153868,
      0.001607260899618268,
      -0.12267152220010757,
      0.000508166674990207,
      0.05804889649152756,
      -0.043053653091192245,
      0.017318081110715866,
      -0.013660628348588943,
      -0.054349929094314575,
      -0.013405791483819485,
      -0.015019350685179234,
      -0.03833955153822899,
      -0.04345661401748657,
      -0.018126005306839943,
      0.05449061468243599,
      -0.04636025056242943,
      -0.08209286630153656,
      -0.04015866667032242,
      0.027820011600852013,
      0.03780224174261093,
      0.028228694573044777,
      -0.014603924006223679,
      0.0652066320180893,
      0.019664790481328964,
      0.05447962135076523,
      0.012117215432226658,
      -0.08182758092880249,
      -0.06814882904291153,
      0.023905176669359207,
      0.02406391315162182,
      -0.03110714815557003,
      0.036173176020383835,
      -0.11738608777523041,
      -0.019711453467607498,
      -0.05502732843160629,
      -0.09127896279096603,
      -0.012851448729634285,
      -0.01568748615682125,
      0.04278363287448883,
      0.006496061105281115,
      -0.023785831406712532,
      -0.001937377848662436,
      0.02285049483180046,
      -0.005260035861283541,
      -0.003608099417760968,
      -0.04507327079772949,
      -0.011562836356461048,
      0.009457267820835114,
      0.024942193180322647,
      -0.04721912369132042,
      -0.049493346363306046,
      -0.009722374379634857,
      -0.02744618058204651,
      0.027325060218572617,
      -0.014664937742054462,
      0.05119793117046356,
      0.1406978964805603,
      -0.03657273203134537,
      -0.006606267765164375,
      -0.08839787542819977,
      -0.006039239000529051,
      0.022366736084222794,
      0.004618708975613117,
      -0.06358157843351364,
      -0.03981475532054901,
      -0.08133285492658615,
      -0.01040191762149334,
      -0.020016510039567947,
      0.07018117606639862,
      0.012704247608780861,
      0.0037076205480843782,
      -0.011000488884747028,
      0.02144116722047329,
      -0.04377604275941849,
      -0.12789687514305115,
      -0.043144144117832184,
      -0.04211850464344025,
      0.09057539701461792,
      0.06247532367706299,
      0.03631052374839783,
      0.010327549651265144,
      -0.02761964127421379,
      0.02521045319736004,
      0.06456286460161209,
      0.02185945026576519,
      -0.00021792578627355397,
      0.01861456409096718,
      0.018077393993735313,
      0.13357044756412506,
      -0.032329853624105453,
      -0.024964714422822,
      0.030874328687787056,
      -0.025476934388279915,
      0.04108061641454697,
      -0.009611890651285648,
      0.0649806410074234,
      -0.0008802771917544305,
      -0.010454181581735611,
      -0.009950474835932255,
      0.0005408984725363553,
      0.08271220326423645,
      -0.01720147766172886,
      0.0386245921254158,
      0.01680660992860794,
      0.18010541796684265,
      -0.00965160597115755,
      -0.025634467601776123,
      -0.03963639959692955,
      0.04125817492604256,
      -0.023679859936237335,
      0.0019612202886492014,
      2.4786022050797657e-33,
      0.08890949934720993,
      -0.027003265917301178,
      -0.08492203056812286,
      0.01678164303302765,
      0.0076581924222409725,
      0.04490761086344719,
      0.036155637353658676,
      0.0007865554071031511,
      -0.014108635485172272,
      0.0067107160575687885,
      0.01869322545826435,
      0.06650589406490326,
      -0.045277439057826996,
      -0.03328445926308632,
      0.03176065906882286,
      0.00014371212455444038,
      -0.0064194598235189915,
      0.019053885713219643,
      0.04514731466770172,
      -0.012238974682986736,
      0.0009210057323798537,
      0.03128988295793533,
      -0.08174026012420654,
      0.02809518575668335,
      -0.05246000736951828,
      -0.014675569720566273,
      -0.04553881287574768,
      -0.025846805423498154,
      -0.08815102279186249,
      -0.010351627133786678,
      0.0633680522441864,
      0.05291661247611046,
      0.03128614276647568,
      0.029186800122261047,
      -0.006962564308196306,
      -0.10499691963195801,
      -0.08333686739206314,
      -0.03808188438415527,
      -0.06706808507442474,
      -0.02585243061184883,
      0.06825771182775497,
      -0.011731250211596489,
      -0.04876668006181717,
      -0.08898194134235382,
      -0.08320220559835434,
      -0.046974003314971924,
      0.003316728863865137,
      0.047850072383880615,
      -0.009245137684047222,
      -0.02281321957707405,
      -0.03999331220984459,
      0.06088262423872948,
      -0.025539495050907135,
      -0.07434172183275223,
      0.016323905438184738,
      0.05454020947217941,
      -0.026050038635730743,
      -0.03910942003130913,
      -0.07175560295581818,
      -0.06398764997720718,
      -0.013908459804952145,
      0.0014778702752664685,
      0.08058521896600723,
      0.020861398428678513,
      0.008035199716687202,
      0.002562564332038164,
      0.0927070677280426,
      0.02821386232972145,
      0.014363805763423443,
      -0.009905860759317875,
      -0.0555553063750267,
      0.07853960245847702,
      0.010093048214912415,
      -0.0016962025547400117,
      0.05535036697983742,
      -0.056917473673820496,
      -0.07656008005142212,
      0.028056958690285683,
      0.008442778140306473,
      -0.00038355932338163257,
      0.029310034587979317,
      0.04889078438282013,
      -0.03773023933172226,
      0.09198076277971268,
      -0.024380672723054886,
      0.028256697580218315,
      -0.010014175437390804,
      -0.03556795045733452,
      -0.08795206993818283,
      -0.005179438274353743,
      0.08148592710494995,
      0.00047642976278439164,
      -0.03975100442767143,
      -0.0732940137386322,
      -0.009795146994292736,
      -4.492818020027494e-33,
      0.0595974326133728,
      -0.041407592594623566,
      0.014458231627941132,
      0.0778166651725769,
      0.0058057489804923534,
      -0.02533874474465847,
      -0.005273626185953617,
      0.028327295556664467,
      0.04288838058710098,
      -0.04716319963335991,
      0.03158309683203697,
      -0.025388803333044052,
      -0.12382692098617554,
      0.002796934684738517,
      -0.00801204051822424,
      0.06436492502689362,
      -0.07241486757993698,
      -0.15013015270233154,
      0.04066633805632591,
      -0.02360451966524124,
      0.06403414160013199,
      0.03149069473147392,
      0.05310402438044548,
      -0.001835476141422987,
      -0.007174145895987749,
      -0.016726309433579445,
      0.02019813098013401,
      0.017265768721699715,
      -0.015183718875050545,
      -0.009004475548863411,
      -0.08274741470813751,
      0.006312130484730005,
      -0.0862090140581131,
      0.09514328837394714,
      0.011450483463704586,
      -0.04488455131649971,
      0.028678972274065018,
      0.015499918721616268,
      -0.041544049978256226,
      0.0681113675236702,
      0.07096882164478302,
      0.020401494577527046,
      0.00422460213303566,
      -0.004569686017930508,
      -0.023406831547617912,
      0.009653585962951183,
      0.0717606395483017,
      0.05987536534667015,
      0.05372725427150726,
      -0.043373383581638336,
      0.0027504765894263983,
      -0.1294267475605011,
      -0.029474496841430664,
      0.05563266575336456,
      -0.023431427776813507,
      -0.018230164423584938,
      0.002344861626625061,
      -0.11606082320213318,
      -0.05662951245903969,
      0.10252443701028824,
      0.023208804428577423,
      -0.03216980770230293,
      -0.0379309356212616,
      0.07868758589029312,
      -0.07497227936983109,
      -0.011682255193591118,
      -0.04794030636548996,
      -0.0458935871720314,
      0.0914822593331337,
      0.009112020954489708,
      0.02544875256717205,
      -0.05704159662127495,
      0.024293649941682816,
      -0.08199908584356308,
      -0.0045254770666360855,
      0.036978814750909805,
      0.02702101692557335,
      -0.1121579259634018,
      0.006067872513085604,
      -0.03640862554311752,
      -0.03939568251371384,
      -0.011792967095971107,
      -0.00396102387458086,
      -0.048153720796108246,
      0.019261879846453667,
      0.09961335361003876,
      -0.04835662245750427,
      0.06314853578805923,
      0.019015006721019745,
      -0.050954487174749374,
      -0.009891457855701447,
      0.032109010964632034,
      -0.0206528939306736,
      -0.004063817672431469,
      -0.08516287803649902,
      -5.3570953895132334e-8,
      -0.11187471449375153,
      0.061844855546951294,
      -0.03920133784413338,
      -0.027026765048503876,
      -0.05573119968175888,
      -0.02806277759373188,
      0.05432112142443657,
      -0.028198260813951492,
      -0.03111649863421917,
      -0.0007190073374658823,
      0.1052720844745636,
      0.07705942541360855,
      0.10349605232477188,
      0.05931724235415459,
      -0.09467433393001556,
      -0.0889187753200531,
      0.00777125358581543,
      -0.009938209317624569,
      -0.010368607006967068,
      0.0620819553732872,
      0.029063988476991653,
      -0.006912108510732651,
      0.001377683482132852,
      0.014432244002819061,
      0.12070928514003754,
      -0.04526044800877571,
      -0.03128110244870186,
      0.024225173518061638,
      0.040428392589092255,
      0.012755930423736572,
      -0.0015442314324900508,
      0.06569717079401016,
      0.06237298995256424,
      0.06959696114063263,
      -0.01718403957784176,
      -0.004010857082903385,
      -0.043643612414598465,
      -0.026746707037091255,
      -0.012346304953098297,
      0.1259983330965042,
      0.1460631936788559,
      -0.07136344909667969,
      -0.06389917433261871,
      0.021548662334680557,
      -0.01159137487411499,
      0.013433583080768585,
      -0.005539367441087961,
      -0.08370251208543777,
      0.02923630364239216,
      -0.03784984350204468,
      0.016631245613098145,
      0.019966378808021545,
      0.04311762750148773,
      0.019118934869766235,
      0.012247459962964058,
      -0.026021944358944893,
      0.12610524892807007,
      -0.0010252331849187613,
      -0.013263116590678692,
      0.02922781929373741,
      0.039151858538389206,
      -0.04492517560720444,
      -0.02402428537607193,
      0.04492281749844551
    ],
    "content": "---\ntitle: Watch JavaScript Variables for Change\ndescription: We all know that in JavaScript there is no event that fires when a value of a variable changes. But by defining getters and setters in the object this is now possible. First, define a new property on an object with \"Object.defineProperty\" method. As a first argument, we pass the object on which to define the property. If the object is defined in the global scope, \"this\" will refer to the window object. In the second argument, we will define the name of the property. In our case, we define a property with name \"name\". The third argument is the descriptor for the property being defined.\nimage: https://res.cloudinary.com/suv4o/image/upload/q_auto,f_auto,w_1200,e_sharpen:100/v1630971440/blog/watch-javascript-variables-for-change\nkeywords:\n    - Watch JavaScript Variables for change\n    - Listen to variables\n    - JavaScript Object\n    - Getters and Setters\n    - Object.defineProperty\n    - Development\n    - Web Development\ntype: page\nblog: post\npublished: 7th Sep 2021\nreadTime: 6\nauthor: Aleksandar Trpkovski\narticleTags:\n    - JavaScript\n    - FrontEnd\n    - Node.js\n---\n\n# Watch JavaScript Variables for Change\n\n_{{$document.published}} • {{$document.readTime}} min read — by **[{{$document.author}}](/)**_\n\n::tag-pills{:tags=\"articleTags\"}\n::\n\n![blog hero image](https://res.cloudinary.com/suv4o/image/upload/q_auto,f_auto,w_750,e_sharpen:100/v1630971440/blog/watch-javascript-variables-for-change)\n\nWe all know that in JavaScript there is no event that fires when a value of a variable changes. But by defining <a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Guide/Working_with_Objects#defining_getters_and_setters\" target=\"_blank\" rel=\"noopener noreferrer\">getters</a> and <a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Guide/Working_with_Objects#defining_getters_and_setters\" target=\"_blank\" rel=\"noopener noreferrer\">setters</a> in the object this is now possible.\n\nFirst, define a new property on an object with `Object.defineProperty` <a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object/defineProperty\" target=\"_blank\" rel=\"noopener noreferrer\">method</a>. As a first argument, we pass the object on which to define the property. If the object is defined in the global scope, `this` will refer to the window object. In the second argument, we will define the name of the property. In our case, we define a property with name `name`. The third argument is the descriptor for the property being defined.\n\n```js\nObject.defineProperty(this, \"name\", {\n    get() {},\n    set(value) {},\n});\n```\n\nIn the descriptor we write the logic in the getter and setting methods. In the setter if the received value is the same as the previous set value, we `return`. Otherwise, we store the previous value in a variable called `oldValue` and we assign the new value in the variable `_name`. We next return the `_name` in the getter.\n\n```js\nObject.defineProperty(this, \"name\", {\n    get() {\n        return this._name;\n    },\n    set(value) {\n        if (value === this.name) {\n            return;\n        }\n        const oldValue = this.name;\n        this._name = value;\n        console.log(`Changed value from ${oldValue} to ${value}`);\n    },\n});\n\nthis.name = \"Aleks\";\nthis.name = \"Nicole\";\nthis.name = \"Nicole\";\nconsole.log(this.name);\n```\n\nThe output of this will be:\n\n```plain\nChanged value from undefined to Aleks\nChanged value from Aleks to Nicole\nNicole\n```\n\nAs seen above, we set the name to \"Nicole\" two times in the row but it was registered only one change of a value.\n\n## Create a reusable function\n\nThe example above is a good starting point. However, we will need to repeat the same procedure over and over again, each time we define a watcher to a new variable. To avoid that hassle, we will create a reusable function:\n\n```js\nconst createWatchedProperty = (propertyName) => {\n    Object.defineProperty(this, propertyName, {\n        get() {\n            return this[`_${propertyName}`];\n        },\n        set(value) {\n            if (value === this[propertyName]) {\n                return;\n            }\n            const oldValue = this[propertyName];\n            this[`_${propertyName}`] = value;\n            console.log(`Changed value from ${oldValue} to ${value}`);\n        },\n    });\n};\n\ncreateWatchedProperty(\"name\");\nthis.name = \"Aleks\";\nthis.name = \"Nicole\";\nthis.name = \"Nicole\";\nconsole.log(this.name);\n```\n\nNow, we can use `createWatchedProperty` function to create a watched property by passing the name of the variable.\n\nAt the moment we only output the old and the new variables in the console. It would be nice if can define a custom function where we can write a logic on value change. Let's see how we can do that:\n\n```js\nconst createWatchedProperty = (propertyName) => {\n    Object.defineProperty(this, propertyName, {\n        get() {\n            return this[`_${propertyName}`];\n        },\n        set(value) {\n            if (value === this[propertyName]) {\n                return;\n            }\n            const oldValue = this[propertyName];\n            this[`_${propertyName}`] = value;\n            this[\"watch\" + propertyName[0].toUpperCase() + propertyName.slice(1)](\n                (newVal = value),\n                (oldVal = oldValue)\n            );\n        },\n    });\n};\n\nthis.watchName = (newValue, oldValue) => {\n    console.log(\"New: \", newValue, \"Old: \", oldValue);\n};\n\ncreateWatchedProperty(\"name\");\nthis.name = \"Aleks\";\nthis.name = \"Nicole\";\nthis.name = \"Nicole\";\nconsole.log(this.name);\n```\n\nThe output of this will be:\n\n```plain\nNew:  Aleks Old:  undefined\nNew:  Nicole Old:  Aleks\nNicole\n```\n\nThe function where we define the logic of the value change in the example above name starts with \"watch\" + the name of the variable in camel case. In our example, this will be `watchName`. The function takes two parameters `newValue` and `oldValue`. See example above.\n\n## Problem with the current solution\n\nThe code above works perfectly fine but only when is defined in the global scope. But what if we want to defined it in an object's method?\n\nLet's see the following example:\n\n```js\nconst createWatchedProperty = (propertyName) => {\n    Object.defineProperty(this, propertyName, {\n        get() {\n            return this[`_${propertyName}`];\n        },\n        set(value) {\n            if (value === this[propertyName]) {\n                return;\n            }\n            const oldValue = this[propertyName];\n            this[`_${propertyName}`] = value;\n            this[\"watch\" + propertyName[0].toUpperCase() + propertyName.slice(1)](\n                (newVal = value),\n                (oldVal = oldValue)\n            );\n        },\n    });\n};\n\nconst someObject = {\n    someFunction: function () {\n        this.watchName = (newValue, oldValue) => {\n            console.log(\"New: \", newValue, \"Old: \", oldValue);\n        };\n\n        createWatchedProperty(\"name\");\n        this.name = \"Aleks\";\n        this.name = \"Nicole\";\n        this.name = \"Nicole\";\n        console.log(this.name);\n    },\n};\n\nsomeObject.someFunction();\n```\n\nThe output of this will be:\n\n```plain\nNicole\n```\n\nWhen we use `createWatchedProperty` function inside the object's method, `this` doesn't refer to the global object (window). Instead, `this` refers to its internal function. To solve this issue, we need to make some changes in our `createWatchedProperty` function where we can pass the object as a parameter to specify where we would like the property to be created.\n\nLet's see the code bellow:\n\n```js\nconst createWatchedProperty = (propertyName, obj) => {\n    Object.defineProperty(obj, propertyName, {\n        get() {\n            return obj[`_${propertyName}`];\n        },\n        set(value) {\n            if (value === obj[propertyName]) {\n                return;\n            }\n            const oldValue = obj[propertyName];\n            obj[`_${propertyName}`] = value;\n            obj[\"watch\" + propertyName[0].toUpperCase() + propertyName.slice(1)]((newVal = value), (oldVal = oldValue));\n        },\n    });\n};\n\nconst someObject = {\n    someFunction: function () {\n        this.watchName = (newValue, oldValue) => {\n            console.log(\"New: \", newValue, \"Old: \", oldValue);\n        };\n\n        createWatchedProperty(\"name\", this);\n        this.name = \"Aleks\";\n        this.name = \"Nicole\";\n        this.name = \"Nicole\";\n        console.log(this.name);\n    },\n};\n\nsomeObject.someFunction();\n```\n\n## Create subscribe and unsubscribe functions\n\nLastly, we can go further by creating **subscribe** and **unsubscribe** functions. In the descriptor we should set `configurable: true`. The `Object.defineProperty()` defaults to non-configurable properties and we should pass it `true` to allow it. This is important because we are unable to redefine the property when we unsubscribe from our watcher.\n\n```js\nconst subscribe = (propertyName, obj) => {\n    Object.defineProperty(obj, propertyName, {\n        configurable: true,\n        get() {\n            return obj[`_${propertyName}`];\n        },\n        set(value) {\n            if (value === obj[propertyName]) {\n                return;\n            }\n            const oldValue = obj[propertyName];\n            obj[`_${propertyName}`] = value;\n            obj[\"watch\" + propertyName[0].toUpperCase() + propertyName.slice(1)]((newVal = value), (oldVal = oldValue));\n        },\n    });\n};\n\nconst unsubscribe = (propertyName, obj) => {\n    Object.defineProperty(obj, propertyName, {\n        get() {},\n        set() {},\n    });\n};\n\nthis.watchName = (newValue, oldValue) => {\n    console.log(\"New: \", newValue, \"Old: \", oldValue);\n};\n\nsubscribe(\"name\", this);\nthis.name = \"Aleks\";\nthis.name = \"Nicole\";\nthis.name = \"Nicole\";\nthis.name = \"April\";\nunsubscribe(\"name\", this);\nthis.name = \"Tom\";\nthis.name = \"Mark\";\nthis.name = \"Bob\";\nsubscribe(\"name\", this);\nthis.name = \"Chris\";\n```\n\nThe output of this will be:\n\n```js\nNew:  Aleks Old:  undefined\nNew:  Nicole Old:  Aleks\nNew:  April Old:  Nicole\nNew:  Chris Old:  April\n```\n\n## Conclusion\n\n1.  In JavaScript there isn't an event that fires when a value of a variable changes. But that is completely possible to be implemented by defining getters and setters in the object.\n2.  We use `Object.defineProperty` method to define a variable that we can watch for changes.\n3.  It is a good practice to create a reusable function for creating a watched property, where we can pass an object argument in order for the variable to be defined in that particular object.\n4.  Creating **subscribe** and **unsubscribe** functions allow us to add and remove a watcher to the variable. That way, we can stop watching a variable change when we need to. Remember to add set `configurable: true` in the descriptor. This will allow us to redefined the property when we unsubscribe.\n\nAll examples above can be found in the following github repository <a href=\"https://github.com/Suv4o/watch-javascript-variables\" target=\"_blank\" rel=\"noopener noreferrer\">link</a>.\n"
  },
  {
    "articlePath": "/2021/09/14/style-binding-in-sfc-in-vue-3",
    "embeddings": [
      -0.0824148878455162,
      0.011821402236819267,
      0.011243630200624466,
      0.09281498938798904,
      0.04887065291404724,
      0.047036781907081604,
      -0.03170884773135185,
      -0.01044806744903326,
      0.0949149951338768,
      -0.0015032932860776782,
      -0.04011649638414383,
      0.04382389038801193,
      -0.034340836107730865,
      0.004762232769280672,
      0.09565696865320206,
      0.0545353926718235,
      -0.0008963620639406145,
      0.06764286011457443,
      -0.03529958799481392,
      0.09863144159317017,
      0.03759102150797844,
      0.02467820979654789,
      -0.0025845349300652742,
      -0.03380758687853813,
      -0.021174829453229904,
      0.057262565940618515,
      -0.10567015409469604,
      -0.02893364615738392,
      0.03180450201034546,
      -0.05152030661702156,
      0.048753511160612106,
      0.01687965914607048,
      -0.05566496029496193,
      0.07089392095804214,
      -0.07415301352739334,
      0.043539684265851974,
      0.026898620650172234,
      -0.02992788329720497,
      -0.05580487474799156,
      0.055688779801130295,
      -0.0005512900534085929,
      0.04558088257908821,
      -0.11606740951538086,
      -0.0683877021074295,
      0.006486447993665934,
      -0.019561894237995148,
      -0.014779354445636272,
      -0.05035020038485527,
      -0.11776746064424515,
      -0.021734541282057762,
      -0.032210033386945724,
      -0.11761528253555298,
      0.029748663306236267,
      0.028996828943490982,
      -0.043856702744960785,
      0.012034626677632332,
      0.033215198665857315,
      0.0011464637937024236,
      0.07382700592279434,
      0.02839510329067707,
      0.0075681754387915134,
      -0.013354063965380192,
      -0.01824992150068283,
      0.0267610102891922,
      0.0555146224796772,
      0.04137169197201729,
      0.052295636385679245,
      0.020375031977891922,
      -0.009666637517511845,
      -0.01621737703680992,
      -0.05650124326348305,
      0.003431816352531314,
      0.07837472856044769,
      0.022898150607943535,
      0.015716738998889923,
      0.044216420501470566,
      0.048885736614465714,
      0.009708782657980919,
      0.047415852546691895,
      -0.14986906945705414,
      0.006372822914272547,
      -0.022296972572803497,
      -0.05638289079070091,
      0.005711953155696392,
      0.041323479264974594,
      0.1454184353351593,
      -0.02748825028538704,
      -0.06381630897521973,
      0.03209374472498894,
      0.004292048513889313,
      -0.05696920305490494,
      -0.060274891555309296,
      0.006456100847572088,
      0.04097786173224449,
      0.04724471643567085,
      -0.004949903581291437,
      0.030184602364897728,
      0.07267983257770538,
      -0.0012944082263857126,
      0.005098200403153896,
      -0.0006851240177638829,
      0.026620734483003616,
      -0.05041435733437538,
      0.037436291575431824,
      0.12366431206464767,
      0.011489060707390308,
      -0.012728176079690456,
      0.013857769779860973,
      -0.12908947467803955,
      -0.0025641166139394045,
      0.02414695918560028,
      0.015287046320736408,
      -0.013827206566929817,
      -0.11468381434679031,
      -0.038110822439193726,
      0.007005680352449417,
      0.08643509447574615,
      0.0007815458811819553,
      0.08904208242893219,
      0.04899238795042038,
      0.07637448608875275,
      -0.041305381804704666,
      -0.046066898852586746,
      -0.060704898089170456,
      -0.033476822078228,
      -0.10551796853542328,
      0.004951376002281904,
      5.1801148732739e-33,
      0.033558301627635956,
      0.007351324427872896,
      -0.054221611469984055,
      0.023432034999132156,
      0.08001722395420074,
      -0.01770542934536934,
      0.001039077527821064,
      -0.05160333588719368,
      -0.09031830728054047,
      0.023762183263897896,
      0.11363054811954498,
      -0.04017142578959465,
      0.006234948989003897,
      0.05306480452418327,
      -0.0014806444523856044,
      0.004620592575520277,
      0.030624406412243843,
      -0.021709328517317772,
      -0.02887354977428913,
      -0.016224073246121407,
      0.033436328172683716,
      -0.0371924564242363,
      -0.023246871307492256,
      0.02582625299692154,
      -0.02540690079331398,
      -0.00861562043428421,
      0.00013634347124025226,
      0.024940207600593567,
      -0.057718630880117416,
      -0.04097352921962738,
      0.05780124291777611,
      0.021039070561528206,
      0.04235640913248062,
      0.052985139191150665,
      -0.017877109348773956,
      -0.07162350416183472,
      0.019543331116437912,
      -0.055327821522951126,
      -0.06473629176616669,
      0.062476951628923416,
      0.0344538539648056,
      0.02191978693008423,
      -0.00444771209731698,
      -0.06438595801591873,
      -0.07544857263565063,
      -0.02716803178191185,
      0.01827014796435833,
      0.08005181699991226,
      0.030291276052594185,
      -0.03431830182671547,
      -0.03456736356019974,
      0.06256754696369171,
      -0.026509076356887817,
      -0.02175932377576828,
      0.0894598439335823,
      0.014011667110025883,
      -0.010973142459988594,
      0.0032737997826188803,
      0.03192862123250961,
      -0.005665457807481289,
      -0.011475330218672752,
      0.021442260593175888,
      0.07180465757846832,
      -0.014734096825122833,
      -0.025669744238257408,
      0.03216732665896416,
      0.04100574553012848,
      0.020728692412376404,
      0.009683745913207531,
      -0.04435880854725838,
      0.006175671238452196,
      0.028307128697633743,
      -0.03053152561187744,
      -0.045527976006269455,
      0.08727513998746872,
      -0.10914549976587296,
      -0.05091583728790283,
      -0.059958867728710175,
      0.06714769452810287,
      -0.010683014988899231,
      -0.07812103629112244,
      0.020461272448301315,
      -0.0038331651594489813,
      0.14403106272220612,
      -0.06604966521263123,
      -0.06579961627721786,
      0.03044302575290203,
      -0.03198102116584778,
      0.007120662368834019,
      -0.10420846939086914,
      0.009318946860730648,
      -0.05469837784767151,
      0.03200989589095116,
      -0.131997212767601,
      -0.04448924958705902,
      -5.635867257399148e-33,
      0.11369054019451141,
      0.0345466211438179,
      -0.03631781414151192,
      0.08310486376285553,
      -0.017994888126850128,
      -0.01593695394694805,
      -0.04309806600213051,
      0.04465209320187569,
      0.018141916021704674,
      -0.09890585392713547,
      0.06597398221492767,
      0.009736292064189911,
      -0.03793903812766075,
      -0.008181554265320301,
      0.013231288641691208,
      0.09756723791360855,
      -0.06564749777317047,
      -0.13935045897960663,
      0.045869532972574234,
      -0.04014096409082413,
      0.06584057956933975,
      -0.0626417025923729,
      0.030311306938529015,
      0.05804195627570152,
      0.032869014889001846,
      -0.06695566326379776,
      0.0027676234021782875,
      0.030032938346266747,
      -0.09412924945354462,
      -0.002008132403716445,
      -0.035652048885822296,
      0.01258829701691866,
      -0.0939812883734703,
      -0.03483268618583679,
      -0.011363111436367035,
      -0.02741452120244503,
      -0.030918309465050697,
      0.021748805418610573,
      0.05735592916607857,
      0.030893823131918907,
      0.0028079163748770952,
      -0.006838441360741854,
      -0.004950383678078651,
      -0.012347054667770863,
      -0.08339919149875641,
      0.0873115137219429,
      0.029362518340349197,
      0.012920495122671127,
      0.06853514909744263,
      -0.007272043731063604,
      0.06791950017213821,
      -0.08126451075077057,
      -0.06244578957557678,
      0.07941727340221405,
      -0.05623965710401535,
      -0.049278855323791504,
      -0.026391346007585526,
      -0.009547119028866291,
      -0.04514634981751442,
      0.028630999848246574,
      0.05096769705414772,
      0.00520522054284811,
      -0.004133512265980244,
      -0.023071767762303352,
      0.005792838521301746,
      -0.02367698773741722,
      -0.05238468199968338,
      -0.05612511187791824,
      0.08484232425689697,
      -0.06426610797643661,
      0.04508298635482788,
      -0.006735905539244413,
      0.017995484173297882,
      0.013674301095306873,
      -0.026371732354164124,
      -0.05130096897482872,
      0.11165420711040497,
      -0.02207307144999504,
      0.015556910075247288,
      -0.004317173734307289,
      -0.09271953254938126,
      0.016342412680387497,
      -0.03128039836883545,
      0.007681986317038536,
      -0.014924092218279839,
      0.14065991342067719,
      -0.05937274917960167,
      0.03622903674840927,
      0.018795989453792572,
      -0.037577856332063675,
      -0.004258736036717892,
      0.02198762632906437,
      0.011772817932069302,
      0.0597979761660099,
      -0.032237350940704346,
      -5.3217544149219975e-8,
      -0.009572758339345455,
      0.02627127431333065,
      -0.029264824464917183,
      -0.049429912120103836,
      -0.05612904205918312,
      0.04038473591208458,
      0.07618139684200287,
      -0.005296103656291962,
      -0.02355046011507511,
      0.10911557078361511,
      0.05710224807262421,
      0.08104860782623291,
      0.042220890522003174,
      0.03352977707982063,
      -0.04312074929475784,
      0.0303102508187294,
      0.009670073166489601,
      0.04444844648241997,
      -0.09189082682132721,
      -0.0598871149122715,
      0.017602596431970596,
      0.060570795089006424,
      0.014438483864068985,
      -0.02454184927046299,
      0.11976823210716248,
      0.03238135948777199,
      -0.07378634810447693,
      -0.013247447088360786,
      0.022645043209195137,
      0.030652491375803947,
      0.00663628987967968,
      0.03631842881441116,
      -0.06557177752256393,
      -0.06531112641096115,
      0.012444104067981243,
      0.026851408183574677,
      -0.004751328844577074,
      -0.036875151097774506,
      -0.023869700729846954,
      0.07380480319261551,
      0.006017998326569796,
      -0.07100013643503189,
      -0.022235335782170296,
      0.007149207405745983,
      0.019478222355246544,
      -0.026443669572472572,
      -0.07443371415138245,
      0.0106285335496068,
      0.011922077275812626,
      0.008090541698038578,
      0.054398421198129654,
      -0.027432383969426155,
      -0.02588202804327011,
      0.046419721096754074,
      -0.022806935012340546,
      -0.028052037581801414,
      0.03468518331646919,
      0.037412676960229874,
      0.05915374308824539,
      -0.035299502313137054,
      -0.023261193186044693,
      -0.059976402670145035,
      0.06024172902107239,
      -0.014995352365076542
    ],
    "content": "---\ntitle: Style Binding in SFC in Vue 3\ndescription: For a long time, Vue as a framework had a built-in feature of binding inline styles in HTML templates. But what has changed since the new Vue 3.2 release is that we can now also use the existing v-bind syntax with reactive variables inside our <style> tag in the .vue files aka Single File Components (SFC). Let's take a look how can we do that. With the two examples above, we saw how easy it was to implement a style binding using v-bind syntax in Vue 3.2. But the question is, how has Vue allowed for this? If we inspect the elements in the DevTools of the browser, we will see that all elements used v-bind have their inline styles with CSS variable in them.\nimage: https://res.cloudinary.com/suv4o/image/upload/q_auto,f_auto,w_1200,e_sharpen:100/v1631578776/blog/style-binding-in-sfc-in-vue-3/style-binding-in-sfc-in-vue-3\nkeywords:\n    - Style Binding in SFC in Vue 3\n    - v-bind\n    - Vue 3\n    - Binding Styles in Vue\n    - CSS Variables\n    - Development\n    - Web Development\ntype: page\nblog: post\npublished: 14th Sep 2021\nreadTime: 3\nauthor: Aleksandar Trpkovski\narticleTags:\n    - Vue.js\n    - JavaScript\n    - CSS\n---\n\n# Style Binding in SFC in Vue 3\n\n_{{$document.published}} • {{$document.readTime}} min read — by **<a href=\"/\" target=\"_blank\" rel=\"noopener noreferrer\">{{$document.author}}</a>**_\n\n::tag-pills{:tags=\"articleTags\"}\n::\n\n![blog hero image](https://res.cloudinary.com/suv4o/image/upload/q_auto,f_auto,w_750,e_sharpen:100/v1631578776/blog/style-binding-in-sfc-in-vue-3/style-binding-in-sfc-in-vue-3)\n\nFor a long time, Vue as a framework had a built-in feature of binding inline styles in HTML templates. But what has changed since the new Vue 3.2 release is that we can now also use the existing `v-bind` syntax with reactive variables inside our `<style>` tag in the `.vue` files aka Single File Components (SFC). Let's take a look how can we do that:\n\n## Binding a Random Color\n\nFirstly, we should declare a reactive variable in the `data` function called `randomColor`.\n\n```js\ndata() {\n    return {\n        randomColor: \"\"\n    };\n}\n```\n\nNext, we declare a method called `getRandomColor()` that returns a random colour.\n\n```js\nmethods: {\n    getRandomColor() {\n        return \"#\" + (((1 << 24) * Math.random()) | 0).toString(16);\n    }\n}\n```\n\nWe assign a random colour to the `randomColor` reactive variable when the component has been mounted.\n\n```js\nmounted() {\n    this.randomColor = this.getRandomColor();\n}\n```\n\nNow we use `v-bind` syntax within our `<style>` tag to set our colour.\n\n```html\n<style scoped>\n    .text {\n        color: v-bind(randomColor);\n    }\n</style>\n```\n\nLastly, we create `<h1>` element in our vue template with a class of `class=\"text\"`.\n\n```html\n<template>\n    <h1 class=\"text\">Hi There!</h1>\n</template>\n```\n\nNow every time our component re-renders, we will have a different colour on our text.\n\n## Expand the example above with some more styles.\n\nIn the previous example, we saw how easy was to bind reactive variables in our `<style>` tag. Now let's add more styles to our example. We are going to create an addition button, so on click a change will be noted with the colour of the text, the size and the colour of the border, as well as the font size of the button. Let's have look on how we can do that:\n\n```js\n<script>\nexport default {\n    data() {\n        return {\n            randomColor: \"blue\",\n            borderStyle: \"2px solid red\",\n            buttonFontSize: \"2\",\n        };\n    },\n    methods: {\n        getRandomColor() {\n            return \"#\" + (((1 << 24) * Math.random()) | 0).toString(16);\n        },\n        getRandomNumber() {\n            return Math.floor(Math.random() * 10) + 1;\n        },\n        pickStyle() {\n            this.randomColor = this.getRandomColor();\n            this.borderStyle =\n                this.getRandomNumber() + \"px solid \" + this.getRandomColor();\n            this.buttonFontSize = this.getRandomNumber();\n        },\n    },\n};\n</script>\n\n<template>\n    <h1 class=\"text\">Hi There!</h1>\n    <button class=\"btn\" @click=\"pickStyle\">Random color</button>\n</template>\n\n<style scoped>\n.text {\n    color: v-bind(randomColor);\n    border: v-bind(borderStyle);\n    padding: 20px;\n}\n.btn {\n    cursor: pointer;\n    font-size: calc(v-bind(buttonFontSize + \"px\") * 10);\n}\n</style>\n```\n\nWith each click of the button we get different styles. See the gif animation below:\n\n![blog hero image](https://res.cloudinary.com/suv4o/image/upload/c_scale,f_auto,w_750/v1631578836/blog/style-binding-in-sfc-in-vue-3/style-binding-random-colour)\n\n## Conclusion\n\nWith the two examples above, we saw how easy it was to implement a style binding using `v-bind` syntax in Vue 3.2. But the question is, how has Vue allowed for this? If we inspect the elements in the DevTools of the browser, we will see that all elements used `v-bind` have their inline styles with CSS variable in them.\n\n```html\n<div>\n    <h1\n        class=\"text\"\n        style=\"--0d3f91e2-randomColor:#a36835; --0d3f91e2-borderStyle:10px solid #3e58fa; --0d3f91e2-buttonFontSize____px_:5px;\"\n    >\n        Hi There!\n    </h1>\n    <button\n        class=\"btn\"\n        style=\"--0d3f91e2-randomColor:#a36835; --0d3f91e2-borderStyle:10px solid #3e58fa; --0d3f91e2-buttonFontSize____px_:5px;\"\n    >\n        Random color\n    </button>\n</div>\n```\n\nSo what Vue has done is to assign native CSS variables to each the elements in their inline styles so that Vue can update the values of the variables when needed.\n\nAll examples above can be found in the following github repository <a href=\"https://github.com/Suv4o/style-binding-in-single-file-component-in-vue-3\" target=\"_blank\" rel=\"noopener noreferrer\">link</a>.\n"
  },
  {
    "articlePath": "/2021/09/17/including-local-nodejs-modules-in-firebase-cloud-functions",
    "embeddings": [
      -0.04347415268421173,
      0.0015873629599809647,
      0.030178459361195564,
      0.07375575602054596,
      0.1507272571325302,
      0.031259503215551376,
      -0.012755496427416801,
      0.022762196138501167,
      0.04730018600821495,
      -0.03925705701112747,
      0.027644354850053787,
      0.05974123999476433,
      0.01602061279118061,
      0.006686032749712467,
      0.07216645777225494,
      0.031376421451568604,
      -0.008808160200715065,
      -0.004652298986911774,
      -0.06941159814596176,
      0.009377465583384037,
      0.002559291897341609,
      -0.0018656497122719884,
      0.005315309390425682,
      -0.008014356717467308,
      -0.047860708087682724,
      0.018075566738843918,
      -0.09862321615219116,
      -0.020632024854421616,
      -0.03594035282731056,
      -0.0017010171432048082,
      0.050999224185943604,
      0.045259688049554825,
      -0.03897469863295555,
      0.05783935636281967,
      -0.035095471888780594,
      0.12058715522289276,
      -0.027650577947497368,
      -0.07023593783378601,
      -0.0012373493518680334,
      -0.04438329488039017,
      0.05533437803387642,
      0.05377660319209099,
      -0.09998001158237457,
      -0.04142988100647926,
      -0.004150839522480965,
      -0.06453313678503036,
      -0.06633366644382477,
      -0.059106383472681046,
      -0.10662613809108734,
      0.0209545586258173,
      -0.00636275764554739,
      -0.01593617908656597,
      -0.09159630537033081,
      0.040579088032245636,
      -0.0015725151170045137,
      0.03915715217590332,
      -0.03276482969522476,
      -0.006770109757781029,
      0.012797743082046509,
      0.07268436998128891,
      -0.010857800021767616,
      -0.018920596688985825,
      0.002482813782989979,
      0.010531595908105373,
      0.07159924507141113,
      -0.04053640365600586,
      0.00784542690962553,
      -0.030813146382570267,
      0.03241591155529022,
      -0.03234969452023506,
      0.013334907591342926,
      0.05378102883696556,
      0.01927276886999607,
      0.026599261909723282,
      -0.041381798684597015,
      -0.11240360140800476,
      -0.004856903105974197,
      0.05131666362285614,
      0.00972069799900055,
      -0.05680236592888832,
      -0.05394851416349411,
      -0.030460892245173454,
      0.01004702877253294,
      0.045729927718639374,
      0.005463097244501114,
      0.07130036503076553,
      -0.02567683905363083,
      -0.04071720689535141,
      0.05675753206014633,
      0.024119265377521515,
      -0.0446847528219223,
      -0.1374499797821045,
      0.016372021287679672,
      0.057140953838825226,
      -0.009404615499079227,
      -0.036367207765579224,
      0.017467821016907692,
      0.05252065137028694,
      0.020475562661886215,
      -0.0141669362783432,
      -0.0421108640730381,
      0.006327157374471426,
      0.09074550122022629,
      -0.020762519910931587,
      0.0902659222483635,
      -0.03291080519556999,
      -0.07212727516889572,
      0.00246469140984118,
      -0.033333852887153625,
      -0.06594561785459518,
      -0.026248551905155182,
      0.06264566630125046,
      -0.03472210839390755,
      -0.07447996735572815,
      -0.004545216914266348,
      0.0008711061673238873,
      0.13085609674453735,
      -0.09527584165334702,
      0.06182815879583359,
      0.13498236238956451,
      0.07984499633312225,
      0.05511845275759697,
      0.08375737816095352,
      0.009641414508223534,
      0.03371519222855568,
      -0.026804616674780846,
      -0.09542233496904373,
      5.407967922791492e-33,
      0.045504242181777954,
      -0.021677421405911446,
      -0.039885662496089935,
      0.02647390402853489,
      0.019779227674007416,
      -0.01896342821419239,
      0.02571721188724041,
      -0.005861063487827778,
      -0.12934620678424835,
      0.021025827154517174,
      -0.018368931487202644,
      0.15042491257190704,
      0.003916227724403143,
      0.007130318786948919,
      0.051129791885614395,
      -0.01926282048225403,
      -0.005181567743420601,
      0.008100143633782864,
      0.09166520088911057,
      0.028287721797823906,
      -0.011351731605827808,
      0.008407272398471832,
      0.02409013733267784,
      0.08499173074960709,
      0.001377138658426702,
      0.04587268829345703,
      0.04541783407330513,
      -0.013732535764575005,
      -0.03709911182522774,
      0.007774503901600838,
      0.016856223344802856,
      -0.01143208984285593,
      -0.04723483696579933,
      0.017973875626921654,
      0.053134433925151825,
      0.0067716133780777454,
      -0.048307813704013824,
      -0.06804542988538742,
      -0.10816198587417603,
      0.0011371548753231764,
      0.03310946002602577,
      0.019639788195490837,
      -0.05894653871655464,
      -0.08080572634935379,
      -0.01879120245575905,
      -0.02132049947977066,
      0.023848583921790123,
      0.0010080593638122082,
      0.05744868516921997,
      -0.05462568625807762,
      -0.0767410397529602,
      0.028998948633670807,
      0.08244772255420685,
      -0.03842682018876076,
      0.02860492654144764,
      0.01949329674243927,
      0.021357720717787743,
      -0.07160685956478119,
      0.06372968852519989,
      -0.010779841803014278,
      -0.04741852357983589,
      -0.05262468010187149,
      -0.017140313982963562,
      0.016509557142853737,
      -0.006268937606364489,
      0.012027024291455746,
      0.00634095910936594,
      0.057302240282297134,
      0.05646714195609093,
      -0.010748444125056267,
      0.006204784847795963,
      0.050530195236206055,
      0.03797680512070656,
      0.05083353444933891,
      0.01872286945581436,
      -0.06026133522391319,
      -0.05556035041809082,
      -0.042755547910928726,
      -0.04353775829076767,
      0.014968596398830414,
      -0.033953242003917694,
      -0.024406682699918747,
      -0.08343429863452911,
      0.07438099384307861,
      -0.05258495360612869,
      -0.007717990782111883,
      0.05168333277106285,
      -0.020563384518027306,
      -0.02153593674302101,
      -0.006613585166633129,
      0.027044156566262245,
      -0.01975579373538494,
      -0.0005769601557403803,
      -0.09030354022979736,
      -0.04753563180565834,
      -5.897540381415851e-33,
      0.0351279191672802,
      -0.06204723194241524,
      -0.06430933624505997,
      0.06403926759958267,
      -0.0201338492333889,
      -0.00901068840175867,
      -0.0071905916556715965,
      0.031778816133737564,
      0.0544460266828537,
      0.02642708085477352,
      -0.06953538209199905,
      0.00996471382677555,
      -0.023244712501764297,
      -0.025508780032396317,
      -0.02736475318670273,
      0.10192359983921051,
      -0.10690945386886597,
      -0.10017082095146179,
      0.08806218951940536,
      -0.04169091582298279,
      -0.02121572196483612,
      0.06250866502523422,
      0.025114616379141808,
      0.027682123705744743,
      -0.0043303463608026505,
      0.02417769283056259,
      -0.0801319107413292,
      0.021541455760598183,
      -0.015368033200502396,
      -0.029759077355265617,
      -0.0604022815823555,
      0.02899705059826374,
      -0.09520407021045685,
      -0.0061561837792396545,
      -0.04061518609523773,
      -0.03855512663722038,
      -0.02199452556669712,
      0.08615915477275848,
      0.038853444159030914,
      -0.06823234260082245,
      0.03433219715952873,
      0.0056692506186664104,
      -0.03093123249709606,
      -0.025968793779611588,
      -0.029556244611740112,
      0.016700470820069313,
      0.032914478331804276,
      -0.0016603911062702537,
      -0.023741377517580986,
      -0.020333092659711838,
      -0.03079262748360634,
      -0.05960642546415329,
      -0.11258957535028458,
      0.036379124969244,
      -0.09729725122451782,
      -0.026755962520837784,
      0.08301269263029099,
      0.004655372817069292,
      0.01578834280371666,
      -0.02215593121945858,
      0.09238485991954803,
      -0.10214491933584213,
      -0.02822590060532093,
      -0.020647946745157242,
      -0.067733533680439,
      -0.08236707001924515,
      -0.014569787308573723,
      -0.043694835156202316,
      0.07196752727031708,
      -0.016050420701503754,
      -0.08606424182653427,
      -0.016211818903684616,
      0.08532874286174774,
      -0.005762883927673101,
      -0.05052648484706879,
      0.03104384057223797,
      0.06469950824975967,
      -0.057635676115751266,
      0.10290676355361938,
      -0.02854871191084385,
      -0.0534723661839962,
      0.03505706042051315,
      -0.03403749689459801,
      -0.003374860156327486,
      0.04855194315314293,
      -0.0614219605922699,
      -0.044940751045942307,
      0.07201876491308212,
      -0.05928600952029228,
      -0.0555666983127594,
      -0.009335671551525593,
      0.05153249204158783,
      -0.018111759796738625,
      0.03200232982635498,
      -0.06713331490755081,
      -5.504439570813702e-8,
      -0.03016972541809082,
      0.03421105071902275,
      -0.13768920302391052,
      -0.027804607525467873,
      0.03247006610035896,
      -0.03589737415313721,
      0.09785404056310654,
      0.1022837683558464,
      0.007782003842294216,
      0.02277209237217903,
      0.06665123999118805,
      0.08958529680967331,
      0.027948390692472458,
      0.00458168238401413,
      0.001472682342864573,
      0.026201149448752403,
      0.039779793471097946,
      0.08004485815763474,
      -0.04340146854519844,
      0.03629637509584427,
      0.005724445916712284,
      0.07061231136322021,
      -0.006942908279597759,
      0.048732977360486984,
      0.018988972529768944,
      0.05677417665719986,
      0.0021953536197543144,
      0.062438253313302994,
      0.0040704854764044285,
      0.0015467714983969927,
      -0.04497988149523735,
      0.02375485748052597,
      0.022841574624180794,
      0.0030064983293414116,
      0.04291378706693649,
      0.04201821982860565,
      0.021948348730802536,
      -0.052939459681510925,
      -0.017652668058872223,
      0.08963561803102493,
      0.03193666785955429,
      -0.08753904700279236,
      -0.050239671021699905,
      -0.016608688980340958,
      0.00914929248392582,
      -0.07103791832923889,
      -0.0244591124355793,
      -0.007410889491438866,
      0.00010680768900783733,
      0.09378278255462646,
      0.051470834761857986,
      -0.03609279543161392,
      -0.021354908123612404,
      0.01544783916324377,
      0.03321659564971924,
      0.014336735010147095,
      0.059109847992658615,
      -0.12445750087499619,
      0.05779632180929184,
      -0.025534307584166527,
      -0.012332139536738396,
      0.0006566299707628787,
      0.11431368440389633,
      -0.030857814475893974
    ],
    "content": "---\ntitle: Including local Node.js modules in Firebase Cloud Functions\ndescription: Modules have become a major part of the JavaScript ecosystem. They allow us to split our JavaScript programs up into separate smaller parts, called modules, that can be imported when needed. In this article, we will have a look at how we can include local modules in our Node.js app, and then see how that differentiates from including them in Firebase Cloud Functions. Before we continue, do note that this is not an introduction to Firebase. A basic understanding of Firebase and JavaScript is required before reading on about the examples that I'm about to explain.\nimage: https://res.cloudinary.com/suv4o/image/upload/q_auto,f_auto,w_1200,e_sharpen:100/v1631602643/blog/including-local-nodejs-modules-in-firebase-cloud-functions/including-local-modules\nkeywords:\n    - Including local Node.js modules in Firebase Cloud Functions\n    - Node.js\n    - Firebase\n    - JavaScript Modules\n    - Common.js\n    - CommonJS\n    - Include Modules\n    - Development\n    - Web Development\ntype: page\nblog: post\npublished: 17th Sep 2021\nreadTime: 8\nauthor: Aleksandar Trpkovski\narticleTags:\n    - JavaScript\n    - Firebase\n    - Node.js\n---\n\n# Including local Node.js modules in Firebase Cloud Functions\n\n_{{$document.published}} • {{$document.readTime}} min read — by **[{{$document.author}}](/)**_\n\n::tag-pills{:tags=\"articleTags\"}\n::\n\n![blog hero image](https://res.cloudinary.com/suv4o/image/upload/q_auto,f_auto,w_750,e_sharpen:100/v1631602643/blog/including-local-nodejs-modules-in-firebase-cloud-functions/including-local-modules)\n\nModules have become a major part of the JavaScript ecosystem. They allow us to split our JavaScript programs up into separate smaller parts, called modules, that can be imported when needed.\n\nIn this article, we will have a look at how we can include local modules in our Node.js app, and then see how that differentiates from including them in Firebase Cloud Functions. Before we continue, do note that this is not an introduction to Firebase. A basic understanding of Firebase and JavaScript is required before reading on about the examples that I'm about to explain.\n\n## Build simple app in Node.js\n\nBefore diving into Node.js modules, let's build a simple Node.js app. We are going to create a function that takes a string and then returns a capitalised first letter of each word in that string. Let's see how we can do that.\n\n```js\nfunction capitalise(input) {\n    const words = input.split(\" \");\n    const CapitalisedWords = [];\n    words.forEach((word) => {\n        CapitalisedWords.push(word[0].toUpperCase() + word.slice(1, word.length));\n    });\n    return CapitalisedWords.join(\" \");\n}\n\nconsole.log(capitalise(\"javascript engines were originally used only in web browsers\"));\n```\n\nThe output of this will be:\n\n```bash\nJavascript Engines Were Originally Used Only In Web Browsers\n```\n\nThe example above works perfectly fine, but it would be nicer if we split it into smaller peaces. Let's carry this out.\n\n## Create a module from the `capitalise` function\n\nTo organise our code better, we can define a separate module with the `capitalise` function, and then include this in our main app. Our directory structure should look like this:\n\n```plain\nroot/\n  index.js\n  capitalise.js\n```\n\nIn the `capitalise.js` we define `capitalise` function as follows:\n\n```js\nmodule.exports.capitalise = function (input) {\n    const words = input.split(\" \");\n    const CapitalisedWords = [];\n    words.forEach((word) => {\n        CapitalisedWords.push(word[0].toUpperCase() + word.slice(1, word.length));\n    });\n    return CapitalisedWords.join(\" \");\n};\n```\n\nAnd then in `index.js` we include the capitalise module and call that function. We use the <a href=\"https://requirejs.org/docs/commonjs.html\" target=\"_blank\" rel=\"noopener noreferrer\">CommonJS</a> syntax to export and import modules in our Node.js app. In CommonJS `module.exports` method is used for exporting modules, and `require()` method for importing.\n\n> Please note that with the release of Node version 15.3.0 ES modules can also be used.\n\n```js\nconst { capitalise } = require(\"./capitalise\");\n\nconsole.log(capitalise(\"javascript engines were originally used only in web browsers\"));\n```\n\nWe've achieved the exact same outcome now by using modules. As we can see, modules help to better organise and structure our codebase.\n\n## Create the same app in Firebase Cloud Functions\n\nBefore we start working with Firebase, we need to create a Firebase project in the <a href=\"https://console.firebase.google.com/?authuser=0\" target=\"_blank\" rel=\"noopener noreferrer\">Firebase console</a>. In order to be able to use Firebase Cloud Functions, we need to upgrade to the Blaze plan (pay as you go). Firebase has a moderate free tier for hobby users. If you'ld like to check the prices for their services visit the following <a href=\"https://firebase.google.com/pricing\" target=\"_blank\" rel=\"noopener noreferrer\">link</a>.\n\nThe next step is to install Firebase command line tools using npm. We can install the firebase tools with the following command `npm install -g firebase-tools`.\n\nOnce firebase tools have been installed, we need to login to our firebase. We can do so with the following command in the terminal `firebase login` and then visit the URL that firebase CLI will output in the command line.\n\nIn our root directory, we will now initialise our firebase functions. We initialise our functions with `firebase init`. Firebase CLI will give us options to select. We need to chose **_Functions: Configure a Cloud Functions directory and its files._**\n\n![blog hero image](https://res.cloudinary.com/suv4o/image/upload/q_auto,f_auto,w_750,e_sharpen:100/v1631602642/blog/including-local-nodejs-modules-in-firebase-cloud-functions/image-1_nxs6lz)\n\nWe next choose the project that we've created earlier in the firebase console:\n\n![blog hero image](https://res.cloudinary.com/suv4o/image/upload/q_auto,f_auto,w_750,e_sharpen:100/v1631602642/blog/including-local-nodejs-modules-in-firebase-cloud-functions/image-2_bm8o63)\n\nSelect JavaScript as a language, **No** to ESLint, and lastly choose to install dependencies with npm.\n\n![blog hero image](https://res.cloudinary.com/suv4o/image/upload/q_auto,f_auto,w_750,e_sharpen:100/v1631602643/blog/including-local-nodejs-modules-in-firebase-cloud-functions/image-3_rbawf6)\n\nNow we have **functions** folder with **index.js** file. Our directory structure should look like this:\n\n```plain\nroot/\n  functions/\n\t  index.js\n\t\tpackage.json\n```\n\nThe way we include local Node.js modules in our cloud functions is a little different than our earlier Node.js app. If we follow the earlier steps, we will end up with an error when we try to deploy Cloud Functions to Firebase. In order to include local Node.js modules in cloud functions, we need to to do the following.\n\nIn the **index.js** we will now declare our `onRequest` cloud function and then include our capitalise module. You can clearly see that we call `capitalise` instead of `./capitalise` in the `require()` method.\n\n```js\nconst functions = require(\"firebase-functions\");\nconst { capitalise } = require(\"capitalise\");\n\nexports.capitaliseWords = functions.https.onRequest((req, res) => {\n    const text = capitalise(req.body.text);\n    res.status(200).send(text);\n});\n```\n\nNext, we create a new directory inside our **function/** folder called **capitalise/,** with a sub-folder file called **index.js**. In the **functions/capitalise/index.js** file we declare our `capitalise` functions and export as a module:\n\n```js\nmodule.exports.capitalise = function (input) {\n    const words = input.split(\" \");\n    const CapitalisedWords = [];\n    words.forEach((word) => {\n        CapitalisedWords.push(word[0].toUpperCase() + word.slice(1, word.length));\n    });\n    return CapitalisedWords.join(\" \");\n};\n```\n\nWe will also need to run **npm init -y** inside **functions/capitalise/** directory. That way, we can initialise a **package.json** file. Our final directory structure should look like this:\n\n```plain\nroot/\n  functions/\n\t  index.js\n\t\tpackage.json\n\t\tcapitalise/\n\t\t\tindex.js\n\t\t\tpackage.json\n```\n\nLastly, we need to declare our module in **functions/package.json** using the file: prefix. In the following example, capitalise refers to our module name and **\"file:./capitalise/\"** is the directory containing our module:\n\n```json\n\"dependencies\": {\n        \"capitalise\": \"file:./capitalise/\"\n    },\n```\n\nTo deploy our cloud functions, we use the following command in our terminal `firebase deploy --only functions`.\n\n## Conclusion\n\n1. Modules have become a major part of the JavaScript ecosystem. They allow us to split our JavaScript programs up into separate smaller parts, so called modules that can be imported when needed.\n2. In Node.js, we organise our code better by defining separate local modules and then include them in our app.\n3. There are differences on how we include local modules in Node.js app versus Firebase Cloud functions.\n4. In order to use local modules in Firebase Cloud Functions, we need to declare our module in **functions/package.json** using the file: prefix.\n\nAll examples above can be found in the following github repository <a href=\"https://github.com/Suv4o/local-nodejs-modules-in-firebase-cloud-functions\" target=\"_blank\" rel=\"noopener noreferrer\">link</a>.\n"
  },
  {
    "articlePath": "/2021/09/25/suspense-feature-in-vue-3-with-sfc-script-setup",
    "embeddings": [
      -0.07552354037761688,
      0.04227681830525398,
      -0.008511376567184925,
      0.14280906319618225,
      0.07328885793685913,
      0.028312599286437035,
      -0.030912527814507484,
      0.019986629486083984,
      0.1172761395573616,
      -0.027688203379511833,
      -0.024641357362270355,
      0.040295977145433426,
      -0.04219643026590347,
      -0.014464139007031918,
      0.05339207127690315,
      0.012338823638856411,
      0.06395256519317627,
      -0.027121666818857193,
      -0.03149669989943504,
      0.015669500455260277,
      0.06308118999004364,
      -0.026414569467306137,
      -0.010810836218297482,
      -0.031960681080818176,
      0.004037521313875914,
      -0.0002854136691894382,
      -0.07259973138570786,
      -0.009042715653777122,
      0.009720600210130215,
      0.011660123243927956,
      0.05018529295921326,
      -0.0009979753522202373,
      -0.04283420741558075,
      0.009762141853570938,
      -0.02331256866455078,
      0.05847557634115219,
      -0.04237375035881996,
      -0.05192484334111214,
      -0.018607869744300842,
      0.005971326492726803,
      0.0419468954205513,
      0.06416570395231247,
      -0.1410699337720871,
      -0.03381578251719475,
      -0.006293820682913065,
      -0.07929157465696335,
      -0.06543256342411041,
      -0.05876343324780464,
      -0.06220046058297157,
      -0.033950965851545334,
      -0.014720865525305271,
      -0.09211263060569763,
      0.005364253185689449,
      0.021876417100429535,
      -0.018555013462901115,
      0.013237847946584225,
      0.026043539866805077,
      -0.026555262506008148,
      -0.07039669156074524,
      -0.0233839713037014,
      -0.008617824874818325,
      -0.06840641051530838,
      0.009411095641553402,
      0.006580996327102184,
      0.06886837631464005,
      0.026536861434578896,
      0.05471804365515709,
      -0.025884995236992836,
      0.06170695275068283,
      0.04489367455244064,
      -0.036691535264253616,
      0.024645822122693062,
      0.03819013014435768,
      -0.013368751853704453,
      -0.010994634591042995,
      -0.004359226208180189,
      0.01869390718638897,
      -0.05276194214820862,
      0.025708436965942383,
      -0.10615368187427521,
      0.004410439170897007,
      -0.02975705824792385,
      -0.0245242677628994,
      -0.015616243705153465,
      0.026885241270065308,
      0.057521067559719086,
      -0.0032042074017226696,
      -0.07319905608892441,
      0.02465289831161499,
      -0.012105411849915981,
      -0.04933520406484604,
      -0.07849245518445969,
      -0.019807711243629456,
      0.12546922266483307,
      -0.026227746158838272,
      0.05805316939949989,
      0.0030443575233221054,
      0.06419310718774796,
      -0.06146768480539322,
      0.008709420450031757,
      -0.004975778982043266,
      0.03831065446138382,
      0.006630801595747471,
      0.05442588031291962,
      0.07437435537576675,
      -0.02652321197092533,
      -0.019662238657474518,
      0.017445653676986694,
      -0.1433253139257431,
      0.008876661770045757,
      -0.03643651679158211,
      0.05007307976484299,
      0.037343498319387436,
      -0.08242050558328629,
      -0.051545076072216034,
      0.04571164771914482,
      0.08193174004554749,
      0.019427141174674034,
      0.04629559814929962,
      0.0678185373544693,
      0.19591554999351501,
      0.00751352496445179,
      -0.04078807681798935,
      -0.0341460146009922,
      0.09112768620252609,
      -0.1023181900382042,
      0.044016435742378235,
      6.732701934368224e-33,
      0.03330710157752037,
      -0.022050563246011734,
      -0.061127424240112305,
      0.01985996402800083,
      0.01767197623848915,
      -0.008628656156361103,
      0.04952370375394821,
      -0.0196401197463274,
      -0.06101478263735771,
      0.04308762773871422,
      0.040335364639759064,
      0.008679578080773354,
      -0.02284359559416771,
      -0.01096890214830637,
      -0.019012877717614174,
      -0.04913602024316788,
      0.023950817063450813,
      0.0031292629428207874,
      0.017551394179463387,
      -0.0303525198251009,
      0.04726104438304901,
      -0.07439868152141571,
      -0.03873786702752113,
      0.014729376882314682,
      0.010502053424715996,
      -0.011369829066097736,
      -0.0260627418756485,
      -0.0112442746758461,
      -0.11163091659545898,
      -0.011214657686650753,
      0.014426539652049541,
      0.03634163364768028,
      0.005342705640941858,
      0.0002606403431855142,
      0.01150121446698904,
      -0.11547868698835373,
      -0.05741119384765625,
      -0.09659312665462494,
      -0.0720241367816925,
      0.05234724283218384,
      0.041703447699546814,
      0.008983634412288666,
      -0.026409616693854332,
      -0.08266327530145645,
      -0.09374368190765381,
      -0.022351151332259178,
      0.010879907757043839,
      0.07784605771303177,
      0.02607823722064495,
      0.0020835516043007374,
      0.0002381437661824748,
      0.04194912686944008,
      -0.01922382041811943,
      -0.027950050309300423,
      0.07664443552494049,
      0.0029114405624568462,
      0.03399309515953064,
      -0.07260698080062866,
      0.012248579412698746,
      -0.0008731596753932536,
      -0.053997334092855453,
      -0.039395350962877274,
      0.06441287696361542,
      -0.032669879496097565,
      -0.042606279253959656,
      -0.005679197143763304,
      0.0022832320537418127,
      0.0028296068776398897,
      -0.02663005329668522,
      0.003408025950193405,
      -0.08312395960092545,
      0.029360774904489517,
      0.03289099782705307,
      -0.01764455996453762,
      0.08713258057832718,
      -0.03321053087711334,
      -0.03766995668411255,
      -0.05699756741523743,
      0.06263528764247894,
      -0.04613065719604492,
      0.03094477951526642,
      -0.08870333433151245,
      -0.04497722536325455,
      0.11689721792936325,
      -0.017864756286144257,
      -0.009161054156720638,
      0.04118412360548973,
      -0.0962594673037529,
      -0.05696151778101921,
      -0.01217543426901102,
      -0.01075844094157219,
      -0.031116129830479622,
      0.044984932988882065,
      -0.06810558587312698,
      -0.05841425806283951,
      -6.69948834148574e-33,
      0.1127140149474144,
      -0.06646475195884705,
      -0.0925445705652237,
      0.03031119704246521,
      0.014477788470685482,
      0.02585919015109539,
      -0.010522649623453617,
      0.030387278646230698,
      -0.024610120803117752,
      -0.037683501839637756,
      -0.009771335870027542,
      -0.007013366091996431,
      -0.05723948776721954,
      0.034373462200164795,
      0.013076195493340492,
      0.1361447423696518,
      -0.004878855776041746,
      -0.1380622386932373,
      0.06914306432008743,
      0.026643170043826103,
      0.024453917518258095,
      0.010210978798568249,
      -0.044359978288412094,
      0.041034236550331116,
      0.05255001410841942,
      -0.04726007953286171,
      0.031811006367206573,
      0.022229455411434174,
      -0.037709128111600876,
      -0.016740189865231514,
      -0.05750394985079765,
      -0.005698203109204769,
      -0.039604853838682175,
      -0.032807353883981705,
      -0.030609553679823875,
      0.06398160755634308,
      0.030801739543676376,
      -0.0039014273788779974,
      -0.03156139701604843,
      0.07989679276943207,
      0.0631813257932663,
      0.04414357990026474,
      -0.04011499881744385,
      0.01336880587041378,
      -0.100164994597435,
      0.01891539990901947,
      0.08850996196269989,
      -0.013216163031756878,
      0.03297573700547218,
      0.047658771276474,
      0.025130795314908028,
      -0.0584108829498291,
      -0.012900118716061115,
      0.09120013564825058,
      -0.020709538832306862,
      -0.0706474632024765,
      -0.017109040170907974,
      -0.06309910863637924,
      -0.01714501343667507,
      0.02312907576560974,
      0.03985852003097534,
      -0.023899545893073082,
      0.03486918285489082,
      -0.08449734002351761,
      0.024952568113803864,
      -0.06799986213445663,
      -0.08483698964118958,
      -0.03206327557563782,
      0.08387583494186401,
      -0.023041754961013794,
      0.031845804303884506,
      -0.021178795024752617,
      0.014679926447570324,
      -0.01976817101240158,
      0.049104951322078705,
      0.0022296765819191933,
      0.06617942452430725,
      -0.07266201078891754,
      0.05066322907805443,
      0.02899419702589512,
      -0.07554345577955246,
      0.017559118568897247,
      -0.014579996466636658,
      0.05159807950258255,
      0.022243795916438103,
      0.08411403745412827,
      -0.06828003376722336,
      0.05231042578816414,
      -0.0022301224526017904,
      -0.010922941379249096,
      -0.01737895980477333,
      0.05491630733013153,
      0.006913306657224894,
      0.077938012778759,
      0.028767213225364685,
      -5.82787684777486e-8,
      -0.031923241913318634,
      -0.01641293242573738,
      -0.0041899788193404675,
      -0.06394664943218231,
      0.05788600072264671,
      -0.051656872034072876,
      0.0866904929280281,
      -0.024751193821430206,
      -0.11207470297813416,
      0.01575077697634697,
      0.1353921741247177,
      0.05551508441567421,
      0.07573526352643967,
      0.007901003584265709,
      0.007363735232502222,
      0.028018265962600708,
      0.00843483954668045,
      0.03545645996928215,
      -0.08455853909254074,
      -0.04654107987880707,
      0.009113596752285957,
      0.08577731996774673,
      -0.05651596561074257,
      -0.056075308471918106,
      0.12362261116504669,
      0.0361962728202343,
      0.006150823552161455,
      -0.02511541359126568,
      0.027304990217089653,
      -0.01685989648103714,
      0.00019969882851000875,
      0.00579099403694272,
      0.043060317635536194,
      -0.00889538787305355,
      -0.011747351847589016,
      0.08782163262367249,
      0.0502045713365078,
      -0.01765276864171028,
      0.001888398197479546,
      0.11135131120681763,
      0.052066490054130554,
      0.002153651788830757,
      -0.010379546321928501,
      0.028564056381583214,
      0.01624338887631893,
      0.022201057523489,
      -0.04279748350381851,
      -0.03771503269672394,
      0.025853564962744713,
      -0.031171010807156563,
      -0.00831373780965805,
      -0.09250487387180328,
      -0.05666021257638931,
      0.10116658359766006,
      0.0376693457365036,
      -0.05540916323661804,
      0.07691401988267899,
      -0.00461981538683176,
      0.0515407957136631,
      0.02908582240343094,
      0.01666955091059208,
      -0.04734283313155174,
      0.05408427491784096,
      0.0047736079432070255
    ],
    "content": "---\ntitle: Suspense feature in Vue 3 with SFC Script Setup\ndescription: <Suspense> is a special component in Vue 3 that lets us wait for some data to be loaded, before our component can be rendered. In other words, Suspense allows us to render some fallback content. A good example will be a loading spinner while waiting for an asynchronous API call to fetch some data from the server. Once the data has been loaded, the main content will show up. This feature allows us to create a smooth user experience. The <script setup> has top-level await, this means that the reactive variable msg won't be shown in the template until the fetch is completed. To improve the user experience, it would be nice if we displayed a loading message before the data has been loaded. This is where Suspense comes handy.\nimage: https://res.cloudinary.com/suv4o/image/upload/q_auto,f_auto,w_1200,e_sharpen:100/v1632533795/blog/vue3-suspense/vue3-suspence-cover\nkeywords:\n    - Suspense feature in Vue 3 with SFC Script Setup\n    - Vue.js\n    - Suspense\n    - JavaScript\n    - Loading\n    - Show Spinner\n    - Development\n    - Web Development\ntype: page\nblog: post\npublished: 25th Sep 2021\nreadTime: 6\nauthor: Aleksandar Trpkovski\narticleTags:\n    - JavaScript\n    - Vue.js\n    - FrontEnd\n---\n\n# Suspense feature in Vue 3 with SFC Script Setup\n\n_{{$document.published}} • {{$document.readTime}} min read — by **[{{$document.author}}](/)**_\n\n::tag-pills{:tags=\"articleTags\"}\n::\n\n![blog hero image](https://res.cloudinary.com/suv4o/image/upload/q_auto,f_auto,w_750,e_sharpen:100/v1632533795/blog/vue3-suspense/vue3-suspence-cover)\n\n`<Suspense>` is a special component in Vue 3 that lets us wait for some data to be loaded, before our component can be rendered. In other words, Suspense allows us to render some fallback content. A good example will be a loading spinner while waiting for an asynchronous API call to fetch some data from the server. Once the data has been loaded, the main content will show up. This feature allows us to create a smooth user experience.\n\nLet me demonstrate an example of how to use `<Suspense>` in Vue 3.\n\n> Note: Suspense is still an experimental new feature and the API could change down the track.\n\n## Create a Vue 3 app using Vite\n\nWe can easily scaffolding our Vue 3 project using Vite with the following command:\n\n```bash\nnpm init vite@latest my-vue-app\n```\n\nNext, we follow the prompts and choose Vue with JavaScript. Lastly, we install the dependency and run the project locally:\n\n```bash\ncd my-vue-app\n\nnpm install\nnpm run dev\n```\n\n## Make an asynchronous API call\n\nWe are going to use the new `<script setup>` syntax using <a href=\"https://v3.vuejs.org/api/composition-api.html\" target=\"_blank\" rel=\"noopener noreferrer\">Composition API</a>. This feature was released with Vue 3.2.\n\nFirst, create a new component called **_Result.vue_** in **_src/components/Result.vue_** directory. Next, use the <a href=\"https://openlibrary.org/developers/api\" target=\"_blank\" rel=\"noopener noreferrer\">OpenLibrary</a> API to fetch all **The Lord Of The Rings** books. Let's look at the following code in **_Result.vue_** component:\n\n```js\n<script setup>\n\timport { ref } from \"vue\";\n\n\tconst response = await fetch(\"http://openlibrary.org/search.json?q=the+lord+of+the+rings\");\n\tconst data = await response.json();\n\n\tconst msg = ref(`It has been found: ${data.num_found} results!`);\n</script>\n\n<template>\n    <h1>{{ msg }}</h1>\n</template>\n```\n\nThe `<script setup>` has top-level await, this means that the reactive variable `msg` won't be shown in the template until the fetch is completed. To improve the user experience, it would be nice if we displayed a loading message before the data has been loaded. This is where Suspense comes handy.\n\n## Use `<Suspense>` component\n\nIn the **_App.vue_** file, we will import our **_Result.vue_** component and then use it in our template. We next wrap our `<Result />` component with the special Vue `<Suspense>`component. Suspense is a built-in component in Vue 3. Hence, we do not need to import it.\n\nThe `<Suspense>` component has two slots, `default` and `fallback`. In our example below, while the content isn't ready, the `fallback` component is rendered. When the data has been successfully loaded, the `default` component is displayed. Sounds easy, doesn't it. Let's see our code in **_App.vue_** file:\n\n```js\n<script setup>\n import Result from \"./components/Result.vue\";\n</script>\n\n<template>\n    <Suspense>\n        <template #default>\n            <Result />\n        </template>\n        <template #fallback>\n            <h1>Loading...</h1>\n        </template>\n    </Suspense>\n</template>\n```\n\n**Loading...** will be displayed while we wait for the fetch API to be completed. Once the data is loaded, `<Result />` component will be rendered. In our example, it will be displayed as **It has been found: 487 results!**.\n\nBut what will happen if we have an error while fetching the data from the API? Currently, the fallback component will stay for an infinite amount of time as there is no error handler. So how can we then deal with errors?\n\n## Handling Errors\n\nDealing with errors in Vue is simple. Vue 3 provides `onErrorCaptured` lifecycle hook that can listen to errors. Let's see how that would look like in our final code:\n\n```js\n<script setup>\nimport { ref, onErrorCaptured } from \"vue\";\nimport Result from \"./components/Result.vue\";\n\nconst error = ref(null);\n\nonErrorCaptured(() => {\n    error.value = \"Ohh! Something went wrong!\";\n});\n</script>\n\n<template>\n    <div v-if=\"error\">{{ error }}</div>\n    <Suspense v-else>\n        <template #default>\n            <Result />\n        </template>\n        <template #fallback>\n            <h1>Loading...</h1>\n        </template>\n    </Suspense>\n</template>\n\n<style>\n```\n\nIn the above, we created `onErrorCaptured` hook and a reactive variable called `error`. Now when an error occurs, Vue hook will be able to capture it and assign value to the `error` reactive variable. In our template, we have a condition, if the error exists then we display the error message: **Ohh! Something went wrong!**, otherwise we continue with the Suspense component.\n\n![blog hero image](https://res.cloudinary.com/suv4o/image/upload/c_scale,f_auto,w_750/v1632533777/blog/vue3-suspense/vue3-suspense_mpqxff)\n\n## Conclusion\n\n1. `<Suspense>` is a special component in Vue 3 that lets us wait for some data to be loaded, before our component can be rendered.\n2. We can use the new `<script setup>` syntax and its top-level await feature to asynchronously load data from the server.\n3. The `<Suspense>` component has two slots, `default` and `fallback`. When the content isn't ready, the `fallback` component is rendered. When data is successfully loaded, the `default` component is displayed.\n4. Dealing with errors in Vue is simple. Vue 3 provides `onErrorCaptured` lifecycle hook that can listen to errors.\n\nAll examples above can be found in the following Github repository <a href=\"https://github.com/Suv4o/suspense-feature-in-vue-3\" target=\"_blank\" rel=\"noopener noreferrer\">link</a>.\n"
  },
  {
    "articlePath": "/2022/04/14/gsap-animation-with-vue3-and-vite",
    "embeddings": [
      -0.1458897739648819,
      0.0014293866697698832,
      -0.0009085522033274174,
      0.02001013606786728,
      0.056025899946689606,
      0.006383223459124565,
      -0.014667856507003307,
      0.019520225003361702,
      0.06924018263816833,
      -0.04625567048788071,
      -0.02757701836526394,
      0.009098312817513943,
      -0.016959957778453827,
      -0.029154468327760696,
      0.047885600477457047,
      -0.013320250436663628,
      0.02965726889669895,
      0.09493763744831085,
      -0.010099508799612522,
      -0.004257091321051121,
      0.04548165202140808,
      -0.059326983988285065,
      0.009194701910018921,
      -0.06563014537096024,
      0.004555911291390657,
      0.06103687733411789,
      -0.12474840879440308,
      -0.0546572282910347,
      0.0250242929905653,
      -0.042182959616184235,
      0.021500255912542343,
      -0.08677556365728378,
      -0.03759661689400673,
      0.06601157784461975,
      -0.10026836395263672,
      0.09228960424661636,
      -0.013711520470678806,
      -0.014406058937311172,
      -0.09800538420677185,
      0.005229593720287085,
      -0.05187934264540672,
      0.11428899317979813,
      -0.07799622416496277,
      -0.09122540801763535,
      0.04672171175479889,
      -0.03186473622918129,
      -0.058883894234895706,
      -0.05472758784890175,
      -0.12092670798301697,
      0.037619806826114655,
      -0.07904189825057983,
      -0.13231147825717926,
      0.01587584987282753,
      0.03881281241774559,
      -0.08216948807239532,
      0.017097169533371925,
      -0.04174558073282242,
      -0.06257113814353943,
      0.04941510781645775,
      0.0012788733001798391,
      -0.026077378541231155,
      -0.000013623748600366525,
      0.05143013224005699,
      0.01115676574409008,
      0.054485950618982315,
      0.012495691888034344,
      0.07431474328041077,
      -0.02584429830312729,
      0.01892915926873684,
      0.00209047831594944,
      -0.05469322204589844,
      -0.02770279161632061,
      0.024926647543907166,
      -0.01078170444816351,
      -0.06623537093400955,
      0.04511071369051933,
      0.016014061868190765,
      0.018300583586096764,
      0.02463902160525322,
      -0.05799805745482445,
      0.046449169516563416,
      -0.06865797191858292,
      -0.05390242859721184,
      0.023947741836309433,
      0.009999305009841919,
      0.07596882432699203,
      -0.055878765881061554,
      0.011053473688662052,
      0.009731793776154518,
      0.04204212874174118,
      0.0034172635059803724,
      0.0499269925057888,
      0.024819567799568176,
      0.028248343616724014,
      0.02725169248878956,
      0.04249657317996025,
      0.036442436277866364,
      -0.04196386784315109,
      -0.021709948778152466,
      0.0333956778049469,
      -0.024180160835385323,
      0.0024566426873207092,
      0.06148283928632736,
      0.01130950078368187,
      0.05967254564166069,
      -0.006739170756191015,
      -0.039693526923656464,
      0.017313634976744652,
      -0.08819103240966797,
      -0.020841628313064575,
      0.008816299960017204,
      0.07844309508800507,
      -0.010586900636553764,
      -0.06711985915899277,
      -0.01923489384353161,
      0.06791866570711136,
      0.05415896698832512,
      -0.03804219886660576,
      0.12071555852890015,
      0.058018360286951065,
      0.14856933057308197,
      0.04280085861682892,
      -0.01843113824725151,
      -0.04943011328577995,
      0.006633248645812273,
      -0.07081621885299683,
      0.016837939620018005,
      6.272680301697583e-33,
      -0.002412495668977499,
      0.03557156026363373,
      0.004345757886767387,
      -0.005125563591718674,
      0.034403666853904724,
      -0.020083608105778694,
      -0.01683769002556801,
      -0.05049896240234375,
      -0.12161330133676529,
      -0.018703971058130264,
      -0.010003509931266308,
      0.02279990166425705,
      -0.03409803658723831,
      -0.006452970672398806,
      0.059975896030664444,
      -0.06442521512508392,
      -0.007935174740850925,
      0.002233967650681734,
      0.005706389434635639,
      -0.05241266265511513,
      -0.006110625807195902,
      -0.03072236478328705,
      -0.000026689638616517186,
      0.02342594414949417,
      -0.0410635881125927,
      0.06147730350494385,
      0.01409075502306223,
      0.003658325644209981,
      -0.0859951302409172,
      -0.006260490510612726,
      0.019179927185177803,
      0.024369562044739723,
      -0.03771396726369858,
      0.005152195226401091,
      0.04035051539540291,
      -0.0703158751130104,
      -0.09315450489521027,
      -0.09992092847824097,
      -0.05919819325208664,
      0.06503041833639145,
      -0.010599794797599316,
      -0.03359023109078407,
      -0.037271205335855484,
      -0.11310765147209167,
      -0.03344256803393364,
      -0.027775000780820847,
      0.05147726088762283,
      0.12224844843149185,
      0.039573393762111664,
      0.02801295556128025,
      -0.0060485475696623325,
      0.05782433971762657,
      -0.07490791380405426,
      -0.05444863811135292,
      0.06115315854549408,
      0.008722136728465557,
      0.08613870292901993,
      0.012137229554355145,
      0.01478427741676569,
      0.02027808502316475,
      -0.0035891192965209484,
      0.04052576422691345,
      0.04394751787185669,
      -0.05223946273326874,
      -0.009468450210988522,
      0.0062889354303479195,
      0.013110867701470852,
      0.03791411221027374,
      -0.06372381746768951,
      0.018685707822442055,
      0.035785820335149765,
      0.02143603190779686,
      0.07766436785459518,
      -0.0042520868591964245,
      0.0762937068939209,
      -0.09151741117238998,
      -0.02959013171494007,
      -0.024906311184167862,
      -0.04697359725832939,
      -0.03671341761946678,
      -0.013540086336433887,
      0.013777079060673714,
      -0.014218714088201523,
      0.06447090208530426,
      -0.04026094079017639,
      -0.06773965060710907,
      0.06890444457530975,
      0.0054513937793672085,
      -0.05008711665868759,
      -0.043433673679828644,
      0.007241587620228529,
      0.02674219384789467,
      0.060683220624923706,
      -0.07545855641365051,
      -0.0688830316066742,
      -5.8355539929030994e-33,
      0.05447899550199509,
      -0.047579098492860794,
      -0.017910709604620934,
      0.10542359948158264,
      0.025724612176418304,
      0.012354959733784199,
      0.0175322275608778,
      0.04328930005431175,
      -0.011456931941211224,
      -0.06733158975839615,
      -0.032811205834150314,
      -0.01969091407954693,
      -0.048177748918533325,
      0.012671724893152714,
      0.06750227510929108,
      0.10946420580148697,
      -0.005521607585251331,
      -0.15851615369319916,
      0.022036006674170494,
      -0.023375697433948517,
      0.06054338812828064,
      0.013685096055269241,
      0.01963459700345993,
      0.0858118012547493,
      0.07744046300649643,
      -0.015015699900686741,
      0.051059648394584656,
      0.08298701047897339,
      -0.044382352381944656,
      -0.03465113416314125,
      -0.03510289639234543,
      0.016389986500144005,
      -0.018782755360007286,
      -0.011340082623064518,
      0.02203426882624626,
      -0.033841028809547424,
      0.045946553349494934,
      0.05109371617436409,
      0.028239481151103973,
      0.002085220767185092,
      0.013072026893496513,
      0.011723035015165806,
      0.022419514134526253,
      -0.012803511694073677,
      -0.0007085424731485546,
      0.08781439065933228,
      -0.01055292971432209,
      0.034263163805007935,
      -0.011380448006093502,
      -0.02776859700679779,
      0.017412111163139343,
      -0.021515535190701485,
      -0.07012049853801727,
      -0.009306685999035835,
      0.005918638315051794,
      -0.04538261517882347,
      -0.022730745375156403,
      -0.07724528759717941,
      -0.03941803053021431,
      -0.019817698746919632,
      -0.007800332736223936,
      -0.047101765871047974,
      -0.001391446334309876,
      -0.024207623675465584,
      0.0635734498500824,
      -0.019291289150714874,
      -0.06541408598423004,
      -0.07208894193172455,
      0.0011868728324770927,
      -0.050927042961120605,
      0.08396858721971512,
      -0.013996165245771408,
      0.08607622236013412,
      -0.032258857041597366,
      -0.0067053805105388165,
      -0.03534210845828056,
      0.1278613656759262,
      -0.02668423391878605,
      0.04212129861116409,
      -0.09029687196016312,
      -0.025166165083646774,
      0.06550993025302887,
      0.04736660420894623,
      0.023171691223978996,
      -0.0039179264567792416,
      0.07023072242736816,
      -0.09672978520393372,
      0.05224490165710449,
      0.03295903652906418,
      0.05013086274266243,
      -0.048967283219099045,
      0.07364274561405182,
      0.03990558534860611,
      0.0914311334490776,
      0.08987105637788773,
      -5.4121105819149307e-8,
      -0.024722278118133545,
      -0.0014567533507943153,
      -0.05126361548900604,
      -0.07965879887342453,
      -0.04782969504594803,
      0.0420374870300293,
      0.06555427610874176,
      -0.01430417038500309,
      -0.02388581447303295,
      -0.008121071383357048,
      0.11893195658922195,
      0.02827324904501438,
      0.03577108681201935,
      0.06310197710990906,
      -0.03731747344136238,
      0.0532342903316021,
      -0.03577279672026634,
      0.07506465911865234,
      -0.04469756409525871,
      0.0037982254289090633,
      -0.0045946575701236725,
      0.07578913122415543,
      -0.017761334776878357,
      -0.04911476746201515,
      0.04228304326534271,
      0.04750608652830124,
      -0.02791670151054859,
      0.01040414534509182,
      0.03639591857790947,
      -0.01932525634765625,
      -0.0668632760643959,
      0.017696334049105644,
      0.022967666387557983,
      -0.045744895935058594,
      -0.07537364959716797,
      -0.032815225422382355,
      -0.024667995050549507,
      -0.004622293170541525,
      -0.018655704334378242,
      0.05763576924800873,
      0.06784450262784958,
      -0.015503677539527416,
      -0.02944759465754032,
      -0.00530506856739521,
      0.03359076753258705,
      -0.011194014921784401,
      -0.048310261219739914,
      -0.06877214461565018,
      0.03774600848555565,
      0.08319990336894989,
      0.01925446279346943,
      -0.11434367299079895,
      -0.013814177364110947,
      0.0655788853764534,
      0.0071656787768006325,
      -0.05039576068520546,
      0.08353520929813385,
      -0.003500170772895217,
      0.03675143048167229,
      -0.028855187818408012,
      0.013901788741350174,
      -0.023111438378691673,
      0.11331488937139511,
      0.06611309200525284
    ],
    "content": "---\ntitle: GSAP Animation with Vue 3 and Vite\ndescription: GreenSock Animation Platform (GSAP) is the most robust JavaScript animation library to date that allows developers to animate literally any DOM element with a breeze. GSAP provides an API that can be used for complex animation to be created. Hence, is still supported by all major browsers. In comparison to CSS animation, sequencing in GSAP is very easy. So let's have a look at GSAP. We are going to use GSAP in a Vue 3 project. We will use Vite as a build tool. In this blog article, we are going to animate DOM elements. GSAP is also capable of animating SVG, Canvas, WebGL, JS object etc. The full documentation of GSAP can be found at this.\nimage: https://res.cloudinary.com/suv4o/image/upload/q_auto,f_auto,w_1200,e_sharpen:100/v1649846664/blog/gsap-animation-with-vue3-and-vite/gsap-animation-with-vue3-and-vite\nkeywords:\n    - GSAP Animation with Vue 3 and Vite\n    - Vue.js\n    - Animation\n    - JavaScript\n    - GSAP\n    - Stagger\n    - Development\n    - Web Development\n    - CSS\ntype: page\nblog: post\npublished: 14th Apr 2022\nreadTime: 10\nauthor: Aleksandar Trpkovski\narticleTags:\n    - CSS\n    - Vue.js\n    - JavaScript\n---\n\n# GSAP Animation with Vue 3 and Vite\n\n_{{$document.published}} • {{$document.readTime}} min read — by **[{{$document.author}}](/)**_\n\n::tag-pills{:tags=\"articleTags\"}\n::\n\n![blog hero image](https://res.cloudinary.com/suv4o/image/upload/q_auto,f_auto,w_750,e_sharpen:100/v1649846664/blog/gsap-animation-with-vue3-and-vite/gsap-animation-with-vue3-and-vite)\n\nGreenSock Animation Platform (GSAP) is the most robust JavaScript animation library to date that allows developers to animate literally any DOM element with a breeze. GSAP provides an API that can be used for complex animation to be created. Hence, is still supported by all major browsers. In comparison to CSS animation, sequencing in GSAP is very easy. So let's have a look at GSAP. We are going to use GSAP in a Vue 3 project. We will use Vite as a build tool.\n\n> Note: You need to have Node.js installed on your machine before following the example below. Please refer to the Node.js <a href=\"https://nodejs.org/en/\" target=\"_blank\" rel=\"noopener noreferrer\">website</a> for more information on how you can install Node.js on your machine.\n\n## Create a Vue 3 app using Vite\n\nWe can easily scaffolding our Vue 3 project using Vite with the following command:\n\n```bash\nnpm init vite@latest my-vue-app\n```\n\nWe next follow the prompts and choose Vue with JavaScript. Lastly, install the dependency and run the project locally:\n\n```bash\ncd my-vue-app\n\nnpm install\nnpm run dev\n```\n\n## Install GSAP\n\nInstall GSAP before using GSAP in your project. We can install GSAP with the following command:\n\n```bash\nnpm install gsap\n```\n\nNext, import it to our Vue app. We can do that by simply importing the library in the **App.vue** file.\n\n```bash\nimport gsap from \"gsap\";\n```\n\nThat's it! We can now use GSAP in our Vue app.\n\n## Getting Started with GSAP in Vue\n\nIn this blog article, we are going to animate DOM elements. GSAP is also capable of animating SVG, Canvas, WebGL, JS object etc. The full documentation of GSAP can be found at this <a href=\"https://greensock.com/docs/v3/GSAP\" target=\"_blank\" rel=\"noopener noreferrer\">link</a>.\n\nLet's start by animating a DOM element from one state to another. We can do that with the to method in GSAP. For example that would be:\n\n```js\ngsap.to(\".box\", { x: 300, duration: 2 });\n```\n\nThe first parameter is a target object. The target can be Selector text, Variable, Object or even an Array. We can technically pass a CSS class or an ID as a string and GSAP can magically find that DOM element. But since we use Vue, it is best practice to use template `refs` for that purpose. For more about how template `refs` in Vue work please refer to this <a href=\"https://vuejs.org/guide/essentials/template-refs.html\" target=\"_blank\" rel=\"noopener noreferrer\">link</a>.\n\nThe second parameter is configuring objects with destination properties that we want to animate along with some special properties such as `duration` or `delay`.\n\nLet's see an example inside our Vue 3 project. In the **App.vue** file we are going place the following code:\n\n```js\n<script setup>\nimport { ref, onMounted } from \"vue\";\nimport gsap from \"gsap\";\n\nconst logo = ref(null);\n\nonMounted(() => {\n    gsap.to(logo.value, { x: 300, duration: 2 });\n});\n</script>\n\n<template>\n    <img ref=\"logo\" src=\"./assets/logo.png\" alt=\"Logo\" />\n</template>\n```\n\nIf we run our application, we will observe the logo moving to the right by 300px for a duration of 2 seconds. See the animation below:\n\n![blog hero image](https://res.cloudinary.com/suv4o/image/upload/c_scale,f_auto,w_750/v1649848120/blog/gsap-animation-with-vue3-and-vite/getting-started-with-gsap-in-vue)\n\nNow let's animate more properties. For example, we can animate a `background-color`. Since GSAP is a JavaScript library, we have to use camelcase syntax instead of the dash so that the`background-color` will become `backgroundColor`. We can also animate the `borderRadius` and the `border` properties:\n\n```js\nonMounted(() => {\n    gsap.to(logo.value, {\n        x: 300,\n        backgroundColor: \"#f0c690\",\n        borderRadius: \"20%\",\n        border: \"5px solid grey\",\n        duration: 2,\n    });\n});\n```\n\nIf we run our app, we should now observe GSAP animating all values at the same time. Refer to the animation below:\n\n![blog hero image](https://res.cloudinary.com/suv4o/image/upload/c_scale,f_auto,w_750/v1649848297/blog/gsap-animation-with-vue3-and-vite/getting-started-with-gsap-in-vue-aphtg9)\n\nAs we mentioned earlier, configuration objects have special properties such as `duration` or `delay`. Another useful special property is the `ease`property. In GSAP there are many built-in easing options to choose from such as: `back`, `elastic`, `bounce` etc.\n\nFor a full list of easing options in GSAP please refer to the documentation <a href=\"https://greensock.com/docs/v3/Eases\" target=\"_blank\" rel=\"noopener noreferrer\">here</a>. GSAP also has a handy Visualiser to explore all the easing options available.\n\nHere is the code to apply easing to our animation:\n\n```js\ngsap.to(logo.value, {\n    x: 300,\n    backgroundColor: \"#f0c690\",\n    borderRadius: \"20%\",\n    border: \"5px solid grey\",\n    duration: 2,\n    ease: \"elastic\",\n});\n```\n\n![blog hero image](https://res.cloudinary.com/suv4o/image/upload/c_scale,f_auto,w_750/v1649848437/blog/gsap-animation-with-vue3-and-vite/getting-started-with-gsap-in-vue-dk8mt9)\n\nGSAP also has a few handy callback functions: `onStart`, `onUpdate`, `onComplete` etc. For example, if we want to listen in on style updates we can use `onUpdate` and then pass a callback function. Please see the example below:\n\n```js\nonMounted(() => {\n    gsap.to(logo.value, {\n        x: 300,\n        backgroundColor: \"#f0c690\",\n        borderRadius: \"20%\",\n        border: \"5px solid grey\",\n        duration: 2,\n        ease: \"bounce\",\n        onUpdate: getBorderRadious,\n    });\n});\n\nfunction getBorderRadious() {\n    console.log(logo.value.style.borderRadius);\n}\n```\n\nWe output every change of the `borderRadius` property in the console:\n\n```bash\n...\n...\n...\n8.7483%\n9.3777%\n10.0288%\n10.6617%\n11.3552%\n...\n...\n...\n```\n\nWe have just shown how to animate to a certain state or value in the example above. What if we would now like to animate from those values? It will be as simple as changing [`gsap.to`](http://gsap.to) to `gsap.from` .\n\n## `stagger` special property\n\nWe can animate all elements with the same selector at once. Let's view the example below:\n\n```js\ngsap.from(\".circle\", {\n    y: 300,\n    opacity: 0,\n    duration: 2,\n});\n```\n\nIf we run our app, we observe that all elements with a class of `.circle` will be animated at the same time. By animating all elements together, the dynamism of the animation is lost. To counter this, GSAP has a special property called `stagger` that allows us to animate elements with an offset time. We only need to pass an offset time value to the `stagger` for example `0.25`. In this case, the elements will be animated within offset of a quarter of a second from the previous one.\n\n```js\ngsap.from(\".circle\", {\n    y: 300,\n    opacity: 0,\n    duration: 2,\n    stagger: 0.15,\n});\n```\n\nGSAP also provides built-in functionalities for the generation of random values. This is very handy if we want random `y` values to be animated every time we run it. We can do that by passing `\"random(-200, 200)\"` where the range of the random value generated is set between -200 to 200.\n\n```js\nimport { onMounted } from \"vue\";\nimport gsap from \"gsap\";\n\nonMounted(() => {\n    gsap.from(\".circle\", {\n        y: \"random(-200, 200)\",\n        opacity: 0,\n        duration: 1,\n        stagger: 0.15,\n        delay: 2,\n    });\n});\n</script>\n\n<template>\n    <div class=\"circle\"></div>\n    <div class=\"circle\"></div>\n    <div class=\"circle\"></div>\n    <div class=\"circle\"></div>\n    <div class=\"circle\"></div>\n    <div class=\"circle\"></div>\n</template>\n```\n\nLet's have a look at how the animation would now look like:\n\n![blog hero image](https://res.cloudinary.com/suv4o/image/upload/c_scale,f_auto,w_750/v1649848645/blog/gsap-animation-with-vue3-and-vite/getting-started-with-gsap-in-vue-bo1gml)\n\nFor more utility functions like the one above, please check out the GSAP full documentation in the following <a href=\"https://greensock.com/docs/v3/GSAP/UtilityMethods\" target=\"_blank\" rel=\"noopener noreferrer\">link</a>.\n\n## `delay` special property\n\nBy default both of the logo and the circles will start animating at the same time. If we want the circles to animate after the logo is done with animating, we can use GSAP special `delay` property, by assigning a value of 2 to the duration of the logo animation. The circle animation will now wait for 2 seconds before it starts animating.\n\n```js\ngsap.from(logo.value, {\n    x: -300,\n    backgroundColor: \"#f0c690\",\n    borderRadius: \"20%\",\n    border: \"5px solid grey\",\n    duration: 2,\n    ease: \"bounce\",\n    onUpdate: getBorderRadious,\n});\ngsap.from(\".circle\", {\n    y: \"random(-200, 200)\",\n    opacity: 0,\n    duration: 1,\n    stagger: 0.15,\n    delay: 2,\n});\n```\n\nThe `delay` property is handy for simple animations. But for complex animations, GSAP has the timeline feature that allows for that.\n\n## GSAP Timeline\n\nThe timeline feature in GSAP allows us to build complex animations simpler. Let's create our first timeline.\n\n```js\nlet tl = gsap.timeline();\n```\n\nWe don't need to use the `delay` property for each animation. Instead, we can use timelines. By default, Timeslines adds animations at the end of timeline so we get perfect sequencing right from the box.\n\n```js\nlet tl = gsap.timeline();\ntl.from(logo.value, {\n    x: -300,\n    backgroundColor: \"#f0c690\",\n    borderRadius: \"20%\",\n    border: \"5px solid grey\",\n    duration: 2,\n    ease: \"bounce\",\n});\ntl.from(\".circle\", {\n    y: \"random(-200, 200)\",\n    opacity: 0,\n    duration: 1,\n    stagger: 0.15,\n});\n```\n\nIf we want to control precisely the position of the animation in the timeline we can use the position parameter. This parameter comes after the configuration object, and tells the timeline where to place the animation. In our example, we are going to pass \"+=1\" value. This means that the animation will start 1 second past the end of the timeline. Hence, creates a gap.\n\n```js\nimport { ref, onMounted } from \"vue\";\nimport gsap from \"gsap\";\n\nconst logo = ref(null);\nlet tl = null;\n\nonMounted(() => {\n    tl = gsap.timeline();\n    tl.from(logo.value, {\n        x: -300,\n        backgroundColor: \"#f0c690\",\n        borderRadius: \"20%\",\n        border: \"5px solid grey\",\n        duration: 2,\n        ease: \"bounce\",\n    });\n    tl.from(\n        \".circle\",\n        {\n            y: \"random(-200, 200)\",\n            opacity: 0,\n            duration: 1,\n            stagger: 0.15,\n        },\n        \"+=1\"\n    );\n});\n</script>\n\n<template>\n    <img ref=\"logo\" src=\"./assets/logo.png\" alt=\"Logo\" />\n    <div class=\"circle circle--blue\"></div>\n    <div class=\"circle circle--red\"></div>\n    <div class=\"circle circle--yellow\"></div>\n    <div class=\"circle circle--green\"></div>\n    <div class=\"circle circle--purple\"></div>\n    <div class=\"circle circle--pink\"></div>\n</template>\n```\n\n![blog hero image](https://res.cloudinary.com/suv4o/image/upload/c_scale,f_auto,w_750/v1649848849/blog/gsap-animation-with-vue3-and-vite/getting-started-with-gsap-in-vue-iyigej)\n\nWe can also use `-=1`. In this case, the animation will start 1 second before the end of the timeline. Hence, creates overlaps. The full documentation of the timeline position parameters can be found at this <a href=\"https://greensock.com/docs/v3/GSAP/Timeline\" target=\"_blank\" rel=\"noopener noreferrer\">link</a>.\n\n## Controls in timeline\n\nIf we want a timeline repeated, we can do so by specifying a repeat property in the configuration object in the timeline.\n\n```js\nlet tl = gsap.timeline({ repeat: 2 });\n```\n\nBy assigning a repeat value of 2, our timeline will play once regularly for the first time, and then repeat two more times. If we want to repeat infinitely, then we use a value of -1.\n\nAnother property that is very useful with repeats, is called `yoyo`. If we set `yoyo` to `true` then our timeline will play regularly the first time, but go backwards on the second time. The timeline will repeat infinitely by going forward and backwards.\n\n```js\nlet tl = gsap.timeline({ repeat: 2, yoyo: true });\n```\n\nBy assigning a repeat value of 2, our timeline will play once regularly for the first time, and then repeat two more times. If we want to repeat infinitely, then we use a value of -1.\n\nAnother property that is very useful with repeats, is called `yoyo`. If we set `yoyo` to `true` then our timeline will play regularly the first time, but go backwards on the second time. The timeline will repeat infinitely by going forward and backwards.\n\n```js\nlet tl = gsap.timeline({ repeat: 2, yoyo: true });\n```\n\nWe can further control our animation in timelines by adding one of few methods available such as:\n\n```js\ntl.play();\ntl.pause();\ntl.resume();\ntl.seek(1.5);\ntl.reverse();\ntl.restart();\n```\n\nIf you are curious to see all the above methods in action please view my app on Github <a href=\"https://github.com/Suv4o/gsap-animation-with-vue3-and-vite\" target=\"_blank\" rel=\"noopener noreferrer\">here</a>. I have developed a small Vue 3 app with GSAP timeline animation where all the above methods are demonstrated. I hope you will find it useful.\n\n## Conclusion\n\n1. GreenSock Animation Platform (GSAP) is the most robust JavaScript animation library to date that allows developers to animate literaly any DOM element with a breeze.\n2. We can add a CSS class or an ID as a string, and GSAP can magically find that DOM element. Since we are using Vue, it is best practice to use template `refs` for that purpose.\n3. The configuration object in GSAP has some special properties such as `duration`, `delay, ease`, `stagger`, `delay` that can be used to add or enhance an animation.\n4. GSAP also has a few handy callback functions: `onStart`, `onUpdate`, `onComplete` etc. that can be used to define custom functionalities.\n5. The timeline feature in GSAP allows us to easily build complex animations.\n"
  },
  {
    "articlePath": "/2022/04/18/reload-child-component-in-vue3",
    "embeddings": [
      -0.05638904124498367,
      0.03629317134618759,
      0.05506903678178787,
      0.1075972318649292,
      0.04545219987630844,
      0.05031462758779526,
      -0.03362523391842842,
      0.0256032831966877,
      0.07482878118753433,
      -0.019952980801463127,
      -0.006673820316791534,
      0.016521798446774483,
      -0.07828216254711151,
      0.06324482709169388,
      0.05246764421463013,
      0.02003340981900692,
      0.013842885382473469,
      0.07238060235977173,
      -0.06993792206048965,
      -0.028745530173182487,
      0.05692015588283539,
      -0.025244029238820076,
      0.02748195268213749,
      -0.016665495932102203,
      -0.0030666079837828875,
      0.05115021392703056,
      -0.05573779717087746,
      -0.03593314439058304,
      -0.00847620889544487,
      -0.032681431621313095,
      0.06636755913496017,
      0.06899883598089218,
      -0.1028018668293953,
      0.006843902636319399,
      -0.045245274901390076,
      0.08597439527511597,
      -0.023799894377589226,
      -0.004125678911805153,
      -0.045448191463947296,
      -0.010162592865526676,
      0.06473764032125473,
      0.08247511088848114,
      -0.1410609930753708,
      -0.0831957533955574,
      0.029387978836894035,
      -0.061381034553050995,
      -0.03899792954325676,
      -0.036763280630111694,
      -0.03532468527555466,
      -0.009375222027301788,
      -0.01316048949956894,
      -0.11503348499536514,
      0.024727417156100273,
      0.08373308181762695,
      -0.027569150552153587,
      0.02373385801911354,
      0.02425342984497547,
      -0.03883558511734009,
      0.041848476976156235,
      -0.020554907619953156,
      0.009500706568360329,
      -0.01911763846874237,
      0.0333738774061203,
      -0.040928915143013,
      0.010966680012643337,
      0.025796059519052505,
      0.0354788601398468,
      0.006056109443306923,
      -0.014003430493175983,
      0.04943033680319786,
      0.0007042204961180687,
      0.04873277246952057,
      0.05920293927192688,
      0.0008703593048267066,
      0.04761742055416107,
      0.0025281819980591536,
      -0.01245239470154047,
      -0.026768438518047333,
      0.04461737349629402,
      -0.09841048717498779,
      0.0006136544980108738,
      -0.016447626054286957,
      -0.027504000812768936,
      -0.050844043493270874,
      0.054669786244630814,
      0.05815994367003441,
      0.00614940794184804,
      -0.09160666912794113,
      0.07075554132461548,
      -0.06646834313869476,
      -0.08663254231214523,
      -0.04114970564842224,
      0.07862748950719833,
      0.05629982426762581,
      0.0460740327835083,
      0.02385999634861946,
      0.005896599031984806,
      0.01736714504659176,
      -0.06964327394962311,
      0.014661867171525955,
      0.014358187094330788,
      0.036661867052316666,
      0.020618421956896782,
      0.04604456201195717,
      0.07109469920396805,
      0.05079153552651405,
      -0.015090428292751312,
      0.0220380537211895,
      -0.1183488592505455,
      -0.021440425887703896,
      -0.03614456579089165,
      0.07837891578674316,
      0.028048019856214523,
      -0.07182963937520981,
      0.01198960468173027,
      0.018583549186587334,
      0.07709680497646332,
      -0.0016060878988355398,
      0.02195596508681774,
      0.06668020784854889,
      0.09577980637550354,
      0.010477122850716114,
      -0.017735835164785385,
      -0.036404360085725784,
      0.045108895748853683,
      -0.10123519599437714,
      -0.018561094999313354,
      7.570601654474043e-33,
      0.004871817771345377,
      0.04643730819225311,
      -0.05434854328632355,
      0.07597806304693222,
      0.021610355004668236,
      0.008641829714179039,
      0.0384727381169796,
      0.002153834793716669,
      -0.073566734790802,
      -0.008844581432640553,
      0.017755376175045967,
      -0.013872157782316208,
      -0.03794671222567558,
      0.01861451379954815,
      0.030006203800439835,
      -0.03525730222463608,
      -0.02832603082060814,
      0.049235422164201736,
      -0.010011202655732632,
      -0.016682874411344528,
      0.010013011284172535,
      -0.00977079477161169,
      -0.05153881385922432,
      0.013509322889149189,
      0.024130716919898987,
      -0.014677845872938633,
      0.017278781160712242,
      -0.03986393287777901,
      -0.05472835898399353,
      -0.042947396636009216,
      0.06303007900714874,
      0.06045612320303917,
      -0.006492805201560259,
      0.034099675714969635,
      -0.06380438059568405,
      -0.05164023116230965,
      0.0006478176801465452,
      -0.040981706231832504,
      -0.10934670269489288,
      0.051950853317976,
      0.08416525274515152,
      0.032324861735105515,
      -0.0045407610014081,
      -0.10845929384231567,
      -0.03766563907265663,
      -0.061460696160793304,
      0.02085709013044834,
      0.09097076952457428,
      0.03506824001669884,
      -0.05492464825510979,
      -0.0073680393397808075,
      0.08618997037410736,
      -0.06869211047887802,
      -0.0724291130900383,
      0.02754153683781624,
      0.014230950735509396,
      -0.007634272798895836,
      0.021754508838057518,
      0.07798047363758087,
      -0.027854396030306816,
      0.0027300927322357893,
      -0.015404289588332176,
      -0.011276558972895145,
      0.04953983053565025,
      -0.03550499305129051,
      0.02340126410126686,
      0.03539836406707764,
      0.05105834826827049,
      -0.006872538011521101,
      -0.025680778548121452,
      -0.05193968862295151,
      0.03927880898118019,
      -0.0033313471358269453,
      -0.1277763545513153,
      0.07790492475032806,
      -0.12330786883831024,
      0.0006640357314608991,
      -0.0839998722076416,
      -0.02743087150156498,
      -0.03173080086708069,
      -0.04419106990098953,
      -0.03163229301571846,
      -0.03845369443297386,
      0.0811493992805481,
      -0.009805803187191486,
      -0.07452815771102905,
      0.050702668726444244,
      -0.07812022417783737,
      -0.029561135917901993,
      -0.04524531587958336,
      -0.004357305355370045,
      -0.03800817206501961,
      0.03641333058476448,
      -0.13855895400047302,
      -0.0040132105350494385,
      -6.466223977192534e-33,
      0.11769533157348633,
      0.024919239804148674,
      0.017159510403871536,
      0.06472845375537872,
      0.05850667878985405,
      -0.0769183486700058,
      -0.031277094036340714,
      0.10105334967374802,
      -0.048506151884794235,
      -0.08372171968221664,
      -0.07205630838871002,
      -0.06459145247936249,
      0.004035445861518383,
      -0.025339271873235703,
      -0.052071712911129,
      0.1530558317899704,
      -0.07872767746448517,
      -0.1210140585899353,
      0.10659622400999069,
      -0.052450645714998245,
      0.04026677832007408,
      0.04345009848475456,
      0.07434214651584625,
      0.07145682722330093,
      0.043132100254297256,
      -0.03111688792705536,
      0.012492049485445023,
      0.038061391562223434,
      0.028967203572392464,
      -0.059978123754262924,
      -0.04762261360883713,
      -0.031651806086301804,
      -0.02613401971757412,
      0.0007042892975732684,
      0.030763784423470497,
      0.04417670518159866,
      -0.028709150850772858,
      0.05614081025123596,
      0.011423411779105663,
      0.03145788237452507,
      0.03711820766329765,
      0.008017722517251968,
      -0.04919860512018204,
      0.00154008693061769,
      -0.09838385134935379,
      0.011353517882525921,
      0.06263039261102676,
      0.028998712077736855,
      0.038267917931079865,
      0.006665532477200031,
      -0.0001055138127412647,
      -0.12096443772315979,
      -0.1089872196316719,
      0.046957828104496,
      -0.008543049916625023,
      -0.04420239105820656,
      0.07120895385742188,
      -0.040389034897089005,
      -0.0006970064132474363,
      -0.018142083659768105,
      0.011852077208459377,
      -0.03891841322183609,
      0.04604003578424454,
      -0.038273874670267105,
      0.020469587296247482,
      -0.057076334953308105,
      -0.11007308959960938,
      -0.0301551204174757,
      0.023581933230161667,
      -0.0043198284693062305,
      0.005638920236378908,
      0.06454310566186905,
      0.0886441245675087,
      -0.01548957172781229,
      0.02556118182837963,
      -0.06086320802569389,
      0.062021560966968536,
      -0.03787237033247948,
      0.06468711793422699,
      -0.06325830519199371,
      -0.0832214206457138,
      -0.04531277343630791,
      -0.026219872757792473,
      -0.029123438522219658,
      0.006364472210407257,
      0.032700713723897934,
      -0.038776248693466187,
      0.03618357703089714,
      0.018519826233386993,
      -0.0034764907322824,
      -0.04008903354406357,
      -0.009431310929358006,
      0.029620077461004257,
      0.011378834024071693,
      0.05951788276433945,
      -5.648997003504519e-8,
      0.0012267612619325519,
      0.013523700647056103,
      -0.05689677223563194,
      -0.044071126729249954,
      0.023355793207883835,
      -0.06947803497314453,
      0.061695896089076996,
      0.07481680810451508,
      -0.07488536089658737,
      0.0456051304936409,
      0.07727189362049103,
      0.07454656064510345,
      0.026253022253513336,
      0.02949484996497631,
      -0.030347494408488274,
      0.02497720532119274,
      -0.01904759369790554,
      0.049885865300893784,
      -0.0538625493645668,
      -0.030381351709365845,
      0.017694741487503052,
      0.10066240280866623,
      0.03611508011817932,
      0.047979265451431274,
      0.07848489284515381,
      0.0323912650346756,
      0.010881084948778152,
      -0.024647245183587074,
      0.02942770905792713,
      -0.04942582920193672,
      -0.015713991597294807,
      0.007974223233759403,
      0.054888010025024414,
      0.014589185826480389,
      -0.03730793669819832,
      0.0015742479590699077,
      -0.02561214379966259,
      0.053114283829927444,
      -0.036850862205028534,
      0.030353587120771408,
      0.023141324520111084,
      -0.04481513798236847,
      -0.019963007420301437,
      -0.017185553908348083,
      0.043484922498464584,
      -0.06582565605640411,
      -0.09805460274219513,
      0.020124312490224838,
      0.07398993521928787,
      0.02241165190935135,
      -0.0174324419349432,
      -0.0798078328371048,
      -0.014112432487308979,
      0.008003521710634232,
      0.018676551058888435,
      0.00824615079909563,
      0.06468947976827621,
      0.008458956144750118,
      0.08836068958044052,
      -0.016241608187556267,
      0.039928510785102844,
      -0.001849152147769928,
      0.07221715152263641,
      -0.02746451273560524
    ],
    "content": "---\ntitle: Reload Child component in Vue 3\ndescription: Components in Vue are reusable custom elements that can be reused in Vue templates throughout the app. In a large scale application, we will come across a situation where we have nested components such as parents and children. In recent work, I faced the challenge of having to reload the child component only. This article will explain the intricacies to the challenge. Looking back, it took me unbelievably long to figure out a solution. Nevertheless, my blog post will provide quick and easy, short, sharp steps to any developer who might be faced with the same challenge. Let's get started. We can easily scaffold our Vue 3 project using Vite with the following command\nimage: https://res.cloudinary.com/suv4o/image/upload/q_auto,f_auto,w_1200,e_sharpen:100/v1650277793/blog/reload-child-component-in-vue-3/reload-child-component-in-vue-3-1_ccze7d\nkeywords:\n    - Reload Child component in Vue 3\n    - Vue.js\n    - Reload\n    - JavaScript\n    - Tips\n    - Composition API\n    - Development\n    - Web Development\ntype: page\nblog: post\npublished: 18th Apr 2022\nreadTime: 4\nauthor: Aleksandar Trpkovski\narticleTags:\n    - FrontEnd\n    - Vue.js\n    - JavaScript\n---\n\n# Reload Child component in Vue 3\n\n_{{$document.published}} • {{$document.readTime}} min read — by **[{{$document.author}}](/)**_\n\n::tag-pills{:tags=\"articleTags\"}\n::\n\n![blog hero image](https://res.cloudinary.com/suv4o/image/upload/q_auto,f_auto,w_750,e_sharpen:100/v1650277793/blog/reload-child-component-in-vue-3/reload-child-component-in-vue-3-1_ccze7d)\n\nComponents in Vue are reusable custom elements (for example `<card>` ) that can be reused in Vue templates throughout the app. In a large scale application, we will come across a situation where we have nested components such as parents and children.\n\nIn recent work, I faced the challenge of having to reload the child component only. This article will explain the intricacies to the challenge. Looking back, it took me unbelievably long to figure out a solution. Nevertheless, my blog post will provide quick and easy, short, sharp steps to any developer who might be faced with the same challenge. Let's get started.\n\n## Create a Vue 3 app using Vite\n\nWe can easily scaffold our Vue 3 project using Vite with the following command:\n\n```bash\nnpm init vite@latest my-vue-app\n```\n\nNext, we follow the prompts, and choose Vue with JavaScript. Lastly, we install the dependency and run the project locally:\n\n```bash\ncd my-vue-app\n\nnpm install\nnpm run dev\n```\n\n## Make a component that displays a random number\n\nUse the new <a href=\"https://vuejs.org/guide/extras/composition-api-faq.html\" target=\"_blank\" rel=\"noopener noreferrer\">Composition API</a> syntax with `<script setup>` . The `<script setup>` feature was released in Vue 3.2.\n\nFirst, create a new component called **_RandomNumber.vue_** in **_src/components/RandomNumber.vue_** directory. Next, create a reactive variable and assign a random number when the component mounts. Let's look at the following code in the **_RandomNumber.vue_** component:\n\n```js\n<script setup>\nimport { ref, onMounted } from \"vue\";\n\nconst randomNumber = ref(0);\n\nonMounted(() => {\n    randomNumber.value = Math.floor(Math.random() * 100);\n});\n</script>\n\n<template>{{ randomNumber }}</template>\n```\n\n## Use **_`<RandomNumber>` component in our App.vue_**\n\nIn the **_App.vue_** file, we will import our **_RandomNumber.vue_** component and then use it in our template.\n\n```js\n<script setup>\nimport RandomNumber from \"./components/RandomNumber.vue\";\n</script>\n\n<template>\n    <RandomNumber />\n</template>\n```\n\n## Reload our **_`<RandomNumber>` component_**\n\nNow, whenever we import our component we have a random number displayed. When we reload our webpage, a different number is shown. But how can we reload only the `<RandomNumber>` component?\n\nThat can be made possible by binding the `key` value to the component. Each time we assign a different key value, the component reloads. Let's see how we can achieve that:\n\n```js\n<script setup>\nimport { ref } from \"vue\";\nimport RandomNumber from \"./components/RandomNumber.vue\";\n\nconst keyIndex = ref(0);\n\nfunction changeKey() {\n    keyIndex.value++;\n}\n</script>\n\n<template>\n    <RandomNumber :key=\"keyIndex\" />\n    <button @click=\"changeKey\">Re-Render</button>\n</template>\n```\n\nIn the code above, we've create a button whereby upon each click of the button, the function `changeKey` is activated. The `changeKey` increases the number of the reactive variable, `keyIndex`, upon each click. We bind the `key` of the `RandomNumber` with the `keyIndex` variable.\n\nNow, with each click of the button, only the `<RandomNumber>` component reloads. Hence, a different number is displayed.\n\n![blog hero image](https://res.cloudinary.com/suv4o/image/upload/c_scale,f_auto,w_750/v1650277793/blog/reload-child-component-in-vue-3/reload-child-component-in-vue-3-2_gnt1zf)\n\nAll examples above can be found in the following Github repository <a href=\"https://github.com/Suv4o/reload-child-component-in-vue3\" target=\"_blank\" rel=\"noopener noreferrer\">link</a>.\n\n## Conclusion\n\n1. In a large scale application we will come across a situation where we have nested components such as parents and children.\n2. To be able to reload only the child component, and not the entire website, we need to assign a `key` to the component.\n3. Each time we assign different key to the component, the component automatically reloads.\n"
  },
  {
    "articlePath": "/2022/10/03/nestjs-auth-authorisation-with-okta",
    "embeddings": [
      -0.061962343752384186,
      0.10310141742229462,
      -0.013885618187487125,
      0.04078786447644234,
      0.05156729742884636,
      -0.039274778217077255,
      0.010137173347175121,
      0.004870348144322634,
      0.03409062325954437,
      0.03460673615336418,
      -0.0031260275281965733,
      0.016380496323108673,
      0.016614677384495735,
      0.09861766546964645,
      0.07654228061437607,
      0.09172025322914124,
      -0.03743227943778038,
      0.0379193052649498,
      -0.033544573932886124,
      -0.07515472173690796,
      -0.005467251408845186,
      -0.007489628158509731,
      0.050708234310150146,
      -0.0255659818649292,
      -0.011476906016469002,
      -0.009869475848972797,
      -0.05708644539117813,
      -0.04844307154417038,
      -0.022683536633849144,
      -0.0251605287194252,
      0.045902978628873825,
      -0.0580257773399353,
      -0.023667126893997192,
      0.0017372823785990477,
      -0.025212856009602547,
      0.02561664953827858,
      0.06871014833450317,
      -0.07490972429513931,
      0.03579486533999443,
      -0.047441184520721436,
      0.05737529322504997,
      0.09431491047143936,
      -0.05337022244930267,
      -0.09212464094161987,
      0.012650459073483944,
      -0.08085453510284424,
      -0.06046593189239502,
      0.0020642068702727556,
      -0.06012946367263794,
      0.03187157213687897,
      -0.020681671798229218,
      -0.13215109705924988,
      -0.022479018196463585,
      0.021845165640115738,
      -0.04242194816470146,
      0.01270116027444601,
      -0.11258073896169662,
      -0.043581072241067886,
      0.024595508351922035,
      -0.010545682162046432,
      0.026161301881074905,
      -0.0785735473036766,
      -0.004485120996832848,
      -0.04268493875861168,
      0.0195209588855505,
      0.037302955985069275,
      -0.038502153009176254,
      -0.011170494370162487,
      -0.029159996658563614,
      0.027167528867721558,
      0.06865565478801727,
      -0.0134004857391119,
      -0.011638429015874863,
      0.013143452815711498,
      0.049409061670303345,
      -0.10515724122524261,
      -0.035565320402383804,
      0.031507641077041626,
      0.022245384752750397,
      -0.12498480081558228,
      -0.034505411982536316,
      -0.026163332164287567,
      -0.050968803465366364,
      0.03251269459724426,
      -0.011309654451906681,
      0.02725401520729065,
      -0.012331649661064148,
      -0.010278408415615559,
      0.035239528864622116,
      -0.026043318212032318,
      -0.0026965076103806496,
      -0.0039273519068956375,
      -0.01850118860602379,
      -0.037357721477746964,
      0.061195939779281616,
      0.014388971030712128,
      -0.07063595205545425,
      0.025401681661605835,
      -0.0346122682094574,
      0.03396652266383171,
      -0.04828078672289848,
      -0.01811111532151699,
      0.02426370605826378,
      -0.04693286120891571,
      0.0942673608660698,
      0.004597072955220938,
      0.03319656848907471,
      -0.013293557800352573,
      -0.043108899146318436,
      0.05874956026673317,
      -0.05984137952327728,
      0.043846771121025085,
      -0.026642847806215286,
      0.04022963345050812,
      -0.0033852108754217625,
      0.004283667542040348,
      0.0718022808432579,
      -0.04913029074668884,
      0.1061960831284523,
      0.12810911238193512,
      0.10394710302352905,
      -0.020381111651659012,
      0.04507293179631233,
      0.06176833063364029,
      0.08280390501022339,
      -0.04015016928315163,
      -0.017643501982092857,
      6.138003913923874e-33,
      0.05477890744805336,
      0.05021161213517189,
      0.004743735771626234,
      0.04284418001770973,
      0.12979593873023987,
      -0.005129092372953892,
      0.04349019378423691,
      -0.09971246868371964,
      -0.13521213829517365,
      0.023517807945609093,
      -0.04814529791474342,
      0.10347899049520493,
      -0.028807243332266808,
      -0.057364556938409805,
      0.022742416709661484,
      -0.01754038967192173,
      -0.00974821113049984,
      0.018482616171240807,
      0.04569456726312637,
      0.022398296743631363,
      0.021968785673379898,
      0.024187948554754257,
      -0.027794325724244118,
      0.06961451470851898,
      0.043812789022922516,
      -0.05927746370434761,
      0.027309589087963104,
      -0.015787174925208092,
      -0.011879457160830498,
      0.0008586524054408073,
      0.07916760444641113,
      0.012249046005308628,
      -0.03451957553625107,
      -0.011349123902618885,
      -0.003571434412151575,
      -0.03770611435174942,
      0.007038904819637537,
      -0.0343431681394577,
      -0.06475421786308289,
      -0.02745506912469864,
      0.007421956397593021,
      -0.007681794930249453,
      -0.011143789626657963,
      -0.030245790258049965,
      -0.10118937492370605,
      -0.031219905242323875,
      0.031983423978090286,
      0.02547123283147812,
      0.07713568955659866,
      0.04699276015162468,
      -0.06700761616230011,
      -0.021799519658088684,
      -0.0368303619325161,
      -0.084368497133255,
      0.035352472215890884,
      -0.009315520524978638,
      -0.07685085386037827,
      0.025099793449044228,
      -0.02029484324157238,
      -0.07148796319961548,
      -0.0012763012200593948,
      -0.04849890246987343,
      -0.008717802353203297,
      -0.10386065393686295,
      -0.020674709230661392,
      -0.07392419129610062,
      -0.0416417121887207,
      0.03172098845243454,
      -0.013139150105416775,
      0.0028729019686579704,
      -0.02029581367969513,
      0.02348504029214382,
      0.023273572325706482,
      -0.005683479830622673,
      -0.03663192689418793,
      -0.09177570044994354,
      -0.0007745329639874399,
      0.060028888285160065,
      -0.004219871014356613,
      0.0038731368258595467,
      0.01870054006576538,
      -0.02232782170176506,
      -0.07747988402843475,
      0.13221848011016846,
      -0.09150626510381699,
      -0.004611866548657417,
      0.022938305512070656,
      -0.009078907780349255,
      -0.06798024475574493,
      -0.015377303585410118,
      0.037946827709674835,
      0.01718396320939064,
      0.08534176647663116,
      -0.06879810988903046,
      -0.04734417423605919,
      -5.9066625849202166e-33,
      0.06655485928058624,
      -0.08889411389827728,
      0.022686226293444633,
      0.025160986930131912,
      0.06393103301525116,
      -0.029248742386698723,
      0.06901941448450089,
      0.042413774877786636,
      0.03218690678477287,
      -0.009990988299250603,
      0.015623151324689388,
      -0.010648329742252827,
      -0.0003761674743145704,
      -0.014847857877612114,
      0.013488407246768475,
      0.030462689697742462,
      -0.06738686561584473,
      -0.062302157282829285,
      0.09548292309045792,
      -0.021831432357430458,
      -0.0045220330357551575,
      0.08713161945343018,
      0.06085661053657532,
      0.06556334346532822,
      0.08588901907205582,
      0.0445668064057827,
      -0.03846171498298645,
      0.1138438954949379,
      -0.02335830219089985,
      -0.03319983929395676,
      -0.016512593254446983,
      0.02284417860209942,
      -0.016023574396967888,
      0.0058020250871777534,
      -0.02477399818599224,
      -0.08018986880779266,
      -0.0024852196220308542,
      0.1278543472290039,
      -0.021942660212516785,
      -0.002952123060822487,
      0.0807490348815918,
      -0.00739041343331337,
      0.009592778980731964,
      -0.033442553132772446,
      0.016817143186926842,
      0.026004068553447723,
      0.12632262706756592,
      0.03421439230442047,
      -0.08419683575630188,
      0.005678441375494003,
      -0.0005298818578012288,
      -0.07709348201751709,
      -0.00033323728712275624,
      0.034285664558410645,
      -0.03154243528842926,
      -0.022322099655866623,
      0.05662856623530388,
      -0.0825880840420723,
      -0.03244602680206299,
      0.009983749128878117,
      0.016236986964941025,
      -0.04206892102956772,
      0.07026028633117676,
      0.0650063306093216,
      -0.013008411042392254,
      -0.14576967060565948,
      -0.08030422776937485,
      -0.05051850154995918,
      -0.023884562775492668,
      0.046729300171136856,
      -0.02914385497570038,
      -0.08766143769025803,
      0.04846365377306938,
      -0.01013969350606203,
      0.036317721009254456,
      -0.049112752079963684,
      0.04715931415557861,
      -0.09284745156764984,
      0.03715142235159874,
      -0.03636939078569412,
      -0.14322571456432343,
      0.009382370859384537,
      -0.05710417032241821,
      0.06625990569591522,
      0.04470108076930046,
      -0.04523748531937599,
      -0.008231448009610176,
      0.04219682887196541,
      0.009541140869259834,
      0.07124854624271393,
      -0.03500288352370262,
      -0.010271000675857067,
      -0.026000823825597763,
      0.018862981349229813,
      -0.018054498359560966,
      -5.0800601059108885e-8,
      -0.059722576290369034,
      0.009255442768335342,
      -0.1018715351819992,
      -0.03688248246908188,
      -0.029107457026839256,
      -0.024626804515719414,
      0.028722181916236877,
      -0.03411104902625084,
      0.0019734217785298824,
      -0.01924818940460682,
      0.015851888805627823,
      0.05637863278388977,
      0.00889586191624403,
      -0.057861823588609695,
      -0.05413777381181717,
      0.00001288499879592564,
      -0.010496645234525204,
      -0.017779646441340446,
      -0.021527443081140518,
      0.016011590138077736,
      -0.008998585864901543,
      0.023543165996670723,
      -0.024842020124197006,
      0.014848923310637474,
      0.026420170441269875,
      0.10030516237020493,
      -0.012260926887392998,
      0.018701910972595215,
      -0.011416133493185043,
      0.002603739034384489,
      -0.08049529045820236,
      0.043128520250320435,
      0.06001848354935646,
      0.0036189560778439045,
      -0.017143452540040016,
      -0.007339334115386009,
      -0.010955792851746082,
      0.0027184439823031425,
      -0.06553622335195541,
      0.024582022801041603,
      0.1207783967256546,
      0.04869874194264412,
      -0.009925088845193386,
      -0.02472098171710968,
      0.01713716983795166,
      0.012850589118897915,
      0.07009491324424744,
      0.0342772975564003,
      0.07582195103168488,
      0.0287924837321043,
      0.04089544713497162,
      -0.040303848683834076,
      -0.0012422669678926468,
      0.029158450663089752,
      -0.012636997736990452,
      -0.012367759831249714,
      0.06684631109237671,
      -0.09525886923074722,
      0.11952769756317139,
      0.05537848919630051,
      0.12713252007961273,
      -0.027104204520583153,
      0.055780958384275436,
      0.057163964956998825
    ],
    "content": "---\ntitle: Nest.js Auth/Authorisation with Okta\ndescription: In this blog article we will be creating a Nest application where users (with different roles) can sign-up and sign-in to the application. Specific permissions can be configured for each user access to specific endpoints, based on the user role. We are going to use Okta to help us with user Authentication and Authorisation. Okta is an Identity as a Service (IDaaS). This is a cloud-based authentication or identity management subscription service. Okta can be used for a number of different applications such as Adaptive multi-factor authentication, single sign-on, Universal Directory etc. Nest is a progressive Node.js framework for building efficient, reliable and scalable server-side applications with TypeScript.\nimage: https://res.cloudinary.com/suv4o/image/upload/q_auto,f_auto,w_1200,e_sharpen:100/v1664708491/blog/nestjs-auth-authorisation-with-okta/nestjs-auth-authorisation-with-okta\nkeywords:\n    - Nest.js Auth/Authorisation with Okta\n    - Nest.js\n    - TypeScript\n    - Authentication\n    - Authorization\n    - Okta Auth\n    - Development\n    - Web Development\ntype: page\nblog: post\npublished: 3rd Oct 2022\nreadTime: 16\nauthor: Aleksandar Trpkovski\narticleTags:\n    - Nest.js\n    - TypeScript\n    - Node.js\n---\n\n# Nest.js Auth/Authorisation with Okta\n\n_{{$document.published}} • {{$document.readTime}} min read — by **[{{$document.author}}](/)**_\n\n::tag-pills{:tags=\"articleTags\"}\n::\n\n![Landing Image](https://res.cloudinary.com/suv4o/image/upload/q_auto,f_auto,w_750,e_sharpen:100/v1664708491/blog/nestjs-auth-authorisation-with-okta/nestjs-auth-authorisation-with-okta)\n\n## What is Nest (NestJS)?\n\n<a href=\"https://nestjs.com/\" target=\"_blank\" rel=\"noopener noreferrer\">Nest</a> is a progressive Node.js framework for building efficient, reliable and scalable server-side applications with TypeScript.\n\nUnder the hood, Nest makes use of two javascript backend frameworks <a href=\"https://expressjs.com/\" target=\"_blank\" rel=\"noopener noreferrer\">Express</a> (the default) and can also be configured to use with <a href=\"https://www.fastify.io/\" target=\"_blank\" rel=\"noopener noreferrer\">Fastify</a> as well!\n\nThe examples in this blog article leverages on the default Express framework.\n\n## What is Okta?\n\n<a href=\"https://www.okta.com/\" target=\"_blank\" rel=\"noopener noreferrer\">Okta</a> is an Identity as a Service (IDaaS). This is a cloud-based authentication or identity management subscription service. Okta can be used for a number of different applications such as <a href=\"https://www.okta.com/au/blog/2016/12/two-factor-authentication-vs-multi-factor-authentication-what-are-the-risks/\" target=\"_blank\" rel=\"noopener noreferrer\">Adaptive multi-factor authentication</a>, <a href=\"https://www.okta.com/au/products/single-sign-on/\" target=\"_blank\" rel=\"noopener noreferrer\">single sign-on</a>, <a href=\"https://www.okta.com/au/products/universal-directory/\" target=\"_blank\" rel=\"noopener noreferrer\">Universal Directory</a> etc.\n\nIn this blog article we will be creating a Nest application where users (with different roles) can sign-up and sign-in to the application. Specific permissions can be configured for each user access to specific endpoints, based on the user role. We are going to use Okta to help us with user Authentication and Authorisation.\n\n## Create a Nest Project\n\nBefore we continue let's first install <a href=\"https://docs.nestjs.com/cli/overview\" target=\"_blank\" rel=\"noopener noreferrer\">Nest CLI</a>. That will enable us to efficiently create this project. To install Nest CLI globally, use the following command in your terminal:\n\n```bash\nnpm install -g @nestjs/cli\n```\n\nSetting up a new project is quite simple with Nest CLI. We can create a new Nest project with the following commands in our terminal:\n\n```bash\nnest new nest-auth-with-okta\n```\n\nNext, choose `npm` for this project.\n\n```bash\n? Which package manager would you ❤️ to use?\n❯ npm\n  yarn\n  pnpm\n```\n\n```bash\n? Which package manager would you ❤️ to use? npm\n▹▹▹▹▸ Installation in progress... ☕\n```\n\nLastly, navigate to the newly created `nest-auth-with-okta` directory and run this project.\n\n```bash\n$ cd nest-auth-with-okta\n$ npm run start\n```\n\nIf we navigate to the [**http://localhost:3000**](http://localhost:3000) in the browser, we will be able to see **Hello World!**\n\nNow, let's have a look at the folder structure in our Nest project. Inside the `nest-auth-with-okta` directory we have `node_modules`, a few other boilerplate files and a `src/` directory populated with several core files.\n\n`app.controller.spec.ts`\n\n`app.controller.ts`\n\n`app.module.ts`\n\n`app.service.ts`\n\n`main.ts`\n\nCool, this means that we have successfully created our Nest project.\n\n## Getting started with Okta\n\nWe will now create our developer account with Okta.\n\nOkta's Developer Edition provides a free, no time limit access to the most key developer features. You can sign-up <a href=\"https://developer.okta.com/signup/\" target=\"_blank\" rel=\"noopener noreferrer\">here</a>.\n\nNext, we will create an app integration. We can do so by signing in to the Okta dashboard and navigating to Applications → Applications → Create App Integration.\n\n![Creating developer account with Okta](https://res.cloudinary.com/suv4o/image/upload/c_scale,f_auto,w_750/v1664763235/blog/nestjs-auth-authorisation-with-okta/nestjs-auth-authorisation-with-okta_ryik8s)\n\nFrom the prompt, we choose API Services and click Next.\n\n![Creating developer account with Okta, choosing API Services and click Next.](https://res.cloudinary.com/suv4o/image/upload/c_scale,f_auto,w_750/v1664763462/blog/nestjs-auth-authorisation-with-okta/nestjs-auth-authorisation-with-okta_i0rynr)\n\nLastly, we enter the name of the our App integration and click Save.\n\nThat's all we need for now. Later in the blog article, we will come back to setup some more things. Until then, let's move to the next section where we start implementing our Authentication in Nest.\n\n## Create a user module\n\nWe are going to create a user module, user controller and user service. We can do that efficiently with Nest CLI.\n\nFirst, we create the user module:\n\n```bash\nnest g module user\n```\n\nNest CLI will automatically create `user.module.ts` file under the `user` directory and update the `app.module.ts` file accordingly.\n\nNext, we create the controller:\n\n```bash\nnest g controller user --no-spec\n```\n\nYou would have noticed that we use `--no-spec` flag at the end of the command. This allows us to exclude the `user.controller.spec.ts` file.\n\nLastly, we create the service file:\n\n```bash\nnest g service user --no-spec\n```\n\n## Nest Configuration\n\nApplications often run in different environments. Depending on the environment, different configuration settings should be used.\n\nNest provides a `@nestjs/config` package out-of-the box. In order to setup our configuration, we need to install it first.\n\n```bash\nnpm i --save @nestjs/config\n```\n\nOnce the installation process is complete, we import the `ConfigModule`. We need to import the module into the root `app.module.ts` file. Next, add the config module into the imports array. The code inside `app.module.ts` now will look like this:\n\n```ts\nimport { Module } from \"@nestjs/common\";\nimport { AppController } from \"./app.controller\";\nimport { AppService } from \"./app.service\";\nimport { UserModule } from \"./user/user.module\";\nimport { ConfigModule } from \"@nestjs/config\";\n\n@Module({\n    imports: [\n        ConfigModule.forRoot({\n            isGlobal: true,\n            envFilePath: \".env\",\n        }),\n        UserModule,\n    ],\n    controllers: [AppController],\n    providers: [AppService],\n})\nexport class AppModule {}\n```\n\nInside `ConfigModule.forRoot` we pass an object to further configure the `ConfigModule`. First, set the property `isGlobal` to be `true`. This will help us to use `ConfigModule` in other modules so we don't need to import our module into each module we use. Secondly, set `envFilePath` to be `.env`. This will load and parse a `.env` so that we can access the environmental variable throughout the app using `process.env`.\n\nLastly, create a `.env` file at the root of this project.\n\nWe are now all set with the `ConfigModule` . Let's move on to setting up Okta in our Nest app.\n\n## Okta Setup\n\nHead back to the Okta dashboard to get the Client ID and Okta domain. To find these values, we need to navigate to Applications → Applications → App name set earlier.\n\n![Okta setup.](https://res.cloudinary.com/suv4o/image/upload/c_scale,f_auto,w_750/v1664763933/blog/nestjs-auth-authorisation-with-okta/nestjs-auth-authorisation-with-okta_v853m2)\n\nCreate a token on the Okta dashboard by navigating to Security → API → Create Token.\n\nNow, with all these values: Client ID, Okta Domain and the Token, we can set the environmental variables in our `.env` file:\n\n```plain\nOKTA_ORG_URL=YOUR_OKTA_DOMAIN\nOKTA_TOKEN=YOUR_TOKEN\nOKTA_CLIENT_ID=YOUR_CLIENT_ID\nOKTA_AUDIENCE=api://default\n```\n\nFor the Audience, we set `api://default` that is the default value in Okta.\n\nNext, we create a `config/` directory at the root of the Nest project. Inside this directory, create two files:\n\nFile 1: `auth.config.ts` and place the following code:\n\n```ts\nimport { Injectable } from \"@nestjs/common\";\n\n@Injectable()\nexport class AuthConfig {\n    public issuer: string = process.env.OKTA_ORG_URL + \"oauth2/default\";\n    public clientId: string = process.env.OKTA_CLIENT_ID;\n    public audience: string = process.env.OKTA_AUDIENCE;\n}\n```\n\nFile 2: `okta.sdk.config.ts` and place the following code:\n\n```ts\nimport { Injectable } from \"@nestjs/common\";\n\n@Injectable()\nexport class OktaSdkConfig {\n    public orgUrl: string = process.env.OKTA_ORG_URL;\n    public token: string = process.env.OKTA_TOKEN;\n}\n```\n\nIn order to use these files across our Nest application, we will first need to import the files and then define them as providers in each of the modules. We will do that later as we progress with our application.\n\n## Define Auth Guards\n\nThe purpose of implementing an authentication and authorisation is to be able to protect certain parts of the application to only authenticated users with a specific permissions. This might sound complicated, but with Nest and Okta this implementation is made straightforward.\n\nNest has Guards to handle all of this out of the box. Guards have a single responsibility. They determine whether a given request should be handled by the route handler or not, depending on certain conditions like permissions or roles. For more details on how Guards work inside Nest, please refer to this <a href=\"https://docs.nestjs.com/guards\" target=\"_blank\" rel=\"noopener noreferrer\">link</a>.\n\nLet's define our Guard. Create a new directory inside the `src/` called `guards/`. Within the directory, create a file `auth.guard.ts` where we will place the logic for our Okta authentication Guard.\n\nBefore proceeding with the Guard implementation, install and setup the Okta JWT Verifier for Node.js. Install the <a href=\"https://www.npmjs.com/package/@okta/jwt-verifier\" target=\"_blank\" rel=\"noopener noreferrer\">Okta JWT Verifier</a> with the following command:\n\n```bash\nnpm install --save @okta/jwt-verifier\n```\n\nOnce the Okta JWT Verifier is installed, implement the Guard logic. You can do so by placing the following code into `auth.guard.ts` file.\n\n```ts\nimport { Injectable, CanActivate, ExecutionContext, UnauthorizedException } from \"@nestjs/common\";\nimport { Observable } from \"rxjs\";\nimport * as OktaJwtVerifier from \"@okta/jwt-verifier\";\nimport { AuthConfig } from \"../../config/auth.config\";\nimport { Reflector } from \"@nestjs/core\";\n\n@Injectable()\nexport class OktaGuard implements CanActivate {\n    oktaJwtVerifier: OktaJwtVerifier;\n\n    constructor(\n        private reflector: Reflector,\n        private readonly authConfig: AuthConfig\n    ) {}\n\n    jwtVerifier(permissions) {\n        this.oktaJwtVerifier = new OktaJwtVerifier({\n            issuer: this.authConfig.issuer,\n            clientId: this.authConfig.clientId,\n            assertClaims: {\n                \"permissions.includes\": permissions,\n            },\n        });\n    }\n\n    canActivate(context: ExecutionContext): boolean | Promise<boolean> | Observable<boolean> {\n        const permissions = this.reflector.get<string[]>(\"permissions\", context.getHandler());\n\n        this.jwtVerifier(permissions);\n\n        const token = context.getArgs()[0]?.headers?.authorization.split(\" \")[1];\n        return this.oktaJwtVerifier\n            .verifyAccessToken(token, this.authConfig.audience)\n            .then((details) => {\n                console.log(details);\n                return true;\n            })\n            .catch((err) => {\n                console.log(err);\n                throw new UnauthorizedException();\n            });\n    }\n}\n```\n\nIn order to use the Guard, we will first need to declare our custom decorator. Create a new directory inside the `src/` called `decorators/`. Inside the directory, create a file `auth.decorator.ts` where we can declare our custom decorator.\n\n```ts\nimport { applyDecorators, UseGuards, SetMetadata } from \"@nestjs/common\";\nimport { OktaGuard } from \"../guards/auth.guard\";\n\nexport function Auth(...permissions: string[]) {\n    return applyDecorators(SetMetadata(\"permissions\", permissions), UseGuards(OktaGuard));\n}\n```\n\nAnd that's it. I will demonstrate how we can use this custom decorator to protect our endpoints later in this article.\n\nWe will now implement the user creation using the Okta Node.js SDK.\n\n## User Creation with Okta Node.js SDK\n\nWe will first create users with specific permissions. The user creation will be handled by the Okta Node.js SDK. Let's first install the <a href=\"https://www.npmjs.com/package/@okta/okta-sdk-nodejs\" target=\"_blank\" rel=\"noopener noreferrer\">Okta Node.js SDK</a> with the following command.\n\n```bash\nnpm install @okta/okta-sdk-nodejs\n```\n\nBefore we jump to the implementation on the user creation, a couple of things needs to be done beforehand. First, extend the user profile in the Okta dashboard with one additional attribute that is going to be an array of permissions. Secondly, create the Data Transfer Object (DTO) file where will define the user properties that will be validated on incoming requests.\n\n### Add a new Attribute to the user profile\n\nTo add a `Permission` attribute, navigate to Discovery → Profile Editor → User (default) → Add Attribute in the Okta dashboard.\n\n![Adding Permission attribute to Okta.](https://res.cloudinary.com/suv4o/image/upload/c_scale,f_auto,w_750/v1664764468/blog/nestjs-auth-authorisation-with-okta/nestjs-auth-authorisation-with-okta_muplt4)\n\nIn the dialog, select the following data: Data type to be array of strings, Display name: Permissions, Variable name: permissions, Description: Users Permissions, Attribute required: selected.\n\n![Setting up Permission attribute to Okta.](https://res.cloudinary.com/suv4o/image/upload/c_scale,f_auto,w_750/v1664776160/blog/nestjs-auth-authorisation-with-okta/nestjs-auth-authorisation-with-okta_pp9nnk)\n\nUpon saving the above attributes, our new attribute will be added to the list of attributes.\n\n![New attribute will be added to the list of attributes.](https://res.cloudinary.com/suv4o/image/upload/c_scale,f_auto,w_750/v1664776285/blog/nestjs-auth-authorisation-with-okta/nestjs-auth-authorisation-with-okta_xxbonx)\n\n### Create a DTO\n\nWe will now create a DTO inside our user module. Install two more libraries that will help us with the incoming request validation. We can do so by installing `class-validator`, and `class-transformer` with the following command:\n\n```bash\nnpm install class-validator class-transformer --save\n```\n\nNext, create a new directory called `dto/` inside `src/user/`. Inside `dto/` create `user.dto.ts` file. The code in `user.dto.ts` file will look like this:\n\n```ts\nimport { IsEmail, IsNotEmpty, MaxLength, MinLength, Matches, IsEnum, IsAlpha } from \"class-validator\";\n\nenum Permissions {\n    ADMIN = \"ADMIN\",\n    USER = \"USER\",\n    DEVELOPER = \"DEVELOPER\",\n}\n\nexport class UserDto {\n    @IsEmail()\n    @IsNotEmpty()\n    email: string;\n\n    @IsNotEmpty()\n    @MinLength(8)\n    @MaxLength(20)\n    @Matches(/^(?=.*\\d)(?=.*[a-z])(?=.*[A-Z])(?=.*[!@#$%^&*]).{8,20}$/, {\n        message: \"password too weak\",\n    })\n    password: string;\n\n    @IsNotEmpty()\n    @MinLength(2)\n    @MaxLength(20)\n    @IsAlpha()\n    firstName: string;\n\n    @IsNotEmpty()\n    @MinLength(2)\n    @MaxLength(20)\n    @IsAlpha()\n    lastName: string;\n\n    @IsNotEmpty()\n    @IsEnum(Permissions, { each: true })\n    permissions: Permissions[];\n}\n```\n\nWe should expect five properties to be sent with the request: an email address, a strong password, users first and last name and user's permissions (roles) which will accept three possible values, `ADMIN`, `USER` and `DEVELOPER`.\n\nOne more thing needs to be done to make the DTO work. We need to import and set the `ValidationPipe` in the `main.ts` file. Our `main.ts` file should look like this:\n\n```ts\nimport { NestFactory } from \"@nestjs/core\";\nimport { AppModule } from \"./app.module\";\nimport { ValidationPipe } from \"@nestjs/common\";\n\nasync function bootstrap() {\n    const app = await NestFactory.create(AppModule);\n    app.useGlobalPipes(new ValidationPipe());\n    await app.listen(3000);\n}\nbootstrap();\n```\n\n### User Creation\n\nBefore jumping on the user's sign up implementation, we need to setup the <a href=\"https://www.npmjs.com/package/@okta/okta-sdk-nodejs\" target=\"_blank\" rel=\"noopener noreferrer\">Okta Node.js SDK</a>. The Okta Node.js SDK can be installed with the following command:\n\n```bash\nnpm install @okta/okta-sdk-nodejs\n```\n\nNext, create a file called `okta.setup.ts` inside the user's module `src/user/`. Define the Okta Node.js SDK inside that file as follows:\n\n```ts\nimport { Injectable } from \"@nestjs/common\";\nimport { OktaSdkConfig } from \"../../config/okta.sdk.config\";\nimport { Client } from \"@okta/okta-sdk-nodejs\";\n\n@Injectable()\nexport class Okta {\n    constructor(private readonly oktaSdkConfig: OktaSdkConfig) {}\n\n    setup() {\n        const client = new Client({\n            orgUrl: this.oktaSdkConfig.orgUrl,\n            token: this.oktaSdkConfig.token,\n        });\n        return client;\n    }\n}\n```\n\nTo be able to use the setup above, declare it as a provider in our user module. Our `user.module.ts` file should look like this:\n\n```ts\nimport { Module } from \"@nestjs/common\";\nimport { UserService } from \"./user.service\";\nimport { UserController } from \"./user.controller\";\nimport { OktaSdkConfig } from \"config/okta.sdk.config\";\nimport { Okta } from \"./okta.setup\";\n\n@Module({\n    imports: [],\n    providers: [UserService, Okta, OktaSdkConfig],\n    controllers: [UserController],\n    exports: [UserService],\n})\nexport class UserModule {}\n```\n\nWe can now use Okta setup in the user's service. Head over to the user's service file and create a method called `createUser` inside the `UserService` class. The `user.service.ts` file should appear as follows:\n\n```ts\nimport { BadRequestException, Injectable } from \"@nestjs/common\";\nimport { UserDto } from \"./dto/user.dto\";\nimport { Okta } from \"./okta.setup\";\n\n@Injectable()\nexport class UserService {\n    constructor(private readonly okta: Okta) {}\n\n    async createUser(userRequest: UserDto) {\n        const { email, password, firstName, lastName, permissions } = userRequest;\n        const okta = this.okta.setup();\n\n        const newUser = {\n            profile: {\n                email: email,\n                login: email,\n                firstName: firstName,\n                lastName: lastName,\n                permissions: permissions,\n            },\n            credentials: {\n                password: {\n                    value: password,\n                },\n            },\n        };\n\n        try {\n            const user = await okta.createUser(newUser);\n            return user;\n        } catch (error) {\n            throw new BadRequestException(error.message);\n        }\n    }\n}\n```\n\nWe can make a use of this module inside user's controller where we will now declare our endpoint. Our `user.controller.ts` file should look like this:\n\n```ts\nimport { Controller, Post, Body } from \"@nestjs/common\";\nimport { UserService } from \"./user.service\";\nimport { UserDto } from \"./dto/user.dto\";\n\n@Controller(\"user\")\nexport class UserController {\n    constructor(private readonly userService: UserService) {}\n\n    @Post(\"/signup\")\n    signup(@Body() userRequest: UserDto) {\n        return this.userService.createUser(userRequest);\n    }\n}\n```\n\nAnd that's it. We will next create our first user.\n\n## Sign up Users with different permissions\n\nTo test the creation of new users, we will need a tool that will help us with the API server requests. The most popular tool for this purpose is an application called <a href=\"https://www.postman.com/\" target=\"_blank\" rel=\"noopener noreferrer\">Postman</a>, it is free and easy to use. If you are a VSCode user, you can use an extension called <a href=\"https://marketplace.visualstudio.com/items?itemName=humao.rest-client\" target=\"_blank\" rel=\"noopener noreferrer\">REST Client</a>. REST Client allows you to send HTTP request and view the response in Visual Studio Code directly. All endpoints that we are going to test here in this article will be included in the `api.request.http` file in the root of the project so you can test this with the REST Client extension.\n\nTo signup a new user, we will create the following request in our local server:\n\n```http\nPOST http://localhost:3000/user/signup HTTP/1.1\nContent-Type: application/json\n\n{\n    \"email\": \"admin@test.com\",\n    \"password\": \"P@ssword1\",\n    \"firstName\": \"Darrell\",\n    \"lastName\": \"Werner\",\n    \"permissions\": [\"ADMIN\", \"USER\"]\n}\n```\n\nWith the above request, we have created a User with two permissions: `ADMIN` and `USER`. We can combine all three permissions.\n\nLet's now proceed to create two more users, but with different single permissions: `USER` and `DEVELOPER`. If we try to create a user with permissions that we have't defined in our DTO enum Permissions, we will get an error:\n\n```http\nHTTP/1.1 400 Bad Request\n\n{\n  \"statusCode\": 400,\n  \"message\": [\n    \"each value in permissions must be a valid enum value\"\n  ],\n  \"error\": \"Bad Request\"\n}\n```\n\n## Create guarded endpoints\n\nFinally, we will create endpoints by using the Guard that was created earlier. Declare the `AuthConfig` as a provider in `app.module.ts`. Our `app.module.ts` will appear as follows:\n\n```ts\nimport { Module } from \"@nestjs/common\";\nimport { AppController } from \"./app.controller\";\nimport { UserModule } from \"./user/user.module\";\nimport { ConfigModule } from \"@nestjs/config\";\nimport { AuthConfig } from \"config/auth.config\";\n\n@Module({\n    imports: [\n        ConfigModule.forRoot({\n            isGlobal: true,\n            envFilePath: \".env\",\n        }),\n        UserModule,\n    ],\n    controllers: [AppController],\n    providers: [AuthConfig],\n})\nexport class AppModule {}\n```\n\nNext, create three new endpoints:\n\n1.  `/morning` which will be accessed by users with `ADMIN` and `USER` permissions only,\n2.  `/afternoon` accessed by `DEVELOPER` users, and\n3.  `/evening` that will be accessible by everyone.\n\nOur `app.controller.ts` file will look like this:\n\n```ts\nimport { Controller, Get } from \"@nestjs/common\";\nimport { Auth } from \"./decorators/auth.decorator\";\n\n@Controller()\nexport class AppController {\n    @Get(\"/morning\")\n    @Auth(\"ADMIN\", \"USER\")\n    goodMorning() {\n        return \"Good Morning!\";\n    }\n\n    @Get(\"/afternoon\")\n    @Auth(\"DEVELOPER\")\n    goodAfternoon() {\n        return \"Good Afternoon!\";\n    }\n\n    @Get(\"/evening\")\n    goodEvening() {\n        return \"Good Evening!\";\n    }\n}\n```\n\nTo test our newly created endpoints, we need to have an access token and have that included in the Authorisation header with each request we make to the guarded endpoints.\n\nIn order to get the access token we will need to setup the Okta client SDK. We will not go into the details of how to setup the client SDK at the moment. This will be a topic for a separate blog article. Okta has great examples of that topic with all major frontend frameworks. You can find the examples in the following <a href=\"https://developer.okta.com/\" target=\"_blank\" rel=\"noopener noreferrer\">link</a>.\n\n## Testing guarded endpoints\n\nLet's test out the protected endpoints with the access token obtained from the client app. We need to include the following in each request we make in the Authorisation header:\n\n```http\nGET http://localhost:3000/morning HTTP/1.1\nContent-Type: application/json\nAuthorization: Bearer {USER_ACCESS_TOKEN}\n\n{}\n```\n\nIf the access token is from the admin@test.com user created earlier, we will get a success 200 response:\n\n```http\nHTTP/1.1 200 OK\nGood Morning!\n```\n\nBut if we try to access via the other two users we earlier created, we will get a 401 Unauthorised response:\n\n```http\nHTTP/1.1 401 Unauthorized\n{\n  \"statusCode\": 401,\n  \"message\": \"Unauthorized\"\n}\n```\n\nAnd that's all!\n\nAll examples above can be found in the following Github repository <a href=\"https://github.com/Suv4o/nest-auth-with-okta\" target=\"_blank\" rel=\"noopener noreferrer\">link</a>.\n\n## Conclusion\n\n1. This blog article shows how to sign up and sign in users with specific roles. Then giving those users access to only specific endpoints based on their roles. To accomplish that, we used Okta to help us with the users Authentication and Authorisation.\n2. Okta's Developer Edition provides a free with no time limit access to a variety of key developer features.\n3. To create and validate users in our app we used two packages provided by Okta:\n    - Okta JWT Verifier for Node.js <a href=\"https://www.npmjs.com/package/@okta/jwt-verifier\" target=\"_blank\" rel=\"noopener noreferrer\">link</a>.\n    - Okta Node.js Management SDK <a href=\"https://www.npmjs.com/package/@okta/okta-sdk-nodejs\" target=\"_blank\" rel=\"noopener noreferrer\">link</a>.\n4. Nest has built in Guards mechanisms to handle the protected endpoints. The official documentation has great examples on how to use <a href=\"https://docs.nestjs.com/guards\" target=\"_blank\" rel=\"noopener noreferrer\">guards</a>.\n5. To be able to get the access token, we will need to setup the Okta client SDK. Okta has great documentation and examples on that topic with all the major frontend frameworks. You can find these examples in the following <a href=\"https://developer.okta.com/\" target=\"_blank\" rel=\"noopener noreferrer\">link</a>.\n"
  },
  {
    "articlePath": "/2022/10/07/nestjs-authorisation-with-firebase-auth",
    "embeddings": [
      -0.0010644264984875917,
      0.08930180966854095,
      -0.02957160584628582,
      0.029155222699046135,
      0.08755528926849365,
      -0.03996272385120392,
      -0.0261387936770916,
      0.020113497972488403,
      0.024568473920226097,
      0.01589854061603546,
      -0.011392843909561634,
      0.00651910062879324,
      0.040559835731983185,
      0.07212687283754349,
      0.055045124143362045,
      0.07782992720603943,
      -0.07774274796247482,
      0.014216004870831966,
      -0.007620916701853275,
      -0.06690478324890137,
      -0.005516868084669113,
      -0.030651459470391273,
      0.04530097171664238,
      -0.028355296701192856,
      -0.024996623396873474,
      -0.002162999240681529,
      -0.07735379785299301,
      -0.051841165870428085,
      -0.0212041474878788,
      -0.008477593772113323,
      0.06839010864496231,
      -0.027951456606388092,
      -0.006910734344273806,
      0.008634029887616634,
      0.012177041731774807,
      0.05172605812549591,
      0.06600436568260193,
      -0.07975184172391891,
      0.03661953657865524,
      -0.01847238279879093,
      0.06945778429508209,
      0.09176740795373917,
      -0.06032804772257805,
      -0.09338495135307312,
      0.011001182720065117,
      -0.07711098343133926,
      -0.0667407363653183,
      -0.00889187678694725,
      -0.03254181519150734,
      0.03406840190291405,
      -0.006609684322029352,
      -0.08575540035963058,
      -0.021852990612387657,
      0.013416607864201069,
      -0.022210421040654182,
      0.043920133262872696,
      -0.0787992849946022,
      -0.02412237413227558,
      0.03816404566168785,
      -0.005178940016776323,
      0.03398212790489197,
      -0.07720576971769333,
      -0.0006361285923048854,
      -0.040495775640010834,
      0.038919322192668915,
      0.016048945486545563,
      -0.004221990704536438,
      -0.04923657327890396,
      0.0003593687142711133,
      0.012886670418083668,
      0.1112346276640892,
      0.033276427537202835,
      -0.03329478204250336,
      -0.04307401180267334,
      -0.0007402200135402381,
      -0.08537403494119644,
      -0.02546270750463009,
      0.05749554932117462,
      0.03466786816716194,
      -0.1350146383047104,
      -0.017419183626770973,
      -0.04334469139575958,
      -0.02802225947380066,
      0.025971360504627228,
      0.006363071501255035,
      0.018008721992373466,
      -0.00902934093028307,
      -0.040479373186826706,
      0.04109898954629898,
      -0.004734742920845747,
      -0.013850619085133076,
      -0.019905995577573776,
      -0.029012136161327362,
      0.015833942219614983,
      -0.010578644461929798,
      0.009157104417681694,
      -0.03491247445344925,
      0.022559529170393944,
      -0.07013080269098282,
      0.023906052112579346,
      -0.06312508136034012,
      -0.04702995717525482,
      0.022773198783397675,
      -0.04053117334842682,
      0.12402459979057312,
      0.006613282952457666,
      0.025405321270227432,
      0.02335234545171261,
      -0.0313689224421978,
      0.04967724159359932,
      -0.04682102054357529,
      0.0635543093085289,
      -0.012154399417340755,
      0.046187058091163635,
      -0.010396699421107769,
      0.010922927409410477,
      0.07934266328811646,
      -0.05353153124451637,
      0.08088739961385727,
      0.13947390019893646,
      0.13891196250915527,
      0.02293357253074646,
      0.02167416736483574,
      0.03788420557975769,
      0.061762016266584396,
      -0.08981698006391525,
      -0.038804586976766586,
      7.310476509580579e-33,
      0.060833413153886795,
      0.04735454544425011,
      0.020052755251526833,
      0.07366443425416946,
      0.09648547321557999,
      -0.009258914738893509,
      0.012928548268973827,
      -0.0796523317694664,
      -0.16265061497688293,
      0.009169536642730236,
      -0.018601426854729652,
      0.09732452780008316,
      -0.020917406305670738,
      -0.04125387966632843,
      0.022770030423998833,
      -0.007754964288324118,
      -0.013002905063331127,
      -0.008498025126755238,
      0.07139725983142853,
      0.02601621113717556,
      -0.016560254618525505,
      -0.008820408023893833,
      -0.02346966788172722,
      0.0772411972284317,
      0.04566445201635361,
      -0.044227756559848785,
      0.019477542489767075,
      -0.025787657126784325,
      -0.00481688417494297,
      0.0043497877195477486,
      0.04658668488264084,
      -0.015345089137554169,
      -0.02021610178053379,
      -0.05210636183619499,
      -0.022138087078928947,
      -0.053193941712379456,
      0.025288140401244164,
      -0.04353542998433113,
      -0.09685395658016205,
      -0.00676362682133913,
      0.014496655203402042,
      -0.03652769327163696,
      -0.004755176603794098,
      -0.032845016568899155,
      -0.08394662290811539,
      -0.06230246275663376,
      0.01954122632741928,
      0.012691027484834194,
      0.06938132643699646,
      0.0423346571624279,
      -0.09851513057947159,
      -0.030332183465361595,
      -0.015175316482782364,
      -0.10201364010572433,
      0.02380036935210228,
      -0.001077881664969027,
      -0.07081975042819977,
      -0.00928589142858982,
      -0.021477047353982925,
      -0.07366549968719482,
      0.05272230878472328,
      -0.045506883412599564,
      -0.008962802588939667,
      -0.06235036626458168,
      0.012223836034536362,
      -0.05953459441661835,
      -0.037796106189489365,
      0.03195131942629814,
      0.04241902008652687,
      -0.01063623744994402,
      -0.05586789920926094,
      0.050322629511356354,
      0.03279642015695572,
      0.006331146694719791,
      -0.006185867823660374,
      -0.11041116714477539,
      0.002380348276346922,
      0.04567388445138931,
      -0.005650551989674568,
      0.040011096745729446,
      0.029138950631022453,
      -0.02784549444913864,
      -0.08795912563800812,
      0.10193899273872375,
      -0.0625876635313034,
      -0.024830324575304985,
      0.04325847327709198,
      0.015939559787511826,
      -0.08136451989412308,
      0.01635615900158882,
      0.02132519520819187,
      -0.007333663292229176,
      0.09023098647594452,
      -0.053074032068252563,
      -0.0741875022649765,
      -6.764149346988597e-33,
      0.042321208864450455,
      -0.11528885364532471,
      0.04669348523020744,
      -0.00675554946064949,
      0.03251294419169426,
      0.012689235620200634,
      0.04100244119763374,
      0.0058202361688017845,
      0.0007410646067000926,
      -0.018491597846150398,
      0.011916805990040302,
      0.032191164791584015,
      -0.0035165061708539724,
      -0.021101394668221474,
      -0.03203589841723442,
      0.053852468729019165,
      -0.06526404619216919,
      -0.07756339758634567,
      0.051529113203287125,
      -0.048411011695861816,
      -0.005776306614279747,
      0.0942300334572792,
      0.04373379424214363,
      0.08505392074584961,
      0.019160112366080284,
      0.030852941796183586,
      -0.02168693207204342,
      0.08262152224779129,
      -0.014040266163647175,
      -0.03676798567175865,
      -0.02198849618434906,
      0.00802625622600317,
      -0.06093477085232735,
      0.03608107194304466,
      -0.0074179586954414845,
      -0.06740924715995789,
      -0.00922314915806055,
      0.14007791876792908,
      -0.022424962371587753,
      -0.012668658047914505,
      0.08596142381429672,
      0.010473151691257954,
      -0.007765496615320444,
      -0.05175645276904106,
      0.010665825568139553,
      0.0063781640492379665,
      0.14243720471858978,
      -0.025732005015015602,
      -0.06234585493803024,
      0.06516178697347641,
      0.003652432467788458,
      -0.08322765678167343,
      -0.05894558131694794,
      0.05877579748630524,
      -0.03957083821296692,
      -0.044590726494789124,
      0.04058944433927536,
      -0.07692889869213104,
      0.01188946794718504,
      0.00035321712493896484,
      0.04543899744749069,
      -0.047305814921855927,
      0.028501879423856735,
      0.06287403404712677,
      -0.036879222840070724,
      -0.12898847460746765,
      -0.09572277963161469,
      -0.005317645613104105,
      0.005558543838560581,
      0.05333246663212776,
      -0.04157909378409386,
      -0.03613563999533653,
      0.10152387619018555,
      0.016429243609309196,
      0.03599036484956741,
      -0.011317826807498932,
      0.04218278452754021,
      -0.08657775074243546,
      0.044781725853681564,
      -0.056945011019706726,
      -0.11740635335445404,
      0.011331502348184586,
      -0.07022810727357864,
      0.06589992344379425,
      0.03260486200451851,
      -0.05655044689774513,
      -0.02017674781382084,
      0.040514711290597916,
      0.011292336508631706,
      0.024476926773786545,
      -0.014622052200138569,
      -0.016188694164156914,
      0.012441272847354412,
      -0.026537004858255386,
      -0.022613417357206345,
      -5.797225099968273e-8,
      -0.03908869996666908,
      0.010635712184011936,
      -0.0952429249882698,
      -0.015106846578419209,
      -0.00399012491106987,
      -0.010035269893705845,
      0.062251977622509,
      -0.05261186137795448,
      -0.02644808031618595,
      -0.047277096658945084,
      0.009892306290566921,
      0.07231362909078598,
      0.01668333262205124,
      -0.024529559537768364,
      -0.05736467242240906,
      0.0035740688908845186,
      0.04503444954752922,
      0.01887415163218975,
      0.005701075308024883,
      0.019888153299689293,
      -0.033900629729032516,
      0.018001416698098183,
      -0.024075008928775787,
      0.03968186303973198,
      0.003758528735488653,
      0.07000916451215744,
      -0.02756788767874241,
      0.0008958129328675568,
      -0.006104639731347561,
      0.0071427710354328156,
      -0.057077858597040176,
      0.025903640314936638,
      0.03835896775126457,
      0.008691334165632725,
      -0.015104456804692745,
      -0.018112516030669212,
      -0.008845037780702114,
      0.017462192103266716,
      -0.07020003348588943,
      0.029947567731142044,
      0.13219386339187622,
      0.031867776066064835,
      -0.015971936285495758,
      -0.05994531512260437,
      -0.0015170150436460972,
      -0.035663705319166183,
      0.07506267726421356,
      0.05682745948433876,
      0.08635835349559784,
      0.052073925733566284,
      0.043720487505197525,
      -0.0568680576980114,
      0.012783309444785118,
      0.030309166759252548,
      0.026748856529593468,
      -0.013275847770273685,
      0.08498159795999527,
      -0.08042982965707779,
      0.13192492723464966,
      0.045655038207769394,
      0.14065061509609222,
      -0.041221536695957184,
      0.026011087000370026,
      0.046082753688097
    ],
    "content": "---\ntitle: Nest.js Authorisation with Firebase Auth\ndescription: In this blog article we will be creating a Nest application where users (with different roles) can sign-up and sign-in to the application. Specific permissions can be configured for each user access to specific endpoints, based on the user role. We are going to use Firebase Auth to help us with user Authentication and Authorisation. Before we continue let’s first install the Nest CLI. That will help us create our project much quicker. To install Nest CLI globally use the following command in your terminal\nimage: https://res.cloudinary.com/suv4o/image/upload/q_auto,f_auto,w_1200,e_sharpen:100/v1664868269/blog/nestjs-authorisation-with-firebase-auth/nestjs-authorisation-with-firebase-auth\nkeywords:\n    - Nest.js Authorisation with Firebase Auth\n    - Nest.js\n    - TypeScript\n    - Authentication\n    - Authorization\n    - Firebase Auth\n    - Development\n    - Web Development\ntype: page\nblog: post\npublished: 7th Oct 2022\nreadTime: 15\nauthor: Aleksandar Trpkovski\narticleTags:\n    - Nest.js\n    - Firebase\n    - Node.js\n---\n\n# Nest.js Authorisation with Firebase Auth\n\n_{{$document.published}} • {{$document.readTime}} min read — by **[{{$document.author}}](/)**_\n\n::tag-pills{:tags=\"articleTags\"}\n::\n\n![Landing Image](https://res.cloudinary.com/suv4o/image/upload/q_auto,f_auto,w_750,e_sharpen:100/v1664868269/blog/nestjs-authorisation-with-firebase-auth/nestjs-authorisation-with-firebase-auth)\n\n## What is Nest (NestJS)?\n\n<a href=\"https://nestjs.com/\" target=\"_blank\" rel=\"noopener noreferrer\">Nest</a> is a progressive Node.js framework for building efficient, reliable and scalable server-side applications with TypeScript.\n\nUnder the hood, Nest makes use of two javascript backend frameworks <a href=\"https://expressjs.com/\" target=\"_blank\" rel=\"noopener noreferrer\">Express</a> (the default) and can also be configured to use with <a href=\"https://www.fastify.io/\" target=\"_blank\" rel=\"noopener noreferrer\">Fastify</a> as well!\n\nThe examples in this blog article leverages on the default Express framework.\n\n## What is Firebase?\n\n<a href=\"https://firebase.google.com/\" target=\"_blank\" rel=\"noopener noreferrer\">Firebase</a> as a platform that offers a wide range of services to developers to build, improve, and grow their apps with little or almost no effort. This includes services like authentication, databases, analytics, file storage, push messaging and more. When it comes to user authentication, Firebase provides an <a href=\"https://firebase.google.com/docs/auth\" target=\"_blank\" rel=\"noopener noreferrer\">Authentication</a> service that allows for codes to be written in order for users to be logged into an app from the client side. Firebase also provides an Admin SDK that allows developers to integrate their applications with custom backend, if required.\n\nIn this blog article we will be creating a Nest application where users (with different roles) can sign-up and sign-in to the application. Specific permissions can be configured for each user access to specific endpoints, based on the user role. We are going to use Firebase Auth to help us with user Authentication and Authorisation.\n\n## Create a Nest Project\n\nBefore we continue let’s first install <a href=\"https://docs.nestjs.com/cli/overview\" target=\"_blank\" rel=\"noopener noreferrer\">Nest CLI</a>. That will enable us to efficiently create this project. To install Nest CLI globally, use the following command in your terminal:\n\n```bash\nnpm install -g @nestjs/cli\n```\n\nSetting up a new project is quite simple with Nest CLI. We can create a new Nest project with the following commands in our terminal:\n\n```bash\nnest new nest-auth-with-firebase-auth\n```\n\nNext, choose `npm` for this project.\n\n```bash\n? Which package manager would you ❤️ to use?\n  npm\n❯ yarn\n  pnpm\n```\n\n```bash\n? Which package manager would you ❤️ to use? npm\n▹▹▹▹▸ Installation in progress... ☕\n```\n\nLastly, navigate to the newly created `nest-auth-with-firebase-auth` directory and run this project.\n\n```bash\n$ cd nest-auth-with-firebase-auth\n$ npm run start\n```\n\nIf we navigate to the <a href=\"http://localhost:3000\" target=\"_blank\" rel=\"noopener noreferrer\">**http://localhost:3000**</a> in the browser, we will be able to see **Hello World!**\n\nNow, let’s have a look at the folder structure in our Nest project. Inside the `nest-auth-with-firebase-auth` directory we have `node_modules`, a few other boilerplate files and a `src/` directory populated with several core files.\n\n`app.controller.spec.ts`\n\n`app.controller.ts`\n\n`app.module.ts`\n\n`app.service.ts`\n\n`main.ts`\n\nCool, this means that we have successfully created our Nest project.\n\n## Getting started with Firebase Auth\n\nBefore we start working with Firebase, create a Firebase project in the <a href=\"https://console.firebase.google.com/?authuser=0\" target=\"_blank\" rel=\"noopener noreferrer\">**Firebase console**</a>.\n\nWe can do so by clicking Add Project from the Firebase Console:\n\n![Creating account in Firebase Console](https://res.cloudinary.com/suv4o/image/upload/c_scale,f_auto,w_750/v1664958711/blog/nestjs-authorisation-with-firebase-auth/nestjs-authorisation-with-firebase-auth_dgoo4f)\n\nEnter the project name in the prompt and follow the next three steps to setup the project. In a short period of time, the project will be created.\n\n![Creating account in Firebase Console](https://res.cloudinary.com/suv4o/image/upload/c_scale,f_auto,w_750/v1664958815/blog/nestjs-authorisation-with-firebase-auth/nestjs-authorisation-with-firebase-auth_fc8xge)\n\nThat’s all we need for now. Later in the blog article, we will come back to setup some more things. Until then, let’s move to the next section where we start implementing our Authentication in Nest.\n\n## Create a user module\n\nWe are going to create a user module, user controller and user service. We can do that efficiently with Nest CLI.\n\nFirst, we create the user module:\n\n```bash\nnest g module user\n```\n\nNest CLI will automatically create `user.module.ts` file under the `user` directory and update the `app.module.ts` file accordingly.\n\nNext, we create the controller:\n\n```bash\nnest g controller user --no-spec\n```\n\nYou would have noticed that we use `--no-spec` flag at the end of the command. This allows us to exclude the `user.controller.spec.ts` file.\n\nLastly, we create the service file:\n\n```bash\nnest g service user --no-spec\n```\n\n## Nest Configuration\n\nApplications often run in different environments. Depending on the environment, different configuration settings should be used.\n\nNest provides a `@nestjs/config` package out-of-the box. In order to setup our configuration, we need to install it first.\n\n```bash\nnpm i --save @nestjs/config\n```\n\nOnce the installation process is complete, we import the `ConfigModule`. We need to import the module into the root `app.module.ts` file. Next, add the config module into the imports array. The code inside `app.module.ts` now will look like this:\n\n```ts\nimport { Module } from \"@nestjs/common\";\nimport { AppController } from \"./app.controller\";\nimport { AppService } from \"./app.service\";\nimport { UserModule } from \"./user/user.module\";\nimport { ConfigModule } from \"@nestjs/config\";\n\n@Module({\n    imports: [\n        ConfigModule.forRoot({\n            isGlobal: true,\n            envFilePath: \".env\",\n        }),\n        UserModule,\n    ],\n    controllers: [AppController],\n    providers: [AppService],\n})\nexport class AppModule {}\n```\n\nInside `ConfigModule.forRoot` we pass an object to further configure the `ConfigModule`. First, set the property `isGlobal` to be `true`. This will help us to use `ConfigModule` in other modules so we don’t need to import our module into each module we use. Secondly, set `envFilePath` to be `.env`. This will load and parse a `.env` so that we can access the environmental variable throughout the app using `process.env`.\n\nLastly, create a `.env` file at the root of this project.\n\nWe are now all set with the `ConfigModule` . Let’s move on to setting up Firebase Auth in our Nest app.\n\n## Firebase Setup\n\nWe will need to go back to our Firebase project console to generate a private key which allows us configure the Firebase Node.js Admin SDK. To generate the private key, navigate to Project Overview → Project Settings → Service Accounts → Generate new private key.\n\n![Generate new private key in Firebase Console](https://res.cloudinary.com/suv4o/image/upload/c_scale,f_auto,w_750/v1664959187/blog/nestjs-authorisation-with-firebase-auth/nestjs-authorisation-with-firebase-auth_gzv6ae)\n\n![Generate new private key in Firebase Console](https://res.cloudinary.com/suv4o/image/upload/c_scale,f_auto,w_750/v1664959188/blog/nestjs-authorisation-with-firebase-auth/nestjs-authorisation-with-firebase-auth_y3jfy0)\n\nThis will download a `serviceAccountKey.json` file.\n\nNow, we have two choices:\n\n1. We can set all values from the `serviceAccountKey.json` as environmental variables in our `.env` file or\n2. We can import `serviceAccountKey.json` directly in our app.\n\nIn this example, we are going to use the second option. Feel free to try the first one if that works better to you.\n\nWe will next create a `config/` directory at the root of the Nest project. Inside the directory, copy this file `serviceAccountKey.json` and rename it to: `firebaseServiceAccountKey.json`.\n\nTo proceed with the <a href=\"https://www.npmjs.com/package/firebase-admin\" target=\"_blank\" rel=\"noopener noreferrer\">Firebase Node.js Admin SDK</a> first we need to install it:\n\n```bash\nyarn add firebase-admin\n```\n\nNext, create new file called `firebase.setup.ts` and place the following code:\n\n```ts\nimport { Injectable, OnApplicationBootstrap } from \"@nestjs/common\";\nimport { readFile } from \"fs/promises\";\nimport * as admin from \"firebase-admin\";\nlet app: admin.app.App = null;\n@Injectable()\nexport class FirebaseAdmin implements OnApplicationBootstrap {\n    async onApplicationBootstrap() {\n        if (!app) {\n            const firebaseServiceAccountFile = await readFile(\"./config/firebaseServiceAccountKey.json\", \"utf8\");\n            const serviceAccount = await JSON.parse(firebaseServiceAccountFile);\n            app = admin.initializeApp({\n                credential: admin.credential.cert(serviceAccount),\n            });\n        }\n    }\n    setup() {\n        return app;\n    }\n}\n```\n\nIn order to use these files across our Nest application, we will first need to import the files and then define them as providers in each of the modules. We will do that later as we progress with our application.\n\n## Define Auth Guards\n\nThe purpose of implementing an authentication and authorisation is to be able to protect certain parts of the application to only authenticated users with a specific permissions. This might sound complicated, but with Nest and Firebase this implementation is made straightforward.\n\nNest has Guards to handle all of this out of the box. Guards have a single responsibility. They determine whether a given request should be handled by the route handler or not, depending on certain conditions like permissions or roles. For more details on how Guards work inside Nest, please refer to this <a href=\"https://docs.nestjs.com/guards\" target=\"_blank\" rel=\"noopener noreferrer\">link</a>.\n\nLet’s define our Guard. Create a new directory inside the `src/` called `guards/`. Within the directory, create a file `auth.guard.ts` where we will place the logic for our Firebase authentication Guard.\n\n```ts\nimport { Injectable, CanActivate, ExecutionContext, UnauthorizedException } from \"@nestjs/common\";\nimport { Reflector } from \"@nestjs/core\";\nimport { FirebaseAdmin } from \"../../config/firebase.setup\";\n\n@Injectable()\nexport class AuthGuard implements CanActivate {\n    constructor(\n        private reflector: Reflector,\n        private readonly admin: FirebaseAdmin\n    ) {}\n\n    async canActivate(context: ExecutionContext): Promise<boolean> {\n        const app = this.admin.setup();\n        const idToken = context.getArgs()[0]?.headers?.authorization.split(\" \")[1];\n\n        const permissions = this.reflector.get<string[]>(\"permissions\", context.getHandler());\n        try {\n            const claims = await app.auth().verifyIdToken(idToken);\n\n            if (claims.role === permissions[0]) {\n                return true;\n            }\n            throw new UnauthorizedException();\n        } catch (error) {\n            console.log(\"Error\", error);\n            throw new UnauthorizedException();\n        }\n    }\n}\n```\n\nIn order to use the Guard, we will first need to declare our custom decorator. Create a new directory inside the `src/` called `decorators/`. Inside the directory, create a file `auth.decorator.ts` where we can declare our custom decorator.\n\n```ts\nimport { applyDecorators, UseGuards, SetMetadata } from \"@nestjs/common\";\nimport { AuthGuard } from \"../guards/auth.guard\";\n\nexport function Auth(...permissions: string[]) {\n    return applyDecorators(SetMetadata(\"permissions\", permissions), UseGuards(AuthGuard));\n}\n```\n\nAnd that’s it. I will demonstrate how we can use this custom decorator to protect our endpoints later in this article.\n\nWe will now implement the user creation using the Firebase Admin SDK.\n\n## User Creation with Firebase Admin SDK\n\nBefore we jump to the implementation on the user creation, a couple of things needs to be done beforehand. Firstly we need to enable the email and password authentication in the Firebase console in our project. Secondly, create the Data Transfer Object (DTO) file where will define the user properties that will be validated on incoming requests.\n\n### Enable Email/Password Authentication\n\nTo enable Email/Authentication, navigate to the Authentication module → Email/Password.\n\n![Enabling Email Authentication.](https://res.cloudinary.com/suv4o/image/upload/c_scale,f_auto,w_750/v1665124675/blog/nestjs-authorisation-with-firebase-auth/nestjs-authorisation-with-firebase-auth_allplx)\n\nNext, enable Email/Password and save it.\n\n![Enabling Email Authentication.](https://res.cloudinary.com/suv4o/image/upload/c_scale,f_auto,w_750/v1665124799/blog/nestjs-authorisation-with-firebase-auth/nestjs-authorisation-with-firebase-auth_pxoibq)\n\nWe are now able sign up/sign in users using the Firebase Auth with email and password.\n\n### Create a DTO\n\nWe will now create a DTO inside our user module. Install two more libraries that will help us with the incoming request validation. We can do so by installing `class-validator`, and `class-transformer` with the following command:\n\n```bash\nnpm install class-validator class-transformer --save\n```\n\nNext, create a new directory called `dto/` inside `src/user/`. Inside `dto/` create `user.dto.ts` file. The code in `user.dto.ts` file will look like this:\n\n```ts\nimport { IsEmail, IsNotEmpty, MaxLength, MinLength, Matches, IsEnum, IsAlpha } from \"class-validator\";\n\nenum Permissions {\n    ADMIN = \"ADMIN\",\n    USER = \"USER\",\n    DEVELOPER = \"DEVELOPER\",\n}\n\nexport class UserDto {\n    @IsEmail()\n    @IsNotEmpty()\n    email: string;\n\n    @IsNotEmpty()\n    @MinLength(8)\n    @MaxLength(20)\n    @Matches(/^(?=.*\\d)(?=.*[a-z])(?=.*[A-Z])(?=.*[!@#$%^&*]).{8,20}$/, {\n        message: \"password too weak\",\n    })\n    password: string;\n\n    @IsNotEmpty()\n    @MinLength(2)\n    @MaxLength(20)\n    @IsAlpha()\n    firstName: string;\n\n    @IsNotEmpty()\n    @MinLength(2)\n    @MaxLength(20)\n    @IsAlpha()\n    lastName: string;\n\n    @IsNotEmpty()\n    @IsEnum(Permissions, { each: true })\n    permissions: Permissions[];\n}\n```\n\nWe should expect five properties to be sent with the request: an email address, a strong password, users first and last name and user’s permissions (roles) which will accept three possible values, `ADMIN`, `USER` and `DEVELOPER`.\n\nOne more thing needs to be done to make the DTO work. We need to import and set the `ValidationPipe` in the `main.ts` file. Our `main.ts` file should look like this:\n\n```ts\nimport { NestFactory } from \"@nestjs/core\";\nimport { AppModule } from \"./app.module\";\nimport { ValidationPipe } from \"@nestjs/common\";\n\nasync function bootstrap() {\n    const app = await NestFactory.create(AppModule);\n    app.useGlobalPipes(new ValidationPipe());\n    await app.listen(3000);\n}\nbootstrap();\n```\n\n### User Creation\n\nBefore jumping into the user creation implementation, the`firebase.setup.ts` file needs to be imported and declared as a provider in our user’s module. So our `user.module.ts` file should appear as follows:\n\n```ts\nimport { Module } from \"@nestjs/common\";\nimport { FirebaseAdmin } from \"config/firebase.setup\";\nimport { UserController } from \"./user.controller\";\nimport { UserService } from \"./user.service\";\n\n@Module({\n    controllers: [UserController],\n    providers: [UserService, FirebaseAdmin],\n})\nexport class UserModule {}\n```\n\nWe can now use Firebase setup in the user’s service. Head over to the user’s service file and create a method called `createUser` inside the `UserService` class. The `user.service.ts` file should appear as follows:\n\n```ts\nimport { Injectable, BadRequestException } from \"@nestjs/common\";\nimport { FirebaseAdmin } from \"../../config/firebase.setup\";\nimport { UserDto } from \"./dto/user.dto\";\n\n@Injectable()\nexport class UserService {\n    constructor(private readonly admin: FirebaseAdmin) {}\n\n    async createUser(userRequest: UserDto): Promise<any> {\n        const { email, password, firstName, lastName, role } = userRequest;\n        const app = this.admin.setup();\n\n        try {\n            const createdUser = await app.auth().createUser({\n                email,\n                password,\n                displayName: `${firstName} ${lastName}`,\n            });\n            await app.auth().setCustomUserClaims(createdUser.uid, { role });\n            return createdUser;\n        } catch (error) {\n            throw new BadRequestException(error.message);\n        }\n    }\n}\n```\n\nWe can make a use of this module inside user’s controller where we will now declare our endpoint. Our `user.controller.ts` file should look like this:\n\n```ts\nimport { Controller, Post, Body } from \"@nestjs/common\";\nimport { UserService } from \"./user.service\";\nimport { UserDto } from \"./dto/user.dto\";\n\n@Controller(\"user\")\nexport class UserController {\n    constructor(private readonly userService: UserService) {}\n\n    @Post(\"/signup\")\n    signup(@Body() userRequest: UserDto) {\n        return this.userService.createUser(userRequest);\n    }\n}\n```\n\nAnd that’s it. We will next create our first user.\n\n## Sign up Users with different permissions\n\nTo test the creation of new users, we will need a tool that will help us with the API server requests. The most popular tool for this purpose is an application called <a href=\"https://www.postman.com/\" target=\"_blank\" rel=\"noopener noreferrer\">Postman</a>, it is free and easy to use. If you are a VSCode user, you can use an extension called <a href=\"https://marketplace.visualstudio.com/items?itemName=humao.rest-client\" target=\"_blank\" rel=\"noopener noreferrer\">REST Client</a>. REST Client allows you to send HTTP request and view the response in Visual Studio Code directly. All endpoints that we are going to test here in this article will be included in the `api.request.http` file in the root of the project so you can test this with the REST Client extension.\n\nTo signup a new user, we will create the following request in our local server:\n\n```\nPOST http://localhost:3000/user/signup HTTP/1.1\nContent-Type: application/json\n\n{\n    \"email\": \"admin@test.com\",\n    \"password\": \"P@ssword1\",\n    \"firstName\": \"Darrell\",\n    \"lastName\": \"Werner\",\n    \"role\": \"ADMIN\"\n}\n```\n\nWith the above request, we have created a User with `ADMIN` role.\n\nLet’s now proceed to create two more users, but with different roles: `USER` and `DEVELOPER`. If we try to create a user with permissions that we have’t defined in our DTO enum Permissions, we will get an error:\n\n```\nHTTP/1.1 400 Bad Request\n\n{\n  \"statusCode\": 400,\n  \"message\": [\n    \"each value in permissions must be a valid enum value\"\n  ],\n  \"error\": \"Bad Request\"\n}\n```\n\n## Create guarded endpoints\n\nFinally, we will create endpoints by using the Guard that was created earlier. Declare the `FirebaseAdmin` as a provider in `app.module.ts`. Our `app.module.ts` will appear as follows:\n\n```ts\nimport { Module } from \"@nestjs/common\";\nimport { AppController } from \"./app.controller\";\nimport { AppService } from \"./app.service\";\nimport { ConfigModule } from \"@nestjs/config\";\nimport { FirebaseAdmin } from \"../config/firebase.setup\";\nimport { UserModule } from \"./user/user.module\";\n\n@Module({\n    imports: [\n        ConfigModule.forRoot({\n            isGlobal: true,\n            envFilePath: `.env`,\n        }),\n        UserModule,\n    ],\n    controllers: [AppController],\n    providers: [AppService, FirebaseAdmin],\n})\nexport class AppModule {}\n```\n\nNext, create three new endpoints:\n\n1.  `/morning` which will be accessed by users with `ADMIN` permissions only,\n2.  `/afternoon` accessed by `DEVELOPER` users, and\n3.  `/evening` that will be accessible by everyone.\n\nOur `app.controller.ts` file will look like this:\n\n```ts\nimport { Controller, Get } from \"@nestjs/common\";\nimport { Auth } from \"./decorators/auth.decorator\";\n\n@Controller()\nexport class AppController {\n    @Get(\"/morning\")\n    @Auth(\"ADMIN\")\n    goodMorning() {\n        return \"Good Morning!\";\n    }\n\n    @Get(\"/afternoon\")\n    @Auth(\"DEVELOPER\")\n    goodAfternoon() {\n        return \"Good Afternoon!\";\n    }\n\n    @Get(\"/evening\")\n    goodEvening() {\n        return \"Good Evening!\";\n    }\n}\n```\n\nTo test our newly created endpoints, we need to have an access token and have that included in the Authorisation header with each request we make to the guarded endpoints.\n\nIn order to get the access token we will need to setup the Firebase client SDK. We will not go into the details of how to setup the client SDK at the moment. This will be a topic for a separate blog article. Firebase has great examples of that topic with all major frontend frameworks. You can find the documentation with examples in the following <a href=\"https://firebase.google.com/docs/build\" target=\"_blank\" rel=\"noopener noreferrer\">link</a>.\n\n## Testing guarded endpoints\n\nLet’s test out the protected endpoints with the access token obtained from the client app. We need to include the following in each request we make in the Authorisation header:\n\n```http\nGET http://localhost:3000/morning HTTP/1.1\nContent-Type: application/json\nAuthorization: Bearer {USER_ACCESS_TOKEN}\n\n{}\n```\n\nIf the access token is from the admin@test.com user created earlier, we will get a success 200 response:\n\n```http\nHTTP/1.1 200 OK\nGood Morning!\n```\n\nBut if we try to access via the other two users we earlier created, we will get a 401 Unauthorised response:\n\n```http\nHTTP/1.1 401 Unauthorized\n{\n  \"statusCode\": 401,\n  \"message\": \"Unauthorized\"\n}\n```\n\nAnd that’s all!\n\nAll examples above can be found in the following Github repository <a href=\"https://github.com/Suv4o/nest-firebase-auth\" target=\"_blank\" rel=\"noopener noreferrer\">link</a>.\n\n## Conclusion\n\n1. This blog article shows how to sign up and sign in users with specific roles. Then giving those users access to only specific endpoints based on their roles. To accomplish that, we used Firebase auth to help us with the users Authentication and Authorisation.\n2. To create and validate users in our app we used the Firebase Admin package for Node.js SDK link <a href=\"https://www.npmjs.com/package/firebase-admin\" target=\"_blank\" rel=\"noopener noreferrer\">link</a>.\n3. Nest has built in Guards mechanisms to handle the protected endpoints. The official documentation has great examples on how to use <a href=\"https://docs.nestjs.com/guards\" target=\"_blank\" rel=\"noopener noreferrer\">guards</a>.\n4. To be able to get the access token, we will need to setup the Firebase client SDK. Firebase has great documentation and examples on that topic with all the major frontend frameworks. You can find these examples in the following <a href=\"https://firebase.google.com/docs/build\" target=\"_blank\" rel=\"noopener noreferrer\">link</a>.\n"
  },
  {
    "articlePath": "/2022/10/10/nestjs-current-user-custom-decorator",
    "embeddings": [
      -0.04380279779434204,
      0.09761851280927658,
      -0.005843940656632185,
      0.09130378067493439,
      0.07455418258905411,
      -0.0059106661938130856,
      -0.006313336547464132,
      0.01859346218407154,
      0.03734533488750458,
      0.05917126685380936,
      -0.03136782720685005,
      0.033248644322156906,
      0.01123036164790392,
      0.06542225182056427,
      0.013334248214960098,
      0.07645472884178162,
      -0.08138775825500488,
      0.045476965606212616,
      -0.019914625212550163,
      -0.0805877149105072,
      0.018515050411224365,
      -0.0021364956628531218,
      0.01268739253282547,
      -0.0004584801790770143,
      -0.015347619540989399,
      -0.03843706101179123,
      -0.05302654206752777,
      -0.03910677507519722,
      -0.06600789725780487,
      -0.013507666066288948,
      0.05333148315548897,
      -0.058698620647192,
      -0.06727154552936554,
      -0.02069641463458538,
      -0.003339345334097743,
      0.015130058862268925,
      0.023658787831664085,
      -0.035250332206487656,
      0.06859763711690903,
      -0.03841712325811386,
      0.09445418417453766,
      0.07192358374595642,
      -0.025323279201984406,
      -0.07600164413452148,
      0.004007080104202032,
      -0.03892066329717636,
      -0.045542847365140915,
      -0.007055285386741161,
      -0.0858248919248581,
      0.06480704247951508,
      -0.04444708675146103,
      -0.07191351801156998,
      -0.007792820688337088,
      0.012647337280213833,
      0.011068826541304588,
      0.07528111338615417,
      -0.029220664873719215,
      -0.002020815387368202,
      0.007934657856822014,
      -0.015495112165808678,
      0.021275561302900314,
      -0.11345972120761871,
      -0.024545736610889435,
      -0.05997483804821968,
      0.018305720761418343,
      -0.03388925641775131,
      0.0043648588471114635,
      0.0011302499333396554,
      0.030876945704221725,
      0.02752540446817875,
      0.11768490076065063,
      0.019346926361322403,
      0.022071968764066696,
      -0.04669032245874405,
      0.04404594749212265,
      -0.10906627774238586,
      -0.04768948256969452,
      0.07208064943552017,
      0.03286675363779068,
      -0.12493375688791275,
      0.002263950416818261,
      -0.03894504904747009,
      -0.0014318109024316072,
      -0.011194588616490364,
      0.0164285060018301,
      0.004644949920475483,
      -0.045477207750082016,
      -0.023891152814030647,
      0.03785412758588791,
      -0.008955518715083599,
      0.0032186785247176886,
      -0.07161905616521835,
      -0.029202520847320557,
      0.029772868379950523,
      -0.05527573078870773,
      -0.004076812881976366,
      -0.05407503992319107,
      0.038065485656261444,
      -0.05260239914059639,
      0.03066936694085598,
      -0.03515446558594704,
      0.012551301158964634,
      -0.023729192093014717,
      0.00474675465375185,
      0.17211508750915527,
      0.008613180369138718,
      -0.011821937747299671,
      0.06169310584664345,
      -0.040830206125974655,
      0.07205740362405777,
      -0.04586731642484665,
      0.07363300025463104,
      -0.03673987835645676,
      0.05167040228843689,
      0.027238033711910248,
      -0.01205248013138771,
      0.09755775332450867,
      -0.03083524852991104,
      0.06825537979602814,
      0.09957617521286011,
      0.11863408982753754,
      -0.010108153335750103,
      0.016361769288778305,
      0.052126195281744,
      0.05114751309156418,
      -0.08615845441818237,
      0.021474367007613182,
      4.158086820081232e-33,
      0.057973165065050125,
      0.08719636499881744,
      -0.00906138401478529,
      0.05219949036836624,
      0.059799011796712875,
      0.012026632204651833,
      0.024143483489751816,
      -0.05950715392827988,
      -0.07340631633996964,
      0.019835885614156723,
      -0.026223741471767426,
      0.088247150182724,
      -0.016758296638727188,
      -0.0501767173409462,
      -0.05484403297305107,
      -0.0068445769138634205,
      -0.07131440937519073,
      -0.03436245024204254,
      0.044630661606788635,
      0.01656903326511383,
      -0.006885224021971226,
      -0.013268842361867428,
      -0.034696124494075775,
      0.04612339660525322,
      0.048698559403419495,
      -0.021447671577334404,
      0.02864813059568405,
      -0.018441949039697647,
      -0.08939849585294724,
      0.009131086990237236,
      0.05032402276992798,
      -0.0025767844635993242,
      0.011468254961073399,
      -0.04909107834100723,
      0.008858280256390572,
      -0.04528598487377167,
      0.02752014435827732,
      -0.053689658641815186,
      -0.09991253167390823,
      0.003486744360998273,
      0.04439729452133179,
      -0.030695674940943718,
      0.01677364856004715,
      -0.052649471908807755,
      -0.13907068967819214,
      -0.029693182557821274,
      0.06653738021850586,
      0.03554723039269447,
      0.06426967680454254,
      0.017422227188944817,
      -0.05110684037208557,
      -0.02420503832399845,
      -0.010895473882555962,
      -0.10221966356039047,
      0.031168518587946892,
      0.008995439857244492,
      -0.04493383690714836,
      -0.014788955450057983,
      0.01433457899838686,
      -0.0853852853178978,
      0.07680603116750717,
      -0.03929184004664421,
      0.01644333079457283,
      -0.03930811211466789,
      -0.018618948757648468,
      -0.04114463925361633,
      0.0021084467880427837,
      0.06935014575719833,
      0.039254672825336456,
      -0.024125291034579277,
      -0.049109842628240585,
      0.04280468448996544,
      -0.0059094177559018135,
      -0.030913610011339188,
      -0.00787987932562828,
      -0.06178268790245056,
      -0.04196943715214729,
      0.0440702810883522,
      -0.00821361131966114,
      0.011356713250279427,
      -0.016199452802538872,
      -0.012679730542004108,
      -0.08256712555885315,
      0.1371118426322937,
      -0.0696835070848465,
      -0.012108572758734226,
      0.055105339735746384,
      0.010476639494299889,
      -0.04941095411777496,
      0.023765388876199722,
      0.029333975166082382,
      -0.0019720522686839104,
      0.048036739230155945,
      0.004968979395925999,
      -0.048735473304986954,
      -3.520125464738837e-33,
      0.02212056890130043,
      -0.07901445031166077,
      0.04461035132408142,
      -0.011054979637265205,
      0.023129908367991447,
      -0.035916682332754135,
      0.07002009451389313,
      0.05234344303607941,
      0.027430815622210503,
      -0.0366891548037529,
      -0.00743396021425724,
      0.0025946188252419233,
      -0.029549479484558105,
      0.029521333053708076,
      0.018944231793284416,
      0.021518180146813393,
      -0.07101840525865555,
      -0.08043122291564941,
      0.05769844725728035,
      -0.05096282437443733,
      -0.0409054160118103,
      0.06720530241727829,
      -0.0020620005670934916,
      0.014590542763471603,
      -0.00007283081504283473,
      0.04220154881477356,
      0.004578460939228535,
      0.10465025901794434,
      0.005052735097706318,
      -0.01864813081920147,
      -0.014154872857034206,
      -0.04849185794591904,
      -0.04493893310427666,
      -0.004004125017672777,
      0.007633425761014223,
      -0.013881519436836243,
      -0.05063328146934509,
      0.13251790404319763,
      -0.012159761972725391,
      0.04211327061057091,
      0.0913475826382637,
      0.057234231382608414,
      0.008390081115067005,
      -0.02638864330947399,
      0.009783192537724972,
      0.0017837209161370993,
      0.11582406610250473,
      -0.04087352007627487,
      -0.035816531628370285,
      0.07358546555042267,
      0.012909432873129845,
      -0.06861384212970734,
      -0.04786301031708717,
      0.061608318239450455,
      -0.09028758853673935,
      -0.017776377499103546,
      0.03208776190876961,
      -0.05545082688331604,
      0.029876885935664177,
      -0.005255422554910183,
      0.022514332085847855,
      -0.04485583305358887,
      0.02475191093981266,
      0.05114087462425232,
      -0.017837338149547577,
      -0.10709041357040405,
      -0.03399152308702469,
      -0.053686339408159256,
      0.03147568553686142,
      0.047811660915613174,
      -0.006638398393988609,
      -0.018932078033685684,
      0.07310567051172256,
      0.014700138941407204,
      0.08988911658525467,
      -0.03201359510421753,
      0.053043972700834274,
      -0.08255137503147125,
      0.023386113345623016,
      -0.10847558826208115,
      -0.09943798929452896,
      -0.011494860053062439,
      -0.0451173298060894,
      0.014608926139771938,
      0.05866357684135437,
      -0.07941128313541412,
      -0.013253399170935154,
      0.06701488047838211,
      0.013149001635611057,
      0.003573163878172636,
      -0.0016713052755221725,
      -0.0007684478187002242,
      -0.03496786206960678,
      -0.0641210675239563,
      -0.09917645901441574,
      -5.618229792503371e-8,
      -0.08889345079660416,
      0.04812160134315491,
      -0.04420975595712662,
      0.019550740718841553,
      0.054559126496315,
      -0.02145426720380783,
      0.06617321074008942,
      -0.06465651094913483,
      -0.06819216161966324,
      -0.027757415547966957,
      0.022524766623973846,
      0.08652213215827942,
      0.051190104335546494,
      -0.037319909781217575,
      -0.03421613201498985,
      -0.04364056512713432,
      0.02774178609251976,
      -0.012586796656250954,
      -0.04326475039124489,
      0.04931836947798729,
      -0.04836563020944595,
      0.06261250376701355,
      -0.04116762429475784,
      -0.006682609673589468,
      0.018772367388010025,
      0.10288724303245544,
      -0.056962210685014725,
      -0.039460331201553345,
      0.009512309916317463,
      0.028327900916337967,
      -0.01004654448479414,
      0.07966465502977371,
      0.05797484144568443,
      0.03336655721068382,
      -0.061583906412124634,
      0.023739630356431007,
      0.006451621651649475,
      -0.0034913772251456976,
      -0.09322445839643478,
      0.0515308640897274,
      0.0931406319141388,
      -0.014463626779615879,
      -0.007594200782477856,
      -0.003420719178393483,
      0.01152954064309597,
      -0.01784178614616394,
      0.05693137273192406,
      -0.027732782065868378,
      0.07264833897352219,
      0.07483971863985062,
      0.04458736255764961,
      -0.09622633457183838,
      0.03023572824895382,
      0.019791848957538605,
      -0.003690760349854827,
      -0.05746030434966087,
      0.09419989585876465,
      -0.06963828206062317,
      0.0952552780508995,
      0.02621164545416832,
      0.10362260043621063,
      -0.04290661960840225,
      0.05035730451345444,
      0.04160930961370468
    ],
    "content": "---\ntitle: Nest.js @CurrentUser Custom Decorator\ndescription: This blog article is a continuation from the previous blog article about Nest.js Authorisation with Firebase Auth. If you have’t read that article you will not be able to follow along. The previous article can be found below. In this article we will be using custom route decorators in Nest. We will be creating our own @CurrentUser decorator and use it in the module controllers anytime we want to get the current logged user. Let’s have a look at how we can achieve this.\nimage: https://res.cloudinary.com/suv4o/image/upload/q_auto,f_auto,w_1200,e_sharpen:100/v1665138447/blog/nestjs-current-user-custom-decorator/nestjs-current-user-custom-decorator\nkeywords:\n    - Nest.js @CurrentUser Custom Decorator\n    - Nest.js\n    - TypeScript\n    - Logged User\n    - Auth\n    - Firebase Auth\n    - Development\n    - Web Development\ntype: page\nblog: post\npublished: 10th Oct 2022\nreadTime: 5\nauthor: Aleksandar Trpkovski\narticleTags:\n    - Nest.js\n    - Firebase\n    - Node.js\n---\n\n# Nest.js @CurrentUser Custom Decorator\n\n_{{$document.published}} • {{$document.readTime}} min read — by **[{{$document.author}}](/)**_\n\n::tag-pills{:tags=\"articleTags\"}\n::\n\n![Landing Image](https://res.cloudinary.com/suv4o/image/upload/q_auto,f_auto,w_750,e_sharpen:100/v1665138447/blog/nestjs-current-user-custom-decorator/nestjs-current-user-custom-decorator)\n\n> This blog article is a continuation from the previous blog article about Nest.js Authorisation with Firebase Auth. If you have’t read that article you will not be able to follow along. The previous article can be found at the following <a href=\"https://www.trpkovski.com/2022/10/07/nestjs-authorisation-with-firebase-auth/\" target=\"_blank\" rel=\"noopener noreferrer\">link</a>.\n\nIn this article we will be using custom route decorators in Nest. We will be creating our own `@CurrentUser` decorator and use it in the module controllers anytime we want to get the current logged user. Let’s have a look at how we can achieve this.\n\n## Assign claims to the `request` object in our Guard.\n\nFirst, make small changes to our `auth.guard.ts` file. Our auth guard code should appear as follows:\n\n```ts\nimport { Injectable, CanActivate, ExecutionContext, UnauthorizedException } from \"@nestjs/common\";\nimport { Reflector } from \"@nestjs/core\";\nimport { FirebaseAdmin } from \"../../config/firebase.setup\";\n\n@Injectable()\nexport class AuthGuard implements CanActivate {\n    constructor(\n        private reflector: Reflector,\n        private readonly admin: FirebaseAdmin\n    ) {}\n\n    async canActivate(context: ExecutionContext): Promise<boolean> {\n        const app = this.admin.setup();\n        const request = context.switchToHttp().getRequest();\n        const idToken = context.getArgs()[0]?.headers?.authorization.split(\" \")[1];\n\n        const permissions = this.reflector.get<string[]>(\"permissions\", context.getHandler());\n        try {\n            const claims = await app.auth().verifyIdToken(idToken);\n\n            if (claims.role === permissions[0]) {\n                request.claims = claims;\n                return true;\n            }\n            throw new UnauthorizedException();\n        } catch (error) {\n            console.log(\"Error\", error);\n            throw new UnauthorizedException();\n        }\n    }\n}\n```\n\nThe two changes made to the existing file are:\n\n- Getting the request object: `const request = context.switchToHttp().getRequest()`;\n- Assigning the user claims in a new property in the request object: `request.claims = claims;`\n\nWe will next create an interceptor that will help us to get the current user from Firebase.\n\n## Create an Interceptor\n\nCreate a new directory in `src/` called `interceptors/` . Inside the directory, create a new file called `current-user.interceptor.ts` and place the following code:\n\n```ts\nimport { Injectable, NestInterceptor, ExecutionContext, CallHandler, BadRequestException } from \"@nestjs/common\";\nimport { FirebaseAdmin } from \"../../config/firebase.setup\";\n\n@Injectable()\nexport class CurrentUserInterceptor implements NestInterceptor {\n    constructor(private readonly admin: FirebaseAdmin) {}\n\n    async intercept(context: ExecutionContext, handler: CallHandler) {\n        const app = this.admin.setup();\n        const request = context.switchToHttp().getRequest();\n\n        try {\n            const user = await app.auth().getUser(request.claims.uid);\n            request.currentUser = user;\n        } catch (error) {\n            console.log(\"Error\", error);\n            throw new BadRequestException();\n        }\n        return handler.handle();\n    }\n}\n```\n\nLet me explain what is going on in the code above.\n\nFrom the `claims` in the `request` object we can obtain the user’s `uid`. Calling `getUser()` firebase auth function with the `uid`, we can obtain the user’s details. Lastly, we assigned that user in the request object `request.currentUser = user`.\n\n## Create `@CurrentUser` Decorator\n\nCreate a new file in `src/decorators/` directory called `current-user.decorators.ts`. Inside this directory, place the following code:\n\n```ts\nimport { createParamDecorator, ExecutionContext } from \"@nestjs/common\";\nimport * as adminTypes from \"firebase-admin\";\n\ntype UserRecord = keyof adminTypes.auth.UserRecord;\n\nexport const CurrentUser = createParamDecorator((data: UserRecord, context: ExecutionContext) => {\n    const request = context.switchToHttp().getRequest();\n    return data ? request.currentUser?.[data] : request.currentUser;\n});\n```\n\nIn our custom decorator, we’ve returned the current user from the `request` object.\n\nWe can also pass data to our custom decorator by using the `data` parameter in the `createParamDecorator` function. In our case, we can pass any user property. If a user property is passed then only that property will be returned. If there is nothing passed then the whole user object is returned. To make sure that only user property is passed in the `data` parameter, we create a `type` that can be any property of the user object. We can accomplish this via the following:\n\nFirst, import `firebase-admin`\n\n```ts\nimport * as adminTypes from \"firebase-admin\";\n```\n\nThen create a `type` called `UserRecord` from `auth.UserRecord` interface. Get all user properties and assign them to our type `UserRecord` by using the TypeScript built in method called `keyof`.\n\n```ts\ntype UserRecord = keyof adminTypes.auth.UserRecord;\n```\n\nLastly, assign that type to the data Object:\n\n```ts\nasync (data: UserRecord, context: ExecutionContext) => {\n...\n```\n\n## Use `@CurrentUser` Decorator\n\nTo be able to use our `@CurrentUser` decorator in our application, we will first need to import both the `CurrentUserInterceptor` and `CurrentUser` decorator inside our controller, and then call `CurrentUserInterceptor` inside the `@UseInterceptors` decorator.\n\nOur `app.controller.ts` file should appear as follows:\n\n```ts\nimport { Controller, Get, UseInterceptors } from '@nestjs/common';\nimport { Auth } from './decorators/auth.decorator';\nimport { CurrentUser } from './decorators/current-user.decorators';\nimport { CurrentUserInterceptor } from './interceptors/current-user.interceptor';\n\n@Controller()\n@UseInterceptors(CurrentUserInterceptor)\nexport class AppController {\n  @Get('/morning')\n  @Auth('ADMIN')\n  goodMorning(@CurrentUser('email') email: string) {\n    return 'Good Morning!' + email;\n  }\n...\n```\n\nIn the example above, our `@CurrentUser` decorator will return the user’s `email` only. We can pass any user’s property we want. For example, we can pass `uid`, `displayName`, `phoneNumber` etc. If we don’t pass anything, the `@CurrentUser` will return the whole user object.\n\nAnd that’s all!\n\nAll examples above can be found in the following Github repository <a href=\"https://github.com/Suv4o/nest-current-user-custom-decorator\" target=\"_blank\" rel=\"noopener noreferrer\">link</a>.\n\n## Conclusion\n\n1. In this article, we created a custom decorator called `@CurrentUser` that will help us to get the user in the module controller.\n2. To be able to get the current user, we made use of a custom interceptor in Nest.\n3. In our custom decorator we can also pass data. To be able to verify the data that is passed, we created a `type` called `UserRecord` from the `auth.UserRecord` interface. With the TypeScript built in method called `keyof`, we were able to extract all the properties from the `auth.UserRecord`.\n4. This article was continuation from the previous article about Nest.js Authorisation with Firebase Auth. If you have’t read that article, you can find the article in the following <a href=\"https://www.trpkovski.com/2022/10/07/nestjs-authorisation-with-firebase-auth/\" target=\"_blank\" rel=\"noopener noreferrer\">link</a>.\n"
  },
  {
    "articlePath": "/2022/10/14/nestjs-class-validator-high-vulnerability-fix",
    "embeddings": [
      -0.1060602068901062,
      0.08550795167684555,
      0.0647108405828476,
      0.006110526621341705,
      0.11480303108692169,
      -0.08148374408483505,
      -0.07685964554548264,
      0.00017398272757418454,
      -0.0043944609351456165,
      -0.00008377738413400948,
      -0.027325846254825592,
      0.04178543761372566,
      0.026130594313144684,
      0.06689224392175674,
      0.03152509778738022,
      0.0652051642537117,
      -0.0841565802693367,
      0.04110546410083771,
      -0.03617091476917267,
      -0.053446944802999496,
      -0.0087293004617095,
      0.05004822835326195,
      0.006816779728978872,
      -0.010242754593491554,
      -0.0915650874376297,
      0.031096113845705986,
      -0.09036926180124283,
      -0.03305162861943245,
      -0.022855011746287346,
      -0.11186651140451431,
      0.04183662682771683,
      0.03989529609680176,
      -0.10060333460569382,
      -0.02978736162185669,
      0.05630173534154892,
      0.0999421551823616,
      0.011838779784739017,
      -0.0013064799131825566,
      0.0071448348462581635,
      -0.034583862870931625,
      0.08755767345428467,
      0.038884591311216354,
      -0.025198645889759064,
      -0.08453459292650223,
      -0.041545022279024124,
      -0.08371239900588989,
      -0.041545674204826355,
      -0.0781615823507309,
      -0.044897545129060745,
      -0.00879662111401558,
      -0.04950390011072159,
      -0.09922173619270325,
      0.04154769331216812,
      0.019040623679757118,
      -0.020941589027643204,
      0.04735199734568596,
      -0.035898637026548386,
      -0.03758271038532257,
      0.013162277638912201,
      -0.01036719512194395,
      0.0339498408138752,
      -0.05542833358049393,
      0.004757576622068882,
      -0.03480866923928261,
      -0.0056750234216451645,
      0.07502523809671402,
      -0.009819814935326576,
      -0.004652600269764662,
      -0.028653457760810852,
      0.08765780925750732,
      0.04564027115702629,
      -0.023608708754181862,
      0.05298307165503502,
      0.02843407914042473,
      0.019433068111538887,
      -0.03266723081469536,
      -0.005137711297720671,
      0.01575782150030136,
      0.09463517367839813,
      -0.06596913188695908,
      -0.021522244438529015,
      -0.026112494990229607,
      0.04548332840204239,
      -0.02471247874200344,
      0.07387091964483261,
      0.07780136168003082,
      -0.024073239415884018,
      -0.05139162763953209,
      0.03248041495680809,
      -0.010918376967310905,
      0.002033726777881384,
      -0.0397980734705925,
      0.004971909802407026,
      0.08734641969203949,
      -0.024248525500297546,
      -0.030088229104876518,
      -0.07079510390758514,
      0.048323385417461395,
      -0.032529089599847794,
      0.06724720448255539,
      -0.032628946006298065,
      -0.06848274171352386,
      0.0024431501515209675,
      -0.02063855156302452,
      0.12177848070859909,
      0.00994524359703064,
      0.035572197288274765,
      0.024806169793009758,
      -0.022174231708049774,
      0.0456693060696125,
      -0.016650956124067307,
      0.05980779975652695,
      0.01839684136211872,
      -0.023145975545048714,
      -0.057374414056539536,
      0.026781730353832245,
      0.0638003796339035,
      -0.013496738858520985,
      0.015252389945089817,
      0.11774097383022308,
      0.12426244467496872,
      -0.0019224685383960605,
      0.06545106321573257,
      -0.01997147686779499,
      0.07768015563488007,
      -0.06763414293527603,
      -0.031190169975161552,
      5.728729107062201e-33,
      0.028799302875995636,
      0.04974205419421196,
      -0.05150584504008293,
      0.041115179657936096,
      0.06829974055290222,
      -0.05279906094074249,
      0.025790181010961533,
      -0.03646841272711754,
      -0.1348523199558258,
      0.027532106265425682,
      0.02461780421435833,
      0.01278037577867508,
      -0.06961315870285034,
      -0.03895803540945053,
      -0.005137279164046049,
      -0.043413739651441574,
      -0.012561262585222721,
      0.015517083927989006,
      -0.01868963986635208,
      -0.010373998433351517,
      -0.014135896228253841,
      0.0019243673887103796,
      -0.026264458894729614,
      0.02896890603005886,
      -0.002711167559027672,
      0.05725590139627457,
      0.04307281970977783,
      0.0061393422074615955,
      -0.025910209864377975,
      0.003933230880647898,
      0.05808175727725029,
      0.006815779954195023,
      0.08452697098255157,
      -0.005187639035284519,
      0.003076649969443679,
      0.003323749639093876,
      0.031750697642564774,
      -0.021393917500972748,
      -0.12110687792301178,
      -0.04884430021047592,
      0.0005630477098748088,
      0.030989058315753937,
      -0.006810341961681843,
      0.013049990870058537,
      -0.006916273385286331,
      -0.06971368193626404,
      0.04938485473394394,
      -0.020247355103492737,
      0.06997598707675934,
      -0.006414232309907675,
      -0.06225106865167618,
      -0.0020988245960325003,
      -0.04820989444851875,
      -0.04975885525345802,
      -0.006976158358156681,
      0.012089482508599758,
      -0.0074450792744755745,
      0.07040122151374817,
      0.023950250819325447,
      -0.041442546993494034,
      0.01476994063705206,
      -0.06147771328687668,
      -0.043004438281059265,
      -0.09134619683027267,
      0.05121815204620361,
      -0.02568904310464859,
      -0.026787564158439636,
      0.028857117518782616,
      -0.032478731125593185,
      -0.018948869779706,
      -0.009570218622684479,
      0.04975207522511482,
      -0.02224886044859886,
      0.02851260080933571,
      0.048192571848630905,
      -0.11364254355430603,
      0.013955757953226566,
      0.03827105462551117,
      -0.01888049580156803,
      -0.0550532191991806,
      0.03184353932738304,
      -0.047124769538640976,
      -0.01465202309191227,
      0.12209633737802505,
      -0.02111482061445713,
      -0.04316229373216629,
      0.045501966029405594,
      0.06254811584949493,
      -0.01868894323706627,
      0.015952588990330696,
      0.02891024388372898,
      -0.048791542649269104,
      0.013638924807310104,
      -0.07909688353538513,
      -0.07601418346166611,
      -4.2766075073708276e-33,
      0.07292015105485916,
      0.010285718366503716,
      -0.0647006407380104,
      0.10584963858127594,
      -0.006864589639008045,
      -0.010700234211981297,
      0.019221074879169464,
      0.07212596386671066,
      -0.015682391822338104,
      -0.013696403242647648,
      0.003635368775576353,
      0.004932707641273737,
      -0.009279382415115833,
      -0.029822388663887978,
      -0.0408698245882988,
      0.034673940390348434,
      -0.07356633245944977,
      -0.09812545776367188,
      0.0484149344265461,
      -0.06266467273235321,
      0.06058986112475395,
      0.07626450061798096,
      -0.006601670291274786,
      0.06666775792837143,
      -0.04912365600466728,
      0.07217119634151459,
      -0.035268597304821014,
      0.09629172086715698,
      0.036598704755306244,
      0.03564191982150078,
      -0.012951877899467945,
      0.053202029317617416,
      -0.028334656730294228,
      0.058173008263111115,
      -0.016565710306167603,
      -0.017831997945904732,
      -0.04228155314922333,
      0.039693161845207214,
      0.0075457277707755566,
      0.024604272097349167,
      0.007672153413295746,
      0.05301126465201378,
      -0.0660930648446083,
      -0.04735128581523895,
      -0.048237308859825134,
      0.000659096403978765,
      0.11989875882863998,
      -0.0195153821259737,
      -0.02279757894575596,
      -0.02384002134203911,
      0.00016163507825694978,
      -0.0712900459766388,
      -0.03285704925656319,
      0.08103764802217484,
      -0.022870903834700584,
      -0.02310347557067871,
      0.05885611101984978,
      -0.05410466343164444,
      -0.07072893530130386,
      0.0885593518614769,
      -0.007763991132378578,
      0.03575565665960312,
      0.0019985847175121307,
      -0.012722107581794262,
      0.004372668452560902,
      -0.03025660291314125,
      -0.10813746601343155,
      -0.01569179818034172,
      0.07521534711122513,
      0.019825652241706848,
      0.003880962496623397,
      0.08231625705957413,
      0.041267331689596176,
      -0.07024966925382614,
      0.01426749862730503,
      -0.008307086303830147,
      0.05937871336936951,
      -0.03534827381372452,
      0.08724913746118546,
      -0.06034703180193901,
      -0.12895719707012177,
      -0.02338464930653572,
      -0.0198044553399086,
      0.05258435755968094,
      0.030735675245523453,
      0.006060267798602581,
      0.07588694244623184,
      0.05081356316804886,
      0.02420111745595932,
      0.005653887987136841,
      -0.0029092165641486645,
      -0.013026387430727482,
      -0.042634960263967514,
      -0.017482534050941467,
      -0.02288655936717987,
      -5.613570763784992e-8,
      -0.0777362510561943,
      0.021788738667964935,
      -0.14249488711357117,
      -0.05923771485686302,
      0.05620139464735985,
      -0.0009082764736376703,
      0.06509668380022049,
      -0.011853347532451153,
      -0.016428859904408455,
      0.040772970765829086,
      0.03563025966286659,
      0.07924012094736099,
      -0.04459378495812416,
      -0.05878870561718941,
      -0.0018040650757029653,
      0.002479125279933214,
      -0.04922927916049957,
      0.12467355281114578,
      -0.07734295725822449,
      0.06437000632286072,
      -0.03040643408894539,
      0.04864198714494705,
      0.004437138792127371,
      0.01451131235808134,
      0.050129443407058716,
      0.02737611159682274,
      0.0007845090003684163,
      0.022827571257948875,
      0.01332373172044754,
      -0.026605647057294846,
      -0.11427771300077438,
      0.04038669541478157,
      0.008158134296536446,
      -0.03874550387263298,
      0.0034362422302365303,
      0.06061766296625137,
      -0.01309940218925476,
      0.016645340248942375,
      0.03271835297346115,
      0.0924004390835762,
      0.0554114505648613,
      -0.003101696725934744,
      -0.07768499851226807,
      -0.03822893276810646,
      -0.04678519070148468,
      -0.011722208000719547,
      -0.07476910948753357,
      -0.00372007442638278,
      0.018725773319602013,
      0.0274933110922575,
      0.04188082739710808,
      -0.03418956696987152,
      -0.057858627289533615,
      0.02620093524456024,
      -0.03828934207558632,
      -0.04884666949510574,
      0.06260105967521667,
      -0.0876118540763855,
      0.05076049640774727,
      -0.04175501689314842,
      0.11751577258110046,
      -0.04887259006500244,
      0.11667975783348083,
      0.005135493818670511
    ],
    "content": "---\ntitle: Nest.js class-validator high vulnerability fix\ndescription: If you have used Nest.js recently probably have realised that the class-validator library has a high vulnerability in it, which is not being addressed for quite a while. The ValidationPipe makes use of the powerful class-validator package and its declarative validation decorators. The ValidationPipe provides a convenient approach to enforce validation rules for all incoming client payloads, where the specific rules are declared with simple annotations in local class/DTO declarations in each module. The class-validator package works in conjunction with another package class-transformer. The lack of maintenance made the Nuxt team fork the original packages and take care of the maintenance.\nimage: https://res.cloudinary.com/suv4o/image/upload/q_auto,f_auto,w_1200,e_sharpen:100/v1665729617/blog/nestjs-class-validator-high-vulnerability-fix/nestjs-class-validator-high-vulnerability-fix\nkeywords:\n    - Nest.js class-validator high vulnerability fix\n    - Nest.js\n    - TypeScript\n    - Vulnerability\n    - Fix\n    - NPM\n    - Development\n    - Web Development\ntype: page\nblog: post\npublished: 14th Oct 2022\nreadTime: 1\nauthor: Aleksandar Trpkovski\narticleTags:\n    - Node.js\n    - Nest.js\n    - TypeScript\n---\n\n# Nest.js `class-validator` high vulnerability fix\n\n_{{$document.published}} • {{$document.readTime}} min read — by **[{{$document.author}}](/)**_\n\n::tag-pills{:tags=\"articleTags\"}\n::\n\n![Landing Image](https://res.cloudinary.com/suv4o/image/upload/q_auto,f_auto,w_750,e_sharpen:100/v1665729617/blog/nestjs-class-validator-high-vulnerability-fix/nestjs-class-validator-high-vulnerability-fix)\n\nIf you have used Nest.js recently, you probably have realised that the <a href=\"https://www.npmjs.com/package/class-validator\" target=\"_blank\" rel=\"noopener noreferrer\">`class-validator`</a> library has a high vulnerability in it, which has not been addressed for quite a while.\n\nThe <a href=\"https://docs.nestjs.com/techniques/validation\" target=\"_blank\" rel=\"noopener noreferrer\">`ValidationPipe`</a> uses the powerful `class-validator` package and its declarative validation decorators. The `ValidationPipe` provides a convenient approach to enforce validation rules for all incoming client payloads. The specific rules are declared with simple annotations in each module's local class/DTO declarations.\n\nThe `class-validator` package works in conjunction with another package <a href=\"https://www.npmjs.com/package/class-transformer\" target=\"_blank\" rel=\"noopener noreferrer\">`class-transformer`</a>. The lack of maintenance made the Nuxt team fork the original packages and took care of the maintenance.\n\n## **How to migrate to the new forked packages**\n\n1. Uninstall the existing `class-validator` and `class-transformer` packages from the Nest project.\n\n```bash\nnpm uninstall class-validator class-transformer\n```\n\n1. Install the newly forked packages.\n\n```bash\nnpm install @nestjs/class-validator @nestjs/class-transformer\n```\n\n1. In the `main.ts` file, add the following:\n\n```ts\napp.useGlobalPipes(\n    new ValidationPipe({\n        validatorPackage: require(\"@nestjs/class-validator\"),\n        transformerPackage: require(\"@nestjs/class-transformer\"),\n    })\n);\n```\n\nAnd that's all! Now we can start using the newly maintained packages.\n\n## Conclusion\n\nThis solution is a workaround for the time being until the Nest team figures out what is the best approach to migrate in the future.\n"
  },
  {
    "articlePath": "/2022/10/22/sharing-components-between-multiple-nuxt-projects",
    "embeddings": [
      -0.04530639573931694,
      -0.06750351935625076,
      0.003024408360943198,
      0.031244469806551933,
      0.10001043975353241,
      -0.05885403975844383,
      -0.04603142663836479,
      0.01686955615878105,
      0.04998655617237091,
      -0.026371818035840988,
      -0.004429470282047987,
      0.017117155715823174,
      0.030832530930638313,
      0.04950011894106865,
      0.08142970502376556,
      0.03213639184832573,
      0.019604535773396492,
      0.04407593607902527,
      -0.01448550634086132,
      -0.02381115034222603,
      0.0037624582182615995,
      0.04306001961231232,
      0.045862745493650436,
      -0.033463794738054276,
      -0.021880032494664192,
      -0.04387142136693001,
      -0.0710252895951271,
      -0.028141653165221214,
      -0.015264200046658516,
      -0.09609153121709824,
      0.0980696827173233,
      0.09872360527515411,
      -0.14665839076042175,
      0.0067749000154435635,
      -0.010607795789837837,
      0.08861996233463287,
      -0.03427630662918091,
      -0.02290900982916355,
      -0.09842914342880249,
      -0.09106171131134033,
      0.042700666934251785,
      0.0449787937104702,
      -0.08036656677722931,
      -0.019061541184782982,
      -0.0510534942150116,
      0.0014280066825449467,
      -0.048757459968328476,
      -0.10985533893108368,
      0.007340995129197836,
      -0.02701997011899948,
      -0.03785053268074989,
      -0.1704818308353424,
      0.004272454418241978,
      0.032948728650808334,
      0.04183727130293846,
      0.017915064468979836,
      -0.07760056853294373,
      -0.00493559380993247,
      0.0007606987492181361,
      0.04067041724920273,
      0.06784393638372421,
      0.011171200312674046,
      0.01039265189319849,
      -0.03577694669365883,
      0.07052792608737946,
      0.030924133956432343,
      0.026145897805690765,
      0.05817384272813797,
      -0.06871451437473297,
      -0.04157000780105591,
      -0.011476793326437473,
      -0.011372332461178303,
      -0.024277886375784874,
      -0.029971424490213394,
      0.00539760198444128,
      -0.030339546501636505,
      -0.0008939633844420314,
      0.0381213054060936,
      -0.0094896350055933,
      -0.10243299603462219,
      0.013311143033206463,
      0.03177237883210182,
      0.003377536078915,
      0.017658943310379982,
      0.041774094104766846,
      0.06651981174945831,
      0.027189290151000023,
      -0.027209307998418808,
      0.037877172231674194,
      -0.017800355330109596,
      -0.04828433319926262,
      0.00394095154479146,
      0.09578033536672592,
      -0.0027151689864695072,
      0.06173618882894516,
      -0.015086517669260502,
      -0.054053619503974915,
      0.06540720909833908,
      0.00930630974471569,
      0.06940659880638123,
      -0.010063210502266884,
      0.023087214678525925,
      0.03994424268603325,
      0.005463899578899145,
      0.09683792293071747,
      0.06576767563819885,
      0.03905978798866272,
      0.030626840889453888,
      -0.04189049080014229,
      0.019964879378676414,
      -0.03666013479232788,
      0.06521732360124588,
      -0.03716493025422096,
      -0.07499131560325623,
      -0.03774770721793175,
      0.0015747679863125086,
      0.05595080554485321,
      0.010485573671758175,
      0.04296564310789108,
      0.02830352820456028,
      0.09136572480201721,
      -0.028303608298301697,
      0.020346974954009056,
      0.001611635903827846,
      0.001558702439069748,
      -0.0465797558426857,
      -0.05750695616006851,
      7.66548535442051e-33,
      0.031982146203517914,
      0.016947176307439804,
      -0.09506296366453171,
      0.047617826610803604,
      0.0660349428653717,
      -0.034523673355579376,
      0.022837186232209206,
      -0.021493323147296906,
      -0.1543973833322525,
      -0.004521701019257307,
      0.027361007407307625,
      0.07225096225738525,
      -0.03584573417901993,
      0.03398535028100014,
      0.03551148250699043,
      -0.09487329423427582,
      0.02940644882619381,
      0.08724601566791534,
      0.040752653032541275,
      -0.02186552993953228,
      -0.0419011265039444,
      0.08314517885446548,
      -0.02606835588812828,
      0.05948389694094658,
      0.06494555622339249,
      -0.0072777108289301395,
      -0.002102440455928445,
      -0.013169682584702969,
      -0.026203440502285957,
      -0.04481920599937439,
      0.029440391808748245,
      0.02055979333817959,
      0.020418629050254822,
      0.04851559177041054,
      -0.034772466868162155,
      -0.022734927013516426,
      -0.02910967729985714,
      -0.0734870582818985,
      -0.06351890414953232,
      0.07651140540838242,
      0.0439210869371891,
      0.011834426783025265,
      -0.05492788180708885,
      -0.13685432076454163,
      -0.0628010556101799,
      -0.021938085556030273,
      -0.033629510551691055,
      0.0345623716711998,
      0.06538867205381393,
      -0.017149876803159714,
      -0.045709624886512756,
      0.021576184779405594,
      -0.009047908708453178,
      -0.02314622700214386,
      0.06700602173805237,
      -0.013478943146765232,
      -0.01303025335073471,
      0.020564887672662735,
      0.10182450711727142,
      -0.021788714453577995,
      -0.1047045886516571,
      -0.02296006679534912,
      -0.008853395469486713,
      0.021301237866282463,
      0.0043424442410469055,
      0.0698641985654831,
      -0.011757461354136467,
      0.04621954262256622,
      0.0537516288459301,
      0.020618505775928497,
      -0.11080551147460938,
      0.08046181499958038,
      -0.02665642462670803,
      -0.029523393139243126,
      0.06520053744316101,
      -0.14437775313854218,
      -0.1076442152261734,
      -0.04470301419496536,
      0.03215580806136131,
      -0.010302906855940819,
      0.0003815451927948743,
      0.00024185753136407584,
      -0.05010608583688736,
      0.08934839069843292,
      -0.017323868349194527,
      -0.030417688190937042,
      -0.009692582301795483,
      0.005613901186734438,
      -0.050931066274642944,
      -0.046385034918785095,
      0.020580237731337547,
      -0.02779683843255043,
      0.00832328386604786,
      -0.06709511578083038,
      -0.011606613174080849,
      -5.77021156801875e-33,
      0.07415523380041122,
      0.004918629303574562,
      -0.04070939123630524,
      0.07037538290023804,
      0.024057384580373764,
      0.002005833899602294,
      0.030116423964500427,
      -0.029633309692144394,
      -0.054290443658828735,
      -0.011366218328475952,
      -0.020589375868439674,
      -0.0048890323378145695,
      0.023207547143101692,
      -0.04835421219468117,
      -0.0737326517701149,
      0.09803351759910583,
      0.013757837936282158,
      -0.12382823973894119,
      0.038729265332221985,
      -0.0449797622859478,
      -0.05333970859646797,
      0.08851589262485504,
      0.04956981912255287,
      0.008039135485887527,
      0.022136474028229713,
      0.061021290719509125,
      -0.01978740096092224,
      0.019650496542453766,
      -0.01298907957971096,
      -0.08022110909223557,
      -0.048723116517066956,
      -0.030797038227319717,
      -0.07960879057645798,
      -0.11166868358850479,
      0.01528984121978283,
      0.05161074548959732,
      -0.02150779776275158,
      0.1013181135058403,
      -0.028620831668376923,
      0.026594286784529686,
      0.03480871021747589,
      0.0030642272904515266,
      -0.008234930224716663,
      -0.020541105419397354,
      -0.0977676585316658,
      0.02890116348862648,
      -0.012744308449327946,
      -0.0013182429829612374,
      -0.01087364461272955,
      -0.025866756215691566,
      0.06419976055622101,
      -0.07442294806241989,
      -0.014344359748065472,
      -0.030183564871549606,
      -0.01206169556826353,
      -0.02755003422498703,
      0.08193989098072052,
      0.03911537677049637,
      -0.02609696052968502,
      -0.005455123260617256,
      0.09852675348520279,
      -0.025746619328856468,
      0.023479852825403214,
      0.02062799409031868,
      -0.027086857706308365,
      -0.04472155496478081,
      -0.1143321841955185,
      0.021436411887407303,
      -0.033207908272743225,
      0.038181718438863754,
      -0.053597740828990936,
      0.06888122111558914,
      0.056077223271131516,
      -0.06068188697099686,
      0.010469521395862103,
      -0.02331569232046604,
      0.12023084610700607,
      -0.04403509572148323,
      0.05866755545139313,
      0.006030213553458452,
      -0.10908233374357224,
      0.012745934538543224,
      0.005095587112009525,
      -0.014112046919763088,
      0.011433256790041924,
      0.03503897786140442,
      -0.022639960050582886,
      0.06839192658662796,
      0.0646262839436531,
      -0.06918450444936752,
      -0.050819091498851776,
      0.021407166495919228,
      -0.047483135014772415,
      0.06603985279798508,
      0.001199990976601839,
      -5.878645836787655e-8,
      0.0010296490509063005,
      0.041018176823854446,
      -0.11683636158704758,
      -0.040891166776418686,
      -0.03697121888399124,
      -0.007841033861041069,
      0.05042749270796776,
      0.0737568810582161,
      -0.0012177677126601338,
      0.11047833412885666,
      0.05942775681614876,
      0.0841008648276329,
      -0.054318856447935104,
      0.03477396070957184,
      -0.010461349971592426,
      0.04768545925617218,
      0.023690545931458473,
      0.053101394325494766,
      -0.04104606807231903,
      -0.021717146039009094,
      0.00802601594477892,
      0.07541617751121521,
      -0.010059494525194168,
      0.004255583975464106,
      0.06406217813491821,
      0.008122938685119152,
      -0.009643914178013802,
      0.004183019511401653,
      0.013462327420711517,
      -0.021142026409506798,
      0.008092549629509449,
      0.04262527450919151,
      -0.03129635006189346,
      -0.03155948966741562,
      0.03154916316270828,
      -0.010654724203050137,
      -0.04239220172166824,
      0.059481777250766754,
      0.0065528578124940395,
      0.06363151222467422,
      0.04349379613995552,
      0.027030035853385925,
      -0.05186660215258598,
      0.018207574263215065,
      -0.0064247832633554935,
      -0.03771140053868294,
      -0.04010801762342453,
      -0.07197066396474838,
      0.008862833492457867,
      0.003946533892303705,
      0.006349118426442146,
      -0.0327640138566494,
      -0.010526621714234352,
      0.054580722004175186,
      0.049442850053310394,
      0.0033243452198803425,
      0.0757565125823021,
      -0.01658247783780098,
      0.08281949907541275,
      -0.045487262308597565,
      -0.0001577576476847753,
      -0.062302716076374054,
      0.10628045350313187,
      0.04188375920057297
    ],
    "content": "---\ntitle: Sharing components between multiple Nuxt projects\ndescription: Nuxt 3 and its new foundation come with many powerful new features, such as the new server engine Nitro that made the framework lighter and faster and supported by Vue's 3 Composition API and Vite. But one of Nuxt's features that not many people talk about is the ability to merge two or more applications and share functionalities between them. The extends feature in Nuxt 3 allows us to set a relative config path or remote git repositories such as GitHub, GitLab, Bitbucket or https:// pointing to the source directories of a project. This feature is a perfect use case for complex projects such us developing applications with a few different pieces, for example, an Admin and a User area that are designed separately but share the same components.\nimage: https://res.cloudinary.com/suv4o/image/upload/q_auto,f_auto,w_1200,e_sharpen:100/v1666399302/blog/nuxt-extends/nuxt-extends\nkeywords:\n    - Sharing components between multiple Nuxt projects\n    - Nuxt.js\n    - Vue.js\n    - Components\n    - Reusing components\n    - Development\n    - Web Development\ntype: page\nblog: post\npublished: 22nd Oct 2022\nreadTime: 5\nauthor: Aleksandar Trpkovski\narticleTags:\n    - Nuxt.js\n    - Vue.js\n    - TypeScript\n---\n\n# Sharing components between multiple Nuxt projects\n\n_{{$document.published}} • {{$document.readTime}} min read — by **[{{$document.author}}](/)**_\n\n::tag-pills{:tags=\"articleTags\"}\n::\n\n![Landing Image](https://res.cloudinary.com/suv4o/image/upload/q_auto,f_auto,w_750,e_sharpen:100/v1666399302/blog/nuxt-extends/nuxt-extends)\n\nNuxt 3 and its new foundation come with many powerful new features, such as the new server engine <a href=\"https://v3.nuxtjs.org/guide/concepts/server-engine/\" target=\"_blank\" rel=\"noopener noreferrer\">Nitro</a> that made the framework lighter and faster and supported by Vue's 3 Composition API and Vite.\n\nBut one of Nuxt's features that not many people talk about is the ability to merge two or more applications and share functionalities between them. The <a href=\"https://v3.nuxtjs.org/api/configuration/nuxt-config/#extends\" target=\"_blank\" rel=\"noopener noreferrer\">extends</a> feature in Nuxt 3 allows us to set a relative config path or remote git repositories such as GitHub, GitLab, Bitbucket or https:// pointing to the source directories of a project.\n\nThis feature is a perfect use case for complex projects such us developing applications with a few different pieces, for example, an Admin and a User area that are designed separately but share the same components.\n\nLet's see how this works with an example.\n\n## Setting up a base Nuxt 3 project\n\nCreate a new Nuxt project:\n\n```bash\nnpx nuxi init nuxt-base\n```\n\nNavigate to the `nuxt-base` directory and install the dependencies:\n\n```bash\ncd nuxt-base\nnpm install\n```\n\nWe will come back to this project a bit later. Next, let's create the other Nuxt project `nuxt-components`.\n\n## Setting up a second Nuxt 3 project\n\nLet's repeat what we've done previously with the new project.\n\n```bash\nnpx nuxi init nuxt-components\ncd nuxt-components\nnpm install\n```\n\nWe should create both projects in the same folder:\n\n```plain\n/root\n\t/nuxt-base\n\t\tapp.vue\n\t\tnuxt.config.ts\n\t\tpackage.json\n\t\t...\n\t/nuxt-components\n\t\tapp.vue\n\t\tnuxt.config.ts\n\t\tpackage.json\n\t\t...\n```\n\nWe will create a directory called components in the root of the `nuxt-components` project. Inside we will add two `.vue` files:\n\n`random-message.vue` containing the following code:\n\n```js\n<template>\n    <div>\n        <h1>{{ msg }}</h1>\n        <button @click=\"changeMsg\">Generate a Message</button>\n    </div>\n</template>\n\n<script setup>\nimport { ref } from \"vue\";\nconst msg = ref(\"\");\nconst changeMsg = () => {\n    msg.value = makeid(getRandomInt(100));\n};\n\nfunction makeid(length) {\n    var result = \"\";\n    var characters = \"ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789\";\n    var charactersLength = characters.length;\n    for (var i = 0; i < length; i++) {\n        result += characters.charAt(Math.floor(Math.random() * charactersLength));\n    }\n    return result;\n}\n\nfunction getRandomInt(max) {\n    return Math.floor(Math.random() * max);\n}\n</script>\n```\n\nAnd `random-word.vue` containing the following code:\n\n```js\n<template>\n    <div>\n        <h1>{{ word }}</h1>\n        <button @click=\"generateRandomWord\">Generate a Word</button>\n    </div>\n</template>\n\n<script setup>\nimport { ref } from \"vue\";\nimport randomWords from \"random-words\";\n\nconst word = ref(\"\");\n\nfunction generateRandomWord() {\n    word.value = randomWords();\n}\n</script>\n```\n\nWe also need to install the `random-word` npm package so let's do it:\n\n```bash\nnpm install random-words\n```\n\nThe idea with these two components we just created above is to use them in our `nuxt-base` project.\n\nBefore we move to the `next-base` project again, let's add configuration in the `nuxt.config.ts` file:\n\n```ts\nexport default defineNuxtConfig({\n    components: [{ path: \"./components\", prefix: \"UI\" }],\n});\n```\n\nWe added a prefix `UI` to all components in the `/components` directory. We can use these two components like this:\n\n```ts\n<UIRandomMessage />\n<UIRandomWord />\n```\n\n## Adding `random-message.vue` and `random-word.vue` to the `nuxt-base` project\n\nIn the `app.vue` file inside the `nuxt-base` project, we will use `random-message.vue` and `random-word.vue` components.\n\nOur `app.vue` file should look like the following:\n\n```js\n<template>\n    <div>\n        <UIRandomMessage />\n        <UIRandomWord />\n    </div>\n</template>\n```\n\nNext, we need to tell Nuxt that we want to extend our `nuxt-base` project with `nuxt-components`. We can do so by adding the following in the `nuxt.config.ts` file:\n\n```ts\nexport default defineNuxtConfig({\n    components: true,\n    extends: [\"../nuxt-components\"],\n});\n```\n\nAnd that's it. We can run our application and see two components in action:\n\n```bash\nnpm run dev\n```\n\n![blog hero image](https://res.cloudinary.com/suv4o/image/upload/v1666403383/blog/nuxt-extends/nuxt-extends-640gif_ryloin)\n\n## Generate static site\n\nOur application works as expected, running locally on our dev server. However, there is one problem if we try to generate statically. If we run `npm run generate`, we will get the following error:\n\n```bash\nERROR  [vite]: Rollup failed to resolve import \"vue/server-renderer\" from \"../nuxt-components/components/random-message.vue\".\nThis is most likely unintended because it can break your application at runtime.\nIf you do want to externalize this module explicitly add it to\n`build.rollupOptions.external`\n```\n\nTo fix this issue, we need to create a `vite.config.ts` file in the root of our `nuxt-base` project and add the following code:\n\n```bash\nimport { defineConfig } from \"vite\";\n\nexport default defineConfig({\n    build: {\n        rollupOptions: {\n            external: [\"vue/server-renderer\"],\n        },\n    },\n});\n```\n\nThat's it. Now we can generate our `nuxt-base` app without any problems.\n\nAll examples above can be found in the following Github repositories: <a href=\"https://github.com/Suv4o/nuxt-extends-example\" target=\"_blank\" rel=\"noopener noreferrer\">`nuxt-base`</a>, <a href=\"https://github.com/Suv4o/nuxt-component-generate-message\" target=\"_blank\" rel=\"noopener noreferrer\">`nuxt-components`</a>.\n\n## Conclusion\n\n1. One of Nuxt's features that not many people talk about is the ability to merge two or more applications and share functionalities between them. A perfect use case will be designing an Admin and a User area that are developed separately but share the same components.\n2. We can merge multiple projects by using the <a href=\"https://v3.nuxtjs.org/api/configuration/nuxt-config/#extends\" target=\"_blank\" rel=\"noopener noreferrer\">extends</a> feature in Nuxt 3.\n3. The extends feature allows us to set a relative config path or remote git repositories such as GitHub, GitLab, Bitbucket or https:// pointing to the source directories of a project.\n4. To use another project inside our Nuxt app, we need to include the project's path in the `nuxt.config.ts` file.\n5. To generate our project statically, we need to add `\"vue/server-renderer\"` to our `vite.config.ts` file.\n"
  },
  {
    "articlePath": "/2023/03/19/setting-up-global-variables-in-the-rest-client-vs-code-extension",
    "embeddings": [
      0.0023854002356529236,
      0.04320240393280983,
      -0.017598656937479973,
      0.05562082305550575,
      0.045217737555503845,
      -0.022358549758791924,
      -0.08024068921804428,
      0.04086034372448921,
      0.02571231499314308,
      0.021615158766508102,
      0.025520937517285347,
      -0.012530740350484848,
      0.03551734238862991,
      0.044567082077264786,
      0.11450770497322083,
      0.0735134705901146,
      0.054521191865205765,
      -0.015452067367732525,
      -0.010082033462822437,
      0.009971844032406807,
      0.05388856679201126,
      0.019837593659758568,
      0.01599506288766861,
      -0.019282061606645584,
      -0.031197460368275642,
      -0.028872041031718254,
      -0.073961541056633,
      0.03234594315290451,
      -0.037360116839408875,
      0.013427809812128544,
      0.05945013836026192,
      0.038595493882894516,
      -0.13164663314819336,
      0.00033196364529430866,
      0.013540761545300484,
      0.09796673059463501,
      0.020953672006726265,
      -0.0881117582321167,
      -0.00023143865109886974,
      0.029405543580651283,
      0.005269918125122786,
      0.06851652264595032,
      -0.09806109219789505,
      -0.0837591364979744,
      0.037956755608320236,
      -0.04826873168349266,
      0.014188343659043312,
      -0.01915079914033413,
      -0.09661644697189331,
      -0.006994881667196751,
      0.05222247913479805,
      -0.08630412817001343,
      -0.08264924585819244,
      0.02263692393898964,
      0.021990839391946793,
      -0.04635443165898323,
      -0.051085010170936584,
      0.06574150174856186,
      0.015217519365251064,
      0.02369346283376217,
      0.030304554849863052,
      -0.04404054582118988,
      0.03444664552807808,
      -0.03908922150731087,
      0.014146101661026478,
      -0.0033351117745041847,
      -0.05834558233618736,
      0.0025563628878444433,
      -0.03858992084860802,
      -0.0421072319149971,
      -0.0198559258133173,
      -0.013430049642920494,
      -0.01990032009780407,
      -0.0794394388794899,
      0.03314834088087082,
      -0.05386899411678314,
      -0.0009145154035650194,
      -0.006621283479034901,
      0.047348637133836746,
      -0.1109752357006073,
      0.03295275196433067,
      -0.0008558904519304633,
      -0.0495070144534111,
      0.018260588869452477,
      0.04148929566144943,
      0.032996393740177155,
      0.014156995341181755,
      -0.030342841520905495,
      0.02173157036304474,
      -0.0322987399995327,
      -0.04810915142297745,
      -0.14901235699653625,
      -0.045188918709754944,
      -0.003844054415822029,
      0.09958506375551224,
      -0.02706003747880459,
      -0.05959279090166092,
      -0.019771795719861984,
      0.008094601333141327,
      0.02154475636780262,
      0.026924287900328636,
      -0.094854436814785,
      0.060855794697999954,
      0.029282910749316216,
      0.1408030241727829,
      -0.018859634175896645,
      0.0766468420624733,
      0.06993092596530914,
      -0.05974259227514267,
      -0.017190011218190193,
      -0.055229779332876205,
      0.11831431835889816,
      -0.022727811709046364,
      -0.0495450533926487,
      0.008994822390377522,
      0.07972613722085953,
      0.10239655524492264,
      0.015356709249317646,
      0.01411706954240799,
      0.021771525964140892,
      0.06860485672950745,
      -0.03455552086234093,
      0.018520675599575043,
      0.030987141653895378,
      0.054670367389917374,
      -0.06463395804166794,
      0.06468481570482254,
      5.819803837970019e-33,
      0.076446533203125,
      -0.06721734255552292,
      -0.01858009211719036,
      0.021562349051237106,
      0.04121468588709831,
      -0.008506274782121181,
      0.09225427359342575,
      0.02821778878569603,
      -0.029134465381503105,
      -0.05977144092321396,
      -0.03269314393401146,
      0.06890801340341568,
      0.007073894143104553,
      0.0638183057308197,
      -0.021152008324861526,
      0.010387612506747246,
      -0.009477152489125729,
      0.07594892382621765,
      0.06741269677877426,
      0.0006115889409556985,
      0.013287064619362354,
      -0.0068617770448327065,
      -0.030618833377957344,
      0.03984777629375458,
      0.030926084145903587,
      -0.004714726470410824,
      0.008597088977694511,
      -0.03180467337369919,
      -0.09257794916629791,
      -0.025657519698143005,
      0.045443348586559296,
      0.0250746700912714,
      0.0334952287375927,
      0.09445733577013016,
      -0.014745601452887058,
      -0.018742049112915993,
      -0.045081913471221924,
      0.019160227850079536,
      -0.10775457322597504,
      0.03579060360789299,
      0.09129802137613297,
      0.026427581906318665,
      -0.040083061903715134,
      -0.03163313493132591,
      -0.053495634347200394,
      -0.060770850628614426,
      -0.043767064809799194,
      0.009232021868228912,
      -0.012184365652501583,
      -0.04149732366204262,
      -0.09908266365528107,
      0.07132014632225037,
      -0.014725336804986,
      -0.05402195826172829,
      0.010557424277067184,
      -0.03725500777363777,
      -0.018387645483016968,
      -0.03514227643609047,
      -0.06518331915140152,
      -0.10251008719205856,
      -0.05596492439508438,
      -0.019751051440835,
      0.017924245446920395,
      0.0039924923330545425,
      0.08244773000478745,
      0.018702849745750427,
      0.03405587375164032,
      0.08674696832895279,
      0.030213737860322,
      -0.023495011031627655,
      -0.022015534341335297,
      0.058525435626506805,
      -0.004339176695793867,
      -0.04112756624817848,
      0.051489219069480896,
      -0.10139424353837967,
      -0.008539825677871704,
      0.08180585503578186,
      0.03613553196191788,
      -0.0412883497774601,
      0.003989474382251501,
      0.022451911121606827,
      -0.09941962361335754,
      0.028761230409145355,
      -0.06300652027130127,
      0.053344450891017914,
      0.04428981617093086,
      -0.09368211030960083,
      -0.05508396029472351,
      -0.014927112497389317,
      0.008283321745693684,
      0.00907790195196867,
      0.034440793097019196,
      -0.11624973267316818,
      -0.0073084537871181965,
      -5.6350194320986174e-33,
      0.07629324495792389,
      -0.037021175026893616,
      -0.011936364695429802,
      0.06906838715076447,
      0.022384991869330406,
      0.005747749004513025,
      0.07769504189491272,
      0.035364359617233276,
      -0.029108786955475807,
      -0.0061870152130723,
      -0.010864266194403172,
      -0.0129287950694561,
      -0.07296063750982285,
      0.025754522532224655,
      -0.027778688818216324,
      0.07210447639226913,
      -0.1287134736776352,
      -0.059558358043432236,
      0.09828270226716995,
      -0.0016605185810476542,
      -0.008402364328503609,
      0.04551537334918976,
      0.08255790174007416,
      -0.026361722499132156,
      0.01936119981110096,
      0.012644962407648563,
      -0.05298430472612381,
      -0.0038505294360220432,
      -0.002644515363499522,
      -0.06834635883569717,
      -0.02218230441212654,
      0.0181408878415823,
      -0.08254140615463257,
      0.001577218878082931,
      -0.005049414932727814,
      -0.007183053996413946,
      -0.009852215647697449,
      0.11260013282299042,
      0.008643425069749355,
      0.07943346351385117,
      0.06133337318897247,
      -0.03805302828550339,
      -0.012314618565142155,
      0.03386803716421127,
      0.025572383776307106,
      -0.008354664780199528,
      0.00971923116594553,
      -0.02059721015393734,
      -0.03957873582839966,
      0.017496764659881592,
      -0.012904936447739601,
      -0.06592614948749542,
      -0.0915556326508522,
      0.03037969395518303,
      -0.03371168300509453,
      -0.03715820983052254,
      0.06254524737596512,
      -0.07048335671424866,
      -0.10255474597215652,
      -0.01972191594541073,
      0.059503983706235886,
      -0.03008483164012432,
      0.0025911927223205566,
      0.033678311854600906,
      -0.03170199319720268,
      -0.040312446653842926,
      -0.06998753547668457,
      -0.08356990665197372,
      -0.028886836022138596,
      -0.044072818011045456,
      -0.059962768107652664,
      -0.09906073659658432,
      0.05862203985452652,
      -0.04578057676553726,
      0.014855663292109966,
      -0.011581952683627605,
      0.04942942410707474,
      -0.06581877171993256,
      0.050134479999542236,
      -0.010970775969326496,
      -0.15916796028614044,
      -0.05267539247870445,
      -0.01622758060693741,
      0.03620610758662224,
      -0.040787387639284134,
      0.030291834846138954,
      -0.05829727277159691,
      0.09450363367795944,
      -0.013878551311790943,
      -0.003320983611047268,
      -0.007318547926843166,
      -0.015330091118812561,
      -0.028356144204735756,
      -0.02729516476392746,
      -0.002427802886813879,
      -6.015410747295391e-8,
      -0.0639597475528717,
      0.07259014248847961,
      -0.0788242369890213,
      0.0063872626051306725,
      -0.09558814018964767,
      0.060557857155799866,
      0.07408174127340317,
      0.039403293281793594,
      0.03423831984400749,
      0.02820526622235775,
      0.02827918715775013,
      0.041105978190898895,
      0.02732423134148121,
      0.02132677286863327,
      -0.03684942424297333,
      -0.037185195833444595,
      0.03303242102265358,
      -0.004198669455945492,
      -0.022081386297941208,
      -0.01589016616344452,
      -0.021661007776856422,
      0.023430272936820984,
      0.02614167518913746,
      -0.0553598627448082,
      0.09888122975826263,
      0.07195601612329483,
      -0.027697907760739326,
      0.05028955638408661,
      -0.003909907303750515,
      -0.03420823812484741,
      0.06551118195056915,
      0.03415340557694435,
      -0.010493909940123558,
      0.04550839960575104,
      -0.005797478370368481,
      -0.0035959158558398485,
      0.003505118191242218,
      0.04033515974879265,
      -0.04200393706560135,
      0.10053545981645584,
      0.053015194833278656,
      -0.03217542916536331,
      -0.050440192222595215,
      -0.002378318225964904,
      0.07702281326055527,
      -0.011391684412956238,
      0.1011897623538971,
      0.00668102502822876,
      0.016537336632609367,
      0.05491770803928375,
      -0.02349577285349369,
      -0.041703961789608,
      0.024994201958179474,
      0.023146266117691994,
      0.059713758528232574,
      0.016276810318231583,
      0.08509170264005661,
      -0.07794161885976791,
      0.05142956227064133,
      0.06293001770973206,
      -0.004113889764994383,
      -0.0345287024974823,
      0.0026467537973076105,
      0.05126991868019104
    ],
    "content": "---\ntitle: Setting up global variables in the REST Client VS Code extension\ndescription: REST Client is a Visual Studio Code (VS Code) extension that allows you to send HTTP requests and view the responses directly in VS Code. In the past, my go-to application for testing my REST API endpoints was Postman. Postman has many advanced features that cannot be completely replaced with the REST Client extension. However, since you need to switch between two different apps (VS Code and Postman), I find REST Client to be more convenient 90% of the time I test my endpoints. In this brief blog article, I will explain how to set up global variables that can be reused in different environments within the REST Client extension.\nimage: https://res.cloudinary.com/suv4o/image/upload/q_auto,f_auto,w_1200,e_sharpen:100/v1679178671/blog/setting-up-global-variables-in-the-rest-client-vs-code-extension/hero-image_wywhks\nkeywords:\n    - Setting up global variables in the REST Client VS Code extension\n    - VS Code\n    - Extension\n    - Request\n    - Postman\n    - HTTP\ntype: page\nblog: post\npublished: 19th Mar 2023\nreadTime: 5\nauthor: Aleksandar Trpkovski\narticleTags:\n    - VSCode\n    - BackEnd\n    - Other\n---\n\n# Setting up global variables in the REST Client VS Code extension\n\n_{{$document.published}} • {{$document.readTime}} min read — by **[{{$document.author}}](/)**_\n\n::tag-pills{:tags=\"articleTags\"}\n::\n\n![Landing Image](https://res.cloudinary.com/suv4o/image/upload/q_auto,f_auto,w_750,e_sharpen:100/v1679178671/blog/setting-up-global-variables-in-the-rest-client-vs-code-extension/hero-image_wywhks)\n\nREST Client is a Visual Studio Code (VS Code) extension (<a href=\"https://marketplace.visualstudio.com/items?itemName=humao.rest-client\" target=\"_blank\" rel=\"noopener noreferrer\">link</a>) that allows you to send HTTP requests and view the responses directly in VS Code.\n\nIn the past, my go-to application for testing my REST API endpoints was Postman (<a href=\"https://www.postman.com/\" target=\"_blank\" rel=\"noopener noreferrer\">link</a>). Postman has many advanced features that cannot be completely replaced with the REST Client extension. However, since you need to switch between two different apps (VS Code and Postman), I find REST Client to be more convenient 90% of the time I test my endpoints.\n\nIn this brief blog article, I will explain how to set up global variables that can be reused in different environments within the REST Client extension.\n\n## Add the REST Client extension\n\nFirst, we need to install the REST Client extension for Visual Studio Code. To do so, navigate to the Extensions icon on the left-hand side of VS Code and search for \"**REST Client**\" in the search input. Install the extension, and then restart VS Code.\n\n![search for the REST Client Extension in Marketplace in VSCode](https://res.cloudinary.com/suv4o/image/upload/q_auto,f_auto,w_850,e_sharpen:100/v1679177436/blog/setting-up-global-variables-in-the-rest-client-vs-code-extension/Image_-_1_p0uea1)\n\n## Create a `.http` file\n\nTo use this extension, create a file with a `.http` extension in any location in the project. Let's create a file called `request.server.http` in the root of our project.\n\nInside the file, we'll create two requests: a `GET` request and a `POST` request. Both requests will have an Authorisation header with a bearer token.\n\n```http\n### Get list of users\nGET http://localhost:3000/api/users HTTP/1.1\nContent-Type: application/json\nAuthorization: Bearer L8qq9PZyRg6ieKGEKhZolGC0vJWLw8iEJ88DRdyOg\n\n{}\n\n### Create a user\nPOST http://localhost:3000/api/create-user HTTP/1.1\nContent-Type: application/json\nAuthorization: Bearer L8qq9PZyRg6ieKGEKhZolGC0vJWLw8iEJ88DRdyOg\n\n{\n    \"email\": \"test@test.com\",\n    \"firstName\": \"Foo\",\n    \"lastName\": \"Bar\"\n}\n```\n\nIn the code above, we make two requests: one to list all users and another to create a new user. However, there is a lot of repetitive code. For example, it would be nice to store the `http://localhost:3000/api` URL and the `token` as global variables, which could then be reused throughout the code. Additionally, the token and URL may vary depending on the environment (e.g. local, staging, or production), so we need to be able to set different values for each environment.\n\nTo do this, we can set these variables in our VS Code and then replace them in our `request.server.http` file.\n\n## Create global variables\n\nIf you haven't done so already, create a directory called `.vscode` at the root of the project. Inside this directory, create a file called `settings.json`. In this file, add the following:\n\n```json\n{\n    \"rest-client.environmentVariables\": {\n        \"local\": {\n            \"baseUrl\": \"http://localhost:3000/api\",\n            \"token\": \"L8qq9PZyRg6ieKGEKhZolGC0vJWLw8iEJ88DRdyOg\"\n        },\n        \"staging\": {\n            \"baseUrl\": \"http://localhost:3001/api\",\n            \"token\": \"eyJhbGciOiJIUzI1NiJ9eyJSb2xlIjoiQWRtaW4if\"\n        },\n        \"production\": {\n            \"baseUrl\": \"http://localhost:3002/api\",\n            \"token\": \"c3N1ZXIiLCJVc2VybmFtZSI6IkphdmFJblVzZSIsI\"\n        }\n    }\n}\n```\n\nAs we can see from the `JSON` file above, we added `baseUrl` and `token` variables with different values for each environment: local, staging, and production.\n\nNext, let's see how we can use those variables inside the `request.server.http` file.\n\n## Replace hard-coded values with global variables\n\nNow that we have set our global variables, let's add them to the `request.server.http` file.\n\n```http\n### Get list of users\nGET {{baseUrl}}/users HTTP/1.1\nContent-Type: application/json\nAuthorization: Bearer {{token}}\n\n{}\n\n### Create a user\nPOST {{baseUrl}}/api/create-user HTTP/1.1\nContent-Type: application/json\nAuthorization: Bearer {{token}}\n\n{\n    \"email\": \"test@test.com\",\n    \"firstName\": \"Foo\",\n    \"lastName\": \"Bar\"\n}\n```\n\nThe last thing we need to do is choose the environment on which we want to test those requests. We can do this by calling up the Command Palette (Ctrl+Shift+P) and typing \"**Rest Client: Switch Environment**\", and then selecting the environment we want the values to be set to.\n\n![Switch Variable for and Environment in REST Client](https://res.cloudinary.com/suv4o/image/upload/q_auto,f_auto,w_850,e_sharpen:100/v1679177434/blog/setting-up-global-variables-in-the-rest-client-vs-code-extension/Image_-_2_pma4vb)\n\n![Choose Environment in REST Client](https://res.cloudinary.com/suv4o/image/upload/q_auto,f_auto,w_850,e_sharpen:100/v1679177434/blog/setting-up-global-variables-in-the-rest-client-vs-code-extension/Image_-_3_lwn8ch.png)\n\nAnd that's it, we can now choose the testing environment we want within seconds.\n\n## Conclusion\n\nThe REST Client VS Code extension is a handy tool for testing REST API endpoints. Although it may not have all the advanced features of Postman, it is convenient to use since it is integrated into VS Code. I frequently use this extension and find setting global variables to be a big time-saver. This article outlines the steps to quickly set up and use global variables for several different environments in the REST Client extension. I hope you find this article helpful.\n"
  },
  {
    "articlePath": "/2023/04/02/single-sign-on-with-firebase-authentication-across-multiple-domains",
    "embeddings": [
      -0.042093243449926376,
      -0.019098760560154915,
      -0.0911155641078949,
      -0.0022946640383452177,
      0.06139545887708664,
      -0.05225237458944321,
      0.03360816091299057,
      0.01900998130440712,
      0.03157229349017143,
      -0.05713165923953056,
      -0.05499981716275215,
      0.0033177798613905907,
      0.08577869832515717,
      0.0815148651599884,
      0.07787176221609116,
      0.05008845031261444,
      -0.037633948028087616,
      0.06372583657503128,
      -0.02061241865158081,
      0.000603332242462784,
      0.02252507209777832,
      -0.020345687866210938,
      0.0017463925760239363,
      0.054035868495702744,
      -0.043680354952812195,
      -0.044839777052402496,
      -0.03436450660228729,
      -0.03229927271604538,
      -0.08775656670331955,
      0.004685949068516493,
      0.10755851864814758,
      0.007848966866731644,
      -0.12837336957454681,
      0.013622887432575226,
      -0.004325890447944403,
      -0.010944209061563015,
      -0.028163611888885498,
      0.013945749960839748,
      -0.015262776985764503,
      -0.029015328735113144,
      0.01625160127878189,
      0.014118773862719536,
      -0.049695637077093124,
      -0.023078616708517075,
      -0.046247418969869614,
      -0.003676839405670762,
      -0.07783107459545135,
      0.03759416565299034,
      0.016601869836449623,
      0.03232404217123985,
      0.01938384398818016,
      -0.06981028616428375,
      -0.02865559235215187,
      0.0801861509680748,
      -0.04169082269072533,
      0.054539863020181656,
      -0.06109084561467171,
      0.04486202448606491,
      0.025127122178673744,
      0.03039192222058773,
      -0.0047132582403719425,
      -0.07512573152780533,
      0.019750656560063362,
      -0.010013354942202568,
      0.06484109163284302,
      0.05954977869987488,
      0.009743432514369488,
      -0.03561989590525627,
      -0.037067387253046036,
      0.047109369188547134,
      0.03799724951386452,
      0.0511961355805397,
      -0.051530253142118454,
      -0.06294222921133041,
      0.025899676606059074,
      -0.0459914356470108,
      -0.07397876679897308,
      0.03655856475234032,
      -0.02774478867650032,
      -0.14067581295967102,
      -0.015094459988176823,
      -0.06410625576972961,
      -0.01646122895181179,
      -0.0025878981687128544,
      0.026417545974254608,
      -0.0013572542229667306,
      -0.03657277673482895,
      -0.045273762196302414,
      0.0768410786986351,
      0.04964888095855713,
      -0.00961476843804121,
      0.016554484143853188,
      0.045176777988672256,
      -0.03592603653669357,
      -0.005448997486382723,
      -0.032364729791879654,
      -0.0012807814637199044,
      0.0658632442355156,
      -0.010883362963795662,
      -0.0024997584987431765,
      -0.04767439514398575,
      0.029308028519153595,
      0.054251883178949356,
      -0.008539386093616486,
      0.15091164410114288,
      -0.04712546989321709,
      0.01027271244674921,
      -0.0335136353969574,
      0.04064823314547539,
      0.009731714613735676,
      0.016640469431877136,
      0.07014825940132141,
      0.010336585342884064,
      0.0339636467397213,
      -0.0036076216492801905,
      0.07670807093381882,
      0.08851920068264008,
      -0.02775629237294197,
      0.055225953459739685,
      0.07153933495283127,
      0.03426089882850647,
      -0.010042248293757439,
      0.01767568103969097,
      -0.012159108184278011,
      0.02301223948597908,
      -0.05536450445652008,
      0.004708205349743366,
      6.078630428947809e-33,
      0.02559094876050949,
      0.02315112017095089,
      -0.039193782955408096,
      -0.0002737517061177641,
      0.026143839582800865,
      0.0014917650260031223,
      -0.01849803701043129,
      -0.02501472271978855,
      -0.11178305000066757,
      0.02173588052392006,
      -0.02278696559369564,
      0.12896373867988586,
      0.03630714863538742,
      -0.0843416303396225,
      0.04563969746232033,
      0.002576884115114808,
      -0.04248926788568497,
      0.044571202248334885,
      0.11930502206087112,
      0.09696009010076523,
      0.02866632491350174,
      -0.006306166760623455,
      0.004145125858485699,
      0.05636962875723839,
      -0.023078514263033867,
      0.004468100611120462,
      0.017063334584236145,
      -0.014215197414159775,
      -0.034263864159584045,
      -0.008850661106407642,
      -0.017726490274071693,
      0.017949886620044708,
      -0.01563817635178566,
      0.015892578288912773,
      0.03988154977560043,
      -0.06045042350888252,
      0.021518249064683914,
      -0.008193348534405231,
      -0.03691394254565239,
      -0.08678118139505386,
      0.0010780049487948418,
      -0.014362236484885216,
      -0.00604169350117445,
      -0.013853293843567371,
      -0.028997065499424934,
      -0.04026263952255249,
      -0.04363704472780228,
      0.05518345907330513,
      0.10787215828895569,
      -0.007127512712031603,
      -0.05764148756861687,
      -0.006258608773350716,
      -0.026764744892716408,
      -0.09954097121953964,
      0.009659433737397194,
      -0.05410638451576233,
      -0.11079566925764084,
      0.03605271875858307,
      0.0212229173630476,
      -0.03939450904726982,
      -0.03773528337478638,
      -0.01832147315144539,
      -0.035367317497730255,
      -0.034323129802942276,
      0.0020459722727537155,
      -0.014357260428369045,
      -0.01801302656531334,
      0.0450841523706913,
      0.02795439586043358,
      -0.0501444935798645,
      0.003951991442590952,
      0.04341872036457062,
      0.017705731093883514,
      -0.021605048328638077,
      -0.038830749690532684,
      -0.054237961769104004,
      0.013386039063334465,
      0.05894551798701286,
      0.009436702355742455,
      0.040117379277944565,
      0.004222119227051735,
      -0.03131229802966118,
      -0.1180305927991867,
      0.11786855012178421,
      -0.06389501690864563,
      0.03532296046614647,
      0.052480924874544144,
      -0.09738465398550034,
      -0.18495099246501923,
      0.029022276401519775,
      0.036360569298267365,
      0.02454800345003605,
      0.1548043042421341,
      -0.04303024336695671,
      -0.0008476770599372685,
      -5.653388000698154e-33,
      0.029732443392276764,
      -0.09828130900859833,
      0.014624347910284996,
      0.08170083910226822,
      0.053080521523952484,
      0.048279836773872375,
      0.05561985820531845,
      0.004318448714911938,
      -0.04432694613933563,
      -0.03946804627776146,
      0.026028288528323174,
      -0.03117525205016136,
      -0.04303290694952011,
      -0.010112781077623367,
      -0.030838370323181152,
      0.04557386785745621,
      0.027866892516613007,
      -0.018820801749825478,
      0.034881073981523514,
      0.0001919586065923795,
      0.0095124626532197,
      0.04747454822063446,
      -0.038974881172180176,
      0.10837054997682571,
      0.0009080987074412405,
      0.06710128486156464,
      -0.06379491090774536,
      0.01028574351221323,
      -0.06845495104789734,
      -0.0402224026620388,
      -0.05275990441441536,
      0.02111891657114029,
      -0.03651132434606552,
      -0.025967830792069435,
      -0.01212222594767809,
      -0.04991891607642174,
      -0.008947144262492657,
      0.125922292470932,
      0.007924618199467659,
      0.013875980861485004,
      0.044199056923389435,
      0.01133088767528534,
      -0.0394354946911335,
      -0.01040318701416254,
      0.020550109446048737,
      0.05385713279247284,
      0.02203499525785446,
      0.034935060888528824,
      -0.09408342838287354,
      0.09978386759757996,
      0.005881389137357473,
      -0.05767503008246422,
      -0.08317069709300995,
      -0.03678373247385025,
      -0.06265575438737869,
      -0.09751960635185242,
      0.040502212941646576,
      -0.03846347704529762,
      -0.023146936669945717,
      -0.011256171390414238,
      0.06907004117965698,
      -0.10225555300712585,
      0.04391929507255554,
      0.10017066448926926,
      -0.002596080768853426,
      -0.050018880516290665,
      -0.011655203998088837,
      0.07270578294992447,
      -0.030721750110387802,
      0.10050524771213531,
      -0.03318607062101364,
      -0.038259781897068024,
      0.11336376518011093,
      0.00476804468780756,
      0.031097736209630966,
      -0.016131412237882614,
      0.09458326548337936,
      -0.11417613178491592,
      -0.003693381790071726,
      -0.00655845832079649,
      -0.09605374187231064,
      0.05308544635772705,
      -0.0598614402115345,
      0.011458918452262878,
      -0.0030025632586330175,
      -0.01888132281601429,
      -0.05818835273385048,
      0.06454408168792725,
      0.009773517027497292,
      0.04557983949780464,
      -0.04537859931588173,
      0.05042790248990059,
      -0.00450511509552598,
      -0.06632378697395325,
      -0.009980135597288609,
      -5.1243599585859556e-8,
      0.04369335621595383,
      0.030300280079245567,
      -0.05564863234758377,
      -0.02210240066051483,
      -0.023089393973350525,
      -0.027071483433246613,
      -0.0023544838186353445,
      -0.02631225809454918,
      -0.06326165795326233,
      -0.06455427408218384,
      0.006462287623435259,
      0.10736898332834244,
      0.03246929869055748,
      0.010905751027166843,
      -0.07671573758125305,
      -0.019639628008008003,
      0.03703131526708603,
      -0.05286240205168724,
      -0.04044980928301811,
      -0.03853471577167511,
      -0.02338642254471779,
      0.010599675588309765,
      0.02343752235174179,
      -0.04796801880002022,
      -0.02527376264333725,
      0.09767679870128632,
      -0.03579714149236679,
      -0.02336672879755497,
      0.050954002887010574,
      0.0005249460809864104,
      -0.02191646583378315,
      -0.02596960961818695,
      -0.0173040721565485,
      -0.043027058243751526,
      -0.009514245204627514,
      -0.004090525209903717,
      0.007553224917501211,
      -0.02071969211101532,
      -0.07306818664073944,
      0.02261180616915226,
      0.04753434658050537,
      0.0005648555234074593,
      -0.01687408797442913,
      -0.02994239516556263,
      0.020493056625127792,
      -0.022749483585357666,
      0.04580584540963173,
      0.04289183020591736,
      0.13454687595367432,
      0.04799796640872955,
      -0.027046551927924156,
      -0.024470632895827293,
      0.06383073329925537,
      0.07728932797908783,
      0.06740105152130127,
      -0.06781791895627975,
      0.026852773502469063,
      -0.0733487531542778,
      0.13116319477558136,
      -0.0025577880442142487,
      0.06776953488588333,
      -0.0563121922314167,
      0.020930038765072823,
      0.07083816826343536
    ],
    "content": "---\ntitle: Single Sign On (SSO) with Firebase Authentication across multiple domains\ndescription: Firebase is a great platform that offers a wide range of services to developers, making it easy to build, improve, and grow their apps. One of these services is Firebase Auth, which allows for easy user authentication using its JavaScript SDK. Despite Firebase Auth being an awesome service and abstracting a lot of the complex code needed to build user authentication, I recently found one limitation. Firebase Auth doesn't persist the session across multiple domains. This means that if we use the same Firebase Auth for two different domains, such as https://example1.com and https://example2.com, we have to sign in to both applications on both domains independently. Currently, Firebase doesn't have a built-in feature to handle this situation out of the box.\nimage: https://res.cloudinary.com/suv4o/image/upload/q_auto,f_auto,w_1200,e_sharpen:100/v1680413367/blog/single-sign-on-with-firebase-authentication-across-multiple-domains/SSO-with-firebase-authentication-across-multiple-domains_nil2ba\nkeywords:\n    - Single Sign On (SSO) with Firebase Authentication across multiple domains\n    - Firebase\n    - VS Code\n    - SSO\n    - Authentication\n    - Workaround\n    - iframe\n    - persist session\n    - multiple domains\ntype: page\nblog: post\npublished: 2nd April 2023\nreadTime: 11\nauthor: Aleksandar Trpkovski\narticleTags:\n    - Firebase\n    - Vite\n    - TypeScript\n---\n\n# Single Sign On (SSO) with Firebase Authentication across multiple domains\n\n_{{$document.published}} • {{$document.readTime}} min read — by **[{{$document.author}}](/)**_\n\n::tag-pills{:tags=\"articleTags\"}\n::\n\n![Landing Image](https://res.cloudinary.com/suv4o/image/upload/q_auto,f_auto,w_750,e_sharpen:100/v1680413367/blog/single-sign-on-with-firebase-authentication-across-multiple-domains/SSO-with-firebase-authentication-across-multiple-domains_nil2ba)\n\n<a href=\"https://firebase.google.com/\" target=\"_blank\" rel=\"noopener noreferrer\">Firebase</a> is a great platform that offers a wide range of services to developers, making it easy to build, improve, and grow their apps. One of these services is Firebase Auth, which allows for easy user authentication using its JavaScript SDK.\n\nDespite Firebase Auth being an awesome service and abstracting a lot of the complex code needed to build user authentication, I recently found one limitation: Firebase Auth doesn't persist the session across multiple domains. This means that if we use the same Firebase Auth for two different domains, such as `https://example1.com` and `https://example2.com`, we have to sign in to both applications on both domains independently. Currently, Firebase doesn't have a built-in feature to handle this situation out of the box.\n\nIn the following blog article, we will show a simple workaround to overcome this limitation using an `<iframe>`. We will demonstrate this example by creating three different applications: the first application will be called \"authentication\", where we will create the sign in logic to handle authentication. Then, we will embed the the \"authentication\" app using an iframe within our other two applications. We will use <a href=\"https://vitejs.dev/\" target=\"_blank\" rel=\"noopener noreferrer\">Vite</a> and <a href=\"https://tailwindcss.com/\" target=\"_blank\" rel=\"noopener noreferrer\">Tailwind CSS</a> to help us create the apps more quickly. You don't need to be an expert in these two technologies, but some knowledge of JavaScript, TypeScript, and basic Firebase Auth is recommended in order to follow along. Without wasting too much time, let's get started!\n\n## Create Vite app\n\nWe are planning to create three projects. As mentioned in the introduction, the first project will only focus on authentication logic. The other two projects will include authentication through the iFrame.\n\nTo start, let's create our first application using Vite and set it up with TypeScript. The process of creating a Vite app will be the same for the other two applications.\n\n```bash\nyarn create vite\n```\n\n```bash\n? Project name: › authentication\n\n```\n\n```bash\n? Select a framework: › - Use arrow-keys. Return to submit.\n❯   Vanilla\n    Vue\n    React\n    Preact\n    Lit\n    Svelte\n    Others\n```\n\n```bash\n? Select a variant: › - Use arrow-keys. Return to submit.\nJavaScript\n❯   TypeScript\n```\n\n```bash\ncd authentication\n  yarn\n  yarn dev\n```\n\nNext, we need to create `vite.config.ts` in the root directory of the project and set the port number for our authentication app to run on locally. We will set the port number to `3000` for this project. For the other two projects, we will set the ports to `3001` and `3002`, respectively, so that each project has its own unique port number. Additionally, we need to install a plugin to enable https on `https://localhost:3000`.\n\n```bash\nyarn add @vitejs/plugin-basic-ssl\n```\n\nThe `vite.config.ts` file should resemble the following:\n\n```ts\nimport { defineConfig } from \"vite\";\nimport basicSsl from \"@vitejs/plugin-basic-ssl\";\n\nexport default defineConfig({\n    server: {\n        port: 3000,\n        https: true,\n    },\n    plugins: [basicSsl()],\n});\n```\n\nTo begin building our app, let's first delete all unnecessary files in the project. Within the `/src` folder, we should only keep the `main.ts` file and remove all other logic within it.\n\n## Add Tailwind CSS\n\nTo help us style our application layout, we are going to add Tailwind CSS.\n\n```bash\nyarn add -D tailwindcss\n```\n\n```bash\nnpx tailwindcss init\n```\n\nWe need to add the following `tailwind.config.cjs` inside.\n\n```ts\nmodule.exports = {\n    content: [\"./index.html\", \"./src/**/*.{html,ts}\"],\n    theme: {\n        extend: {},\n    },\n    plugins: [],\n};\n```\n\nNext, we need to create two CSS files: `input.css` and `output.css`, inside the `/assets/tailwind` directory.\n\nInside `input.css`, we are adding the following code:\n\n```css\n@tailwind base;\n@tailwind components;\n@tailwind utilities;\n```\n\nIn `output.css`, we are leaving it empty.\n\nWe need to add the following code snippet inside the `header` section of `index.html`.\n\n```html\n<link href=\"./assets/tailwind/output.css\" rel=\"stylesheet\" />\n```\n\nNext, run the following command in the terminal in parallel with `yarn dev`:\n\n```bash\nnpx tailwindcss -i ./assets/tailwind/input.css -o ./assets/tailwind/output.css --watch\n```\n\n## Add Firebase Auth\n\nNext, we will set up Firebase Auth within our project. Before proceeding, make sure that you have a Firebase account and have created a project in the <a href=\"https://console.firebase.google.com/\" target=\"_blank\" rel=\"noopener noreferrer\">Firebase console</a>.\n\n```bash\nyarn add firebase\n```\n\nCreate an `.env` file in the root of the project with the following variables. You will need to create a project in Firebase and go to project settings to obtain the necessary values.\n\n```plain\nVITE_API_KEY={firebase api key}\nVITE_AUTH_DOMAIN={firebase auth domain}\nVITE_PROJECT_ID={firebase project id}\nVITE_STORAGE_BUCKET={firebase storage bucket}\nVITE_MESSAGING_SENDER_ID={firebase messaging sender id}\nVITE_APP_ID={firebase app id}\n```\n\nNext, create a `firebase.config.ts` file where you'll add the logic for Firebase authentication.\n\n```ts\nimport { initializeApp, FirebaseApp } from \"firebase/app\";\nimport { getAuth } from \"firebase/auth\";\n\nexport default class FirebaseConfig {\n    private firebaseConfig = {\n        apiKey: \"\",\n        authDomain: \"\",\n        projectId: \"\",\n        storageBucket: \"\",\n        messagingSenderId: \"\",\n        appId: \"\",\n    };\n\n    private app: FirebaseApp;\n\n    constructor() {\n        this.firebaseConfig = {\n            apiKey: import.meta.env.VITE_API_KEY,\n            authDomain: import.meta.env.VITE_AUTH_DOMAIN,\n            projectId: import.meta.env.VITE_PROJECT_ID,\n            storageBucket: import.meta.env.VITE_STORAGE_BUCKET,\n            messagingSenderId: import.meta.env.VITE_MESSAGING_SENDER_ID,\n            appId: import.meta.env.VITE_APP_ID,\n        };\n        this.app = initializeApp(this.firebaseConfig);\n    }\n\n    auth() {\n        return getAuth(this.app);\n    }\n}\n```\n\nWe will initialise our Firebase setup in the `main.ts` file.\n\n```ts\nimport FirebaseConfig from \"./firebase.config\";\n\nconst firebase = new FirebaseConfig();\nconst auth = firebase.auth();\n```\n\n## Implement the sign-in logic\n\nIn the `index.html` file, inside the `<body>` HTML tag, create a `<div>` with the class attribute set to `id=\"app\"`.\n\n```html\n<div id=\"app\"></div>\n```\n\nThis class is responsible for rendering the components that we define below.\n\nWe will create a directory called `/components` inside the `/src` folder. Within this directory, we will define the following components:\n\n`sign-in-form.ts`\n\n```html\nexport default function componentSignIn() { return /*html*/ `\n<div class=\"mt-8 sm:mx-auto sm:w-full sm:max-w-md\">\n    <div class=\"bg-white py-8 px-4 shadow sm:rounded-lg sm:px-10\">\n        <form class=\"space-y-6\" id=\"sign-in-form\">\n            <div>\n                <label for=\"email\" class=\"block text-sm font-medium leading-6 text-gray-900\">Email address</label>\n                <div class=\"mt-2\">\n                    <input\n                        id=\"email\"\n                        name=\"email\"\n                        type=\"email\"\n                        autocomplete=\"email\"\n                        required\n                        class=\"px-2 block w-full rounded-md border-0 py-1.5 text-gray-900 shadow-sm ring-1 ring-inset ring-gray-300 placeholder:text-gray-400 focus:ring-2 focus:ring-inset focus:ring-green-600 sm:text-sm sm:leading-6\"\n                    />\n                </div>\n            </div>\n\n            <div>\n                <label for=\"password\" class=\"block text-sm font-medium leading-6 text-gray-900\">Password</label>\n                <div class=\"mt-2\">\n                    <input\n                        id=\"password\"\n                        name=\"password\"\n                        type=\"password\"\n                        autocomplete=\"current-password\"\n                        required\n                        class=\"px-2 block w-full rounded-md border-0 py-1.5 text-gray-900 shadow-sm ring-1 ring-inset ring-gray-300 placeholder:text-gray-400 focus:ring-2 focus:ring-inset focus:ring-green-600 sm:text-sm sm:leading-6\"\n                    />\n                </div>\n            </div>\n\n            <div>\n                <button\n                    type=\"submit\"\n                    class=\"flex w-full justify-center rounded-md bg-green-600 py-2 px-3 text-sm font-semibold text-white shadow-sm hover:bg-green-500 focus-visible:outline focus-visible:outline-2 focus-visible:outline-offset-2 focus-visible:outline-green-600\"\n                >\n                    Sign in\n                </button>\n            </div>\n        </form>\n    </div>\n</div>\n`; }\n```\n\n`signed-in.ts`\n\n```html\nexport default function componentSignedIn() { return /*html*/ `\n<div class=\"mt-8 sm:mx-auto sm:w-full sm:max-w-md\">\n    <div class=\"bg-white py-8 px-4 shadow sm:rounded-lg sm:px-10 text-center\">User signed in.</div>\n</div>\n`; }\n```\n\n> To properly highlight HTML in template literals in JavaScript, you can use the `es6-string-html` VSCode extension (<a href=\"https://marketplace.visualstudio.com/items?itemName=Tobermory.es6-string-html\" target=\"_blank\" rel=\"noopener noreferrer\">link</a>).\n\nIn addition, we need to define two utility classes that will be inside the `/src/utils/index.ts` file. The first utility function will be a type predicate that determines if an error is a Firebase Error. The second utility function will parse the Firebase error into a human-readable string. You can find the implementation of these utility functions in the GitHub repo, which we will link below.\n\nNext, we will define the logic inside the `main.ts` file:\n\n```ts\nimport FirebaseConfig from \"./firebase.config\";\nimport { onAuthStateChanged, User } from \"firebase/auth\";\nimport { parseFirebaseError, isFirebaseError } from \"./utils\";\nimport { signInWithEmailAndPassword, signOut } from \"firebase/auth\";\nimport componentSignIn from \"./components/sign-in-from\";\nimport componentSignedIn from \"./components/signed-in\";\n\nconst firebase = new FirebaseConfig();\nconst auth = firebase.auth();\n\nconst app = document.getElementById(\"app\") as HTMLIFrameElement;\n\nfunction setSignInComponent() {\n    app.innerHTML = componentSignIn();\n}\n\nfunction setSignedInComponent() {\n    app.innerHTML = componentSignedIn();\n}\n\nfunction setSignInSubmitListener(signInForm: HTMLFormElement) {\n    signInForm.addEventListener(\"submit\", (e) => {\n        e.preventDefault();\n        const email = signInForm[\"email\"].value;\n        const password = signInForm[\"password\"].value;\n        signUserIn(email, password);\n    });\n}\n\nfunction removeSignInSubmitListener(signInForm: HTMLFormElement) {\n    signInForm?.removeEventListener(\"submit\", () => {});\n}\n\nlet signedInUser: User | null = null;\n\nwindow.onmessage = function (event) {\n    if (event.origin === \"https://localhost:3001\" || event.origin === \"https://localhost:3002\") {\n        if (event.data === \"signOut\") {\n            signUserOut();\n        }\n        if (event.data === \"getUserInfo\") {\n            sendUserInfo();\n        }\n    }\n};\n\nfunction sendUserInfo() {\n    window.parent.postMessage(JSON.parse(JSON.stringify(signedInUser)), \"https://localhost:3001\");\n    window.parent.postMessage(JSON.parse(JSON.stringify(signedInUser)), \"https://localhost:3002\");\n}\n\nonAuthStateChanged(auth, (user) => {\n    if (user) {\n        signedInUser = user;\n        removeSignInSubmitListener(document.getElementById(\"sign-in-form\") as HTMLFormElement);\n        setSignedInComponent();\n        sendUserInfo();\n    } else {\n        setSignInComponent();\n        setSignInSubmitListener(document.getElementById(\"sign-in-form\") as HTMLFormElement);\n        sendUserInfo();\n    }\n});\n\nasync function signUserIn(email: string, password: string) {\n    try {\n        await signInWithEmailAndPassword(auth, email, password);\n    } catch (error) {\n        if (isFirebaseError(error)) {\n            const readableError = parseFirebaseError(error.message);\n            console.error(readableError);\n        } else {\n            console.error(error);\n        }\n    }\n}\n\nasync function signUserOut() {\n    signedInUser = null;\n    try {\n        await signOut(auth);\n    } catch (error) {\n        if (isFirebaseError(error)) {\n            const readableError = parseFirebaseError(error.message);\n            console.error(readableError);\n        } else {\n            console.error(error);\n        }\n    }\n}\n```\n\nAs shown in the code above, we have defined the `window.onmessage` event. This event listens for messages that will be executed from the iFrames we are going to define in the next section. We listen for two events: `signOut` and `getUserInfo`, and we execute the relevant functions. For example, when the iFrame sends a `signOut` event, we will log the user out. Similarly, when we receive a `getUserInfo` event, we will send the current user's details to the iFrame. We will learn more about these two events when we start implementing the logic in the iFrames in the next section.\n\n```ts\nwindow.onmessage = function (event) {\n    if (event.origin === \"https://localhost:3001\" || event.origin === \"https://localhost:3002\") {\n        if (event.data === \"signOut\") {\n            signUserOut();\n        }\n        if (event.data === \"getUserInfo\") {\n            sendUserInfo();\n        }\n    }\n};\n```\n\nWe also send user details when the authentication state changes, for example, when a user successfully signs in or signs out.\n\n```ts\nonAuthStateChanged(auth, (user) => {\n    if (user) {\n\t\t\t\t...\n        sendUserInfo();\n    } else {\n\t\t\t\t...\n        sendUserInfo();\n    }\n});\n```\n\nIt's important to note that we use `JSON.parse(JSON.stringify(signedInUser))`. If we were to send the plain object without deep cloning it, we would get the following error:\n\n```plain\nIt turns out the object I passed had methods, which is why the error message said An object could not be cloned.\n```\n\nThis is because the Firebase user object we passed had methods, which is why the error message said \"`An object could not be cloned`\".\n\nTo fix this, we simply wrap our user object with `JSON.parse(JSON.stringify())`.\n\n```ts\nfunction sendUserInfo() {\n    window.parent.postMessage(JSON.parse(JSON.stringify(signedInUser)), \"https://localhost:3001\");\n    window.parent.postMessage(JSON.parse(JSON.stringify(signedInUser)), \"https://localhost:3002\");\n}\n```\n\n## Create a project to embed the authentication logic\n\nAs we did previously, we need to create a new Vite app called `iFrame-1` that will be hosted on `http://localhost:3001`. The process is the same as before, and instructions are provided above. However, we do not need to install the Firebase dependency this time because all communication with Firebase will be done between the iFrame.\n\nThe difference this time is that we will set up two `div` elements in the `index.html` file: `navigation`, where we will load the navigation component, and `sign-in-iframe`, where we will load the sign-in iframe that we created in the previous section.\n\n```html\n<!doctype html>\n<html lang=\"en\">\n    <head>\n        <meta charset=\"UTF-8\" />\n        <link rel=\"icon\" type=\"image/svg+xml\" href=\"/vite.svg\" />\n        <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\" />\n        <title>iFrame - 1</title>\n        <link href=\"./assets/tailwind/output.css\" rel=\"stylesheet\" />\n    </head>\n    <body>\n        <div id=\"navigation\"></div>\n        <div id=\"sign-in-iframe\"></div>\n        <script type=\"module\" src=\"/src/main.ts\"></script>\n    </body>\n</html>\n```\n\nTo create the navigation component, start by creating a `/components` dictionary inside the `/src` folder. Then, create a `navigation.ts` file inside the `/components` dictionary.\n\n```html\nexport default function componentNavigation(userEmail = \"\", showSignIn = true) { return /*html*/ `\n<nav class=\"bg-green-700\">\n    <div class=\"mx-auto max-w-7xl px-2 sm:px-6 lg:px-8\">\n        <div class=\"flex justify-between h-16 items-center\">\n            <div class=\"text-white rounded-md px-3 py-2 text-sm font-medium\">${userEmail}</div>\n            ${ showSignIn ? /*html*/ `<button\n                id=\"sign-out-button\"\n                class=\" text-white hover:bg-green-500 hover:text-white rounded-md px-3 py-2 text-sm font-medium\"\n            >\n                Sign Out</button\n            >` : \"\" }\n        </div>\n    </div>\n</nav>\n`; }\n```\n\nIn the navigation component, we will display the user's email address and a Sign Out button if the currently authenticated user is logged in. If the user is not authenticated, we will not display anything and the navigation will be empty. Please refer to the images below.\n\n![Screenshot of the application with the login form](https://res.cloudinary.com/suv4o/image/upload/q_auto,f_auto,w_850,e_sharpen:100/v1680414125/blog/single-sign-on-with-firebase-authentication-across-multiple-domains/sign-in-page_utf7pz)\n\n![Screenshot of the application with the user is logged in](https://res.cloudinary.com/suv4o/image/upload/q_auto,f_auto,w_850,e_sharpen:100/v1680414124/blog/single-sign-on-with-firebase-authentication-across-multiple-domains/signed-in-user_uxusyr)\n\nNow, in the `main.ts` file, we are going to add the following code:\n\n```ts\nimport componentNavigation from \"./components/navigation\";\n\nwindow.onmessage = function (e) {\n    setUserInfo(e.data);\n};\n\nconst navigation = document.querySelector(\"#navigation\") as HTMLDivElement;\nconst signInIframe = document.querySelector(\"#sign-in-iframe\") as HTMLIFrameElement;\n\nsetNavigationComponent();\nsetSignInIframe();\n\nfunction setUserInfo(userInfo: any) {\n    setNavigationComponent(userInfo);\n}\n\nfunction setNavigationComponent(userInfo: any = null) {\n    navigation.innerHTML = componentNavigation(userInfo?.email, userInfo === null ? false : true);\n    if (userInfo !== null) {\n        const signOutButton = document.querySelector(\"#sign-out-button\") as HTMLButtonElement;\n        signOutButton.addEventListener(\"click\", signOut);\n    }\n}\n\nfunction setSignInIframe() {\n    signInIframe.innerHTML = /*html*/ `<iframe id=\"sign-in-form\" src=\"https://localhost:3000\" class=\"w-[100vw] h-[600px]\"></iframe>`;\n}\n\nfunction signOut() {\n    const iFrame = document.querySelector(\"#sign-in-form\") as HTMLIFrameElement;\n    if (iFrame.contentWindow) {\n        iFrame.contentWindow.postMessage(\"signOut\", \"https://localhost:3000\");\n    }\n}\n```\n\nFrom the code in the `main.ts` file above, we can see that we listen for events from the iframe by adding the `window.onmessage` function. When we receive user info, we re-render the navigation component.\n\n```ts\nwindow.onmessage = function (e) {\n    setUserInfo(e.data);\n};\n```\n\nTo handle sign out, we send a `postMessage` to the iFrame. In the previous section, we created a sign out method to handle this type of situation.\n\n```ts\nfunction signOut() {\n    const iFrame = document.querySelector(\"#sign-in-form\") as HTMLIFrameElement;\n    if (iFrame.contentWindow) {\n        iFrame.contentWindow.postMessage(\"signOut\", \"https://localhost:3000\");\n    }\n}\n```\n\nWe have now completed the implementation inside the iFrame. The next step is to implement another identical iFrame Vite project that will run on `https://localhost:3002`. Since we have already covered this step, we will not repeat it in this section. Please create the project yourself.\n\nNow, if you run all three projects at the same time (Authentication, iFrame 1, and iFrame 2), you will see that authentication works seamlessly between all the projects. This marks the end of this blog article. We hope you found it useful. You can find the GitHub repository of the project at the following <a href=\"https://github.com/Suv4o/single-sign-on-with-firebase\" target=\"_blank\" rel=\"noopener noreferrer\">link</a>.\n\n## Conclusion\n\nFirebase Authentication is a widely used authentication service for web applications. However, Firebase has a limitation that prevents users from remaining signed in once they have signed in across multiple domains. In this blog article, we will discuss how to work around this limitation and enable Single Sign-On (SSO) with Firebase Authentication across multiple domains.\n\nTo enable SSO with Firebase Authentication across multiple domains, we created an authentication project where we implemented all the logic to handle authentication. We then embedded the authentication project in two other applications hosted on different domains using an iframe. To communicate between the authentication project and the other two projects, we used the `postMessage` <a href=\"https://developer.mozilla.org/en-US/docs/Web/API/Window/postMessage\" target=\"_blank\" rel=\"noopener noreferrer\">API</a>.\n\nBy the end of the blog article, we were able to seamlessly authenticate users across all domains, enabling them to sign in once and remain signed in across all applications.\n"
  },
  {
    "articlePath": "/2023/04/25/signals-in-vanilla-js",
    "embeddings": [
      -0.1384446918964386,
      -0.05712829902768135,
      0.02280217967927456,
      0.04100503772497177,
      0.05183614790439606,
      0.037623144686222076,
      0.02069549821317196,
      0.02858755923807621,
      0.06410950422286987,
      -0.007500190753489733,
      -0.012644569389522076,
      0.08477026969194412,
      -0.06403342634439468,
      0.025660695508122444,
      0.0675785169005394,
      0.03457406535744667,
      0.025133756920695305,
      -0.01019235234707594,
      -0.05044565349817276,
      -0.022884532809257507,
      0.02756372280418873,
      -0.06616833806037903,
      0.011325309984385967,
      -0.02186748757958412,
      -0.008059929125010967,
      0.055955320596694946,
      -0.035729795694351196,
      -0.03769640997052193,
      0.00558168301358819,
      -0.037190962582826614,
      0.03914489969611168,
      0.038867395371198654,
      0.010752660222351551,
      0.02711312286555767,
      -0.15114812552928925,
      0.07930869609117508,
      -0.005686691962182522,
      -0.03639470413327217,
      -0.015617739409208298,
      -0.05739650875329971,
      0.004795961081981659,
      -0.013095550239086151,
      -0.07838378101587296,
      -0.00023523364507127553,
      -0.015979411080479622,
      -0.03934573009610176,
      -0.05753083527088165,
      -0.04854033887386322,
      -0.10067528486251831,
      -0.02020080015063286,
      -0.044970981776714325,
      -0.06631071865558624,
      0.0033698612824082375,
      0.061429448425769806,
      0.028800122439861298,
      -0.0314641073346138,
      -0.0545446053147316,
      0.007301153149455786,
      0.036711592227220535,
      -0.031398460268974304,
      0.017954673618078232,
      -0.012418649159371853,
      0.01949598267674446,
      0.015218973159790039,
      0.006506649777293205,
      0.04056379944086075,
      0.028751591220498085,
      0.008305614814162254,
      0.05194924399256706,
      0.0022903557401150465,
      -0.0718950554728508,
      -0.0012920837616547942,
      0.035784270614385605,
      -0.004865631926804781,
      0.018042810261249542,
      -0.06552332639694214,
      -0.0008153017843142152,
      0.014177157543599606,
      0.006620617583394051,
      -0.04758216440677643,
      -0.07183197140693665,
      -0.07711047679185867,
      -0.06368645280599594,
      -0.0054679149761796,
      0.03021123819053173,
      0.10102684795856476,
      0.020344803109765053,
      -0.04085574299097061,
      0.1244935393333435,
      -0.01692374236881733,
      -0.10890007764101028,
      -0.0385020487010479,
      0.028183355927467346,
      0.09051673859357834,
      -0.05160807818174362,
      0.0348425954580307,
      0.020894328132271767,
      0.018900714814662933,
      -0.008029804565012455,
      0.07787562161684036,
      0.05125543102622032,
      0.041514042764902115,
      -0.010073177516460419,
      0.05250407010316849,
      0.039891019463539124,
      -0.032356828451156616,
      -0.036833927035331726,
      0.01231665164232254,
      -0.034628693014383316,
      0.0031700432300567627,
      -0.03721017390489578,
      0.06369566917419434,
      0.003549120156094432,
      -0.06963056325912476,
      -0.03665465489029884,
      0.008523580618202686,
      0.0917462632060051,
      0.012258295901119709,
      0.11453364789485931,
      0.10332933813333511,
      0.10711945593357086,
      -0.001187620684504509,
      -0.044485148042440414,
      -0.003936794586479664,
      0.07061582058668137,
      -0.00959821417927742,
      -0.0035019307397305965,
      4.533775549288004e-33,
      0.03604904189705849,
      0.04868278652429581,
      -0.03603590652346611,
      -0.002325129695236683,
      0.0016569235594943166,
      -0.03152204304933548,
      -0.009587801992893219,
      -0.024225380271673203,
      -0.05717581883072853,
      0.026210090145468712,
      0.009791900403797626,
      0.06959749013185501,
      -0.018730800598859787,
      0.05176227167248726,
      0.03256446495652199,
      -0.0712154433131218,
      0.012657713145017624,
      0.011303680948913097,
      0.04652160033583641,
      -0.015408433973789215,
      -0.03461896628141403,
      -0.006840233691036701,
      -0.025812605395913124,
      0.05780874937772751,
      0.003497055731713772,
      0.07822494208812714,
      -0.04534823074936867,
      0.01476502325385809,
      -0.029550591483712196,
      -0.009988472796976566,
      0.03832702338695526,
      0.033761318773031235,
      -0.03615235537290573,
      -0.041231751441955566,
      0.056801702827215195,
      -0.05619828775525093,
      -0.05975087732076645,
      -0.05667446181178093,
      -0.06110067665576935,
      -0.04241153597831726,
      0.060866937041282654,
      -0.04779050499200821,
      -0.09243214130401611,
      -0.10139819234609604,
      -0.021318085491657257,
      -0.034560080617666245,
      -0.011790557764470577,
      0.06900974363088608,
      0.07413613796234131,
      -0.017863143235445023,
      -0.03256930410861969,
      0.0019249089527875185,
      -0.031806159764528275,
      -0.030869528651237488,
      -0.0016386477509513497,
      0.07118716090917587,
      0.0017133470391854644,
      -0.00885305181145668,
      -0.014893384650349617,
      0.02488829754292965,
      -0.03938917815685272,
      -0.0029934716876596212,
      0.07021156698465347,
      -0.03863956034183502,
      0.015487488359212875,
      -0.015254190191626549,
      -0.03456946834921837,
      -0.013949345797300339,
      -0.013370206579566002,
      0.0397975854575634,
      -0.05546031892299652,
      0.08438679575920105,
      0.00010899733752012253,
      -0.03414475917816162,
      0.05768962949514389,
      -0.06483890116214752,
      -0.04571934789419174,
      -0.02037038281559944,
      0.022211581468582153,
      -0.022600941359996796,
      0.010958664119243622,
      -0.04808402806520462,
      -0.051762036979198456,
      0.060589052736759186,
      0.009000273421406746,
      0.006667561829090118,
      -0.007666673045605421,
      -0.13336826860904694,
      -0.07171463966369629,
      -0.0352354571223259,
      -0.02619788609445095,
      0.03804127871990204,
      0.026927229017019272,
      -0.10320358723402023,
      -0.053378745913505554,
      -6.672597438842741e-33,
      0.039422422647476196,
      -0.01470464188605547,
      -0.07165439426898956,
      0.09951349347829819,
      -0.044618330895900726,
      -0.015566273592412472,
      0.002457107650116086,
      0.0608878955245018,
      0.022631008177995682,
      -0.05376754328608513,
      0.04925760254263878,
      -0.05194368213415146,
      0.0020560992415994406,
      0.029067624360322952,
      -0.041927460581064224,
      0.10611654818058014,
      -0.03136540576815605,
      -0.15554331243038177,
      0.09369084239006042,
      -0.011476817540824413,
      -0.012555585242807865,
      0.04602712392807007,
      0.003942746203392744,
      0.03193602338433266,
      0.020071933045983315,
      -0.013862605206668377,
      0.026501068845391273,
      0.07214830070734024,
      -0.07667665183544159,
      -0.020472921431064606,
      -0.0870579183101654,
      0.03982768952846527,
      -0.05780579894781113,
      -0.02040407806634903,
      0.0052293045446276665,
      0.008143451996147633,
      0.0315597839653492,
      0.04991660639643669,
      0.008589407429099083,
      -0.029938319697976112,
      0.041208796203136444,
      0.07482387125492096,
      0.08082310855388641,
      -0.028839651495218277,
      -0.0980827808380127,
      0.07449021935462952,
      -0.019726837053894997,
      0.0917196199297905,
      -0.05731288716197014,
      -0.011250793002545834,
      0.038836732506752014,
      -0.03131413087248802,
      -0.04349521920084953,
      -0.007908148691058159,
      -0.08284643292427063,
      0.012902644462883472,
      -0.028754856437444687,
      -0.06464609503746033,
      0.038555316627025604,
      0.05645812302827835,
      0.00033544766483828425,
      -0.049059655517339706,
      -0.05581727623939514,
      -0.06752559542655945,
      0.039588168263435364,
      -0.007868299260735512,
      -0.09172318130731583,
      -0.04447920620441437,
      0.08489225804805756,
      -0.04615307226777077,
      0.11315886676311493,
      -0.003941705450415611,
      0.03949133679270744,
      -0.026264455169439316,
      -0.01242193952202797,
      -0.05051517114043236,
      0.09315967559814453,
      -0.1435152143239975,
      -0.04392385482788086,
      -0.04336564987897873,
      -0.01660369522869587,
      0.032549068331718445,
      0.027966316789388657,
      -0.013310922309756279,
      -0.04630979150533676,
      0.13212326169013977,
      -0.0784715786576271,
      -0.0014983428409323096,
      -0.001268265419639647,
      -0.0195944644510746,
      -0.06590848416090012,
      0.11786232888698578,
      -0.025086630135774612,
      0.07065903395414352,
      0.004299870226532221,
      -6.159675081107707e-8,
      -0.054592348635196686,
      0.028641628101468086,
      -0.08768925070762634,
      -0.07993410527706146,
      0.034027330577373505,
      0.0063952491618692875,
      0.03872814401984215,
      -0.054344139993190765,
      -0.035807497799396515,
      -0.013146012090146542,
      0.07533127069473267,
      0.05794300138950348,
      0.006570860277861357,
      0.03139638900756836,
      0.045212775468826294,
      0.035967808216810226,
      -0.050119075924158096,
      0.05310536175966263,
      -0.09329532831907272,
      -0.006478255148977041,
      0.06257712095975876,
      0.059527333825826645,
      -0.017598100006580353,
      -0.0003757095546461642,
      0.13016963005065918,
      0.0033479430712759495,
      0.069290891289711,
      0.0454225018620491,
      0.02097518928349018,
      0.002698426367715001,
      -0.031281664967536926,
      0.08851844817399979,
      0.10952417552471161,
      -0.023956328630447388,
      0.025752248242497444,
      0.04302450641989708,
      0.022234024479985237,
      -0.04140305146574974,
      -0.04124061390757561,
      0.1266811490058899,
      0.04326976090669632,
      -0.0052584693767130375,
      -0.12196046113967896,
      -0.010724479332566261,
      -0.043823547661304474,
      0.02060677297413349,
      -0.002256922423839569,
      -0.059568338096141815,
      0.05237231031060219,
      0.015456798486411572,
      0.04010332003235817,
      -0.0031816016416996717,
      -0.0173465758562088,
      -0.00025534944143146276,
      -0.015794845297932625,
      0.016978591680526733,
      0.0436331182718277,
      -0.04567214846611023,
      -0.026045525446534157,
      -0.031089628115296364,
      0.03589833527803421,
      0.04471509903669357,
      0.08126505464315414,
      0.013133049942553043
    ],
    "content": "---\ntitle: Signals in Vanilla JS\ndescription: If you're a JavaScript developer, you may have heard about the buzz around signals lately. Several popular JavaScript frameworks, such as Vue, Preact, Solid, Angular, and Quick, have recently implemented and supported the use of signals. But what exactly are signals? As web applications become more complex, managing the state of JavaScript applications becomes a challenge. This is where signals can be a valuable tool, allowing the application to respond to changes in the state, such as a variable change. In this article, we will explore the concept of signals and how they can be used in Vanilla JavaScript applications. We will use the Vue and Preact reactivity libraries and see how easy and similar these two approaches are to implement. For the demo project, we will use Vite. So let's get started by creating a Vite app.\nimage: https://res.cloudinary.com/suv4o/image/upload/q_auto,f_auto,w_1200,e_sharpen:100/v1682415127/blog/signals-in-vanilla-js/signals-in-vanilla-js-hero_lsdah8\nkeywords:\n    - Signals in Vanilla JS\n    - signals\n    - javascript\n    - vite\n    - typescript\n    - reactivity\n    - ref\n    - vue\n    - preact\ntype: page\nblog: post\npublished: 25th April 2023\nreadTime: 1\nauthor: Aleksandar Trpkovski\narticleTags:\n    - JavaScript\n    - TypeScript\n    - Vite\n---\n\n# Signals in Vanilla JS\n\n_{{$document.published}} • {{$document.readTime}} min read — by **[{{$document.author}}](/)**_\n\n::tag-pills{:tags=\"articleTags\"}\n::\n\n![Landing Image](https://res.cloudinary.com/suv4o/image/upload/q_auto,f_auto,w_750,e_sharpen:100/v1682415127/blog/signals-in-vanilla-js/signals-in-vanilla-js-hero_lsdah8)\n\nIf you're a JavaScript developer, you may have heard about the buzz around signals lately. Several popular JavaScript frameworks, such as <a href=\"https://vuejs.org/guide/extras/reactivity-in-depth.html#connection-to-signals\" target=\"_blank\" rel=\"noopener noreferrer\">Vue</a>, <a href=\"https://preactjs.com/guide/v10/signals/\" target=\"_blank\" rel=\"noopener noreferrer\">Preact</a>, <a href=\"https://www.solidjs.com/docs/latest/api#createsignal\" target=\"_blank\" rel=\"noopener noreferrer\">Solid</a>, <a href=\"https://github.com/angular/angular/discussions/49090\" target=\"_blank\" rel=\"noopener noreferrer\">Angular</a>, and <a href=\"https://qwik.builder.io/docs/components/state/#usesignal\" target=\"_blank\" rel=\"noopener noreferrer\">Quick</a>, have recently implemented and supported the use of signals. But what exactly are signals?\n\nAs web applications become more complex, managing the state of JavaScript applications becomes a challenge. This is where signals can be a valuable tool, allowing the application to respond to changes in the state, such as a variable change.\n\nIn this article, we will explore the concept of signals and how they can be used in Vanilla JavaScript applications. We will use the Vue and Preact reactivity libraries and see how easy and similar these two approaches are to implement. For the demo project, we will use Vite. So let's get started by creating a Vite app.\n\n## Create a Vite app\n\nTo create a brand new Vite app, run the following command in your terminal:\n\n```bash\nyarn create vite\n```\n\nName the project \"signals-in-vanilla-js\"\n\n```bash\n? Project name: › signals-in-vanilla-js\n```\n\nSelect Vanilla with TypeScript.\n\n```bash\n? Select a framework: › - Use arrow-keys. Return to submit.\n❯   Vanilla\n    Vue\n    React\n    Preact\n    Lit\n    Svelte\n    Others\n```\n\n```bash\n? Select a variant: › - Use arrow-keys. Return to submit.\n❯   TypeScript\n    JavaScript\n```\n\nAfter creating the new project, navigate to the root directory of the project and install the dependencies using the following commands in the terminal:\n\n```bash\ncd signals-in-vanilla-js\nyarn\n```\n\nBy default, Vite runs on port `5173`. This is not a big deal, but you can easily change it to run on port `3000` with `https` by installing the following package:\n\n```bash\nyarn add @vitejs/plugin-basic-ssl\n```\n\nTo begin, create a file called `vite.config.ts` in the root of your project and add the following code:\n\n```bash\nimport { defineConfig } from \"vite\";\nimport basicSsl from \"@vitejs/plugin-basic-ssl\";\n\nexport default defineConfig({\n    server: {\n        port: 3000,\n        https: true,\n    },\n    plugins: [basicSsl()],\n});\n```\n\nNow, we can run our project in the browser.\n\n```bash\nyarn dev\n```\n\n## Using Signals with Preact\n\nTo use Signals, we need to install the Preact package. Run the following command in the terminal:\n\n```bash\nyarn add @preact/signals-core\n```\n\nNext, we need to add the following code to the `main.ts` file:\n\n```ts\nimport \"./style.css\";\nimport { signal, computed, effect } from \"@preact/signals-core\";\nconst counter = signal(1);\nconst result = computed(() => counter.value * 10);\n\ndocument.querySelector<HTMLDivElement>(\"#app\")!.innerHTML = `\n  <div>\n    <h1>Signals in Vanilla JS</h1>\n    <div class=\"card\">\n      <button type=\"button\">count is <span class=\"counter\">${counter.value}</span></button>\n    </div>\n    <p>Result: <span class=\"counter\">${counter.value}</span> * 10 = <span class=\"result\">10</span></p>\n  </div>\n`;\n\nfunction setCounter() {\n    const counterElements = document.querySelectorAll<HTMLSpanElement>(\".counter\");\n    const resultElement = document.querySelector<HTMLSpanElement>(\".result\");\n\n    if (!counterElements?.length || !resultElement) {\n        return;\n    }\n\n    counterElements.forEach((element) => {\n        element.innerText = counter.value.toString();\n    });\n\n    resultElement.innerText = result.value.toString();\n}\n\nconst button = document.querySelector<HTMLButtonElement>(\"button\");\n\nbutton?.addEventListener(\"click\", () => {\n    counter.value++;\n});\n\neffect(setCounter);\n```\n\nLet's explain what the code above does. First, we import `signal`, `computed`, and `effect` from `@preact/signals-core`, which we have installed.\n\nWe can easily define reactive variables using `signal`.\n\n```ts\nconst counter = signal(1);\n```\n\nTo update the counter signal, simply access the `.value` property and update it with the desired value. In this case, the button click event increases the counter signal by one.\n\n```ts\nbutton?.addEventListener(\"click\", () => {\n    counter.value++;\n});\n```\n\nThe Preact library provides a `computed` function that allows us to compute a reactive value based on a signal. In our case, we multiply the counter by 10 in the computed value called `result`. The `result` returns the newly calculated value whenever the counter signal changes.\n\n```ts\nconst result = computed(() => counter.value * 10);\n```\n\nFinally, we use the `effect` function to watch for any signal changes inside a function passed as a parameter. `effect` will execute the function anytime there is a signal change. In this way, we can re-render the counter and result to the HTML any time we update the counter signal.\n\n## Using Signals with Vue\n\nJust as we implemented signals using the Preact library, we can do the same with Vue. Let's install Vue by running the following command in the terminal:\n\n```bash\nyarn add vue\n```\n\nNext, replace the following code inside the `main.ts` file.\n\n```ts\nimport \"./style.css\";\nimport { ref, computed, watch } from \"vue\";\nconst counter = ref(1);\nconst result = computed(() => counter.value * 10);\n\ndocument.querySelector<HTMLDivElement>(\"#app\")!.innerHTML = `\n  <div>\n    <h1>Signals in Vanilla JS</h1>\n    <div class=\"card\">\n      <button type=\"button\">count is <span class=\"counter\">${counter.value}</span></button>\n    </div>\n    <p>Result: <span class=\"counter\">${counter.value}</span> * 10 = <span class=\"result\">10</span></p>\n  </div>\n`;\n\nfunction setCounter() {\n    const counterElements = document.querySelectorAll<HTMLSpanElement>(\".counter\");\n    const resultElement = document.querySelector<HTMLSpanElement>(\".result\");\n\n    if (!counterElements?.length || !resultElement) {\n        return;\n    }\n\n    counterElements.forEach((element) => {\n        element.innerText = counter.value.toString();\n    });\n\n    resultElement.innerText = result.value.toString();\n}\n\nconst button = document.querySelector<HTMLButtonElement>(\"button\");\n\nbutton?.addEventListener(\"click\", () => {\n    counter.value++;\n});\n\nwatch(counter, () => {\n    setCounter();\n});\n```\n\nAs we can see from the code above, this code is very similar to the code we implemented with Preact signals. The only difference here is that we import `ref`, `computed`, and `watch` from `vue`.\n\nHere are the differences: in Vue, we use `ref` instead of `signal` to define a reactive variable. To update a `ref` variable, simply access its `.value` property, just as we did in Preact. The `computed` function behaves the same way, and the `watch` helps us watch a `ref` variable change simply by passing the variable as a parameter. In the callback function, we add logic that will be executed once the variable has changed.\n\n![demo in animated video gif](https://res.cloudinary.com/suv4o/image/upload/w_750/v1682415127/blog/signals-in-vanilla-js/signals-in-vanilla-js_uecikt)\n\nI hope you find this article helpful. You can find code examples in the following GitHub repository <a href=\"https://github.com/Suv4o/signals-in-vanilla-js\" target=\"_blank\" rel=\"noopener noreferrer\">here</a>.\n"
  },
  {
    "articlePath": "/2023/10/18/from-pixels-to-words-exploring-the-capabilities-of-image-to-text-ai-tools",
    "embeddings": [
      -0.07229946553707123,
      0.0032637605909258127,
      -0.024656735360622406,
      0.08524604886770248,
      0.0868837758898735,
      -0.051168959587812424,
      0.01971650868654251,
      0.03292319178581238,
      0.049992501735687256,
      -0.02221217378973961,
      0.01610509306192398,
      -0.014417584985494614,
      0.06024133041501045,
      0.054181069135665894,
      0.02968001738190651,
      0.0750572681427002,
      0.002671854104846716,
      0.018058234825730324,
      -0.1091662272810936,
      -0.018637122586369514,
      0.042532868683338165,
      0.014859605580568314,
      0.0701233297586441,
      -0.04709109291434288,
      -0.014083943329751492,
      0.051571838557720184,
      -0.0689484030008316,
      -0.05707434192299843,
      -0.05814691632986069,
      -0.027677541598677635,
      0.05933917313814163,
      -0.010087561793625355,
      0.03280291333794594,
      0.06666906177997589,
      0.0001548616128275171,
      0.13655789196491241,
      -0.04614780843257904,
      0.009905620478093624,
      0.005980789195746183,
      -0.08246133476495743,
      0.02022187039256096,
      0.000004674871433962835,
      -0.06976527720689774,
      -0.04983711242675781,
      0.11158086359500885,
      -0.00395662197843194,
      -0.038609907031059265,
      -0.04052690789103508,
      -0.023663019761443138,
      0.0076967207714915276,
      -0.15734247863292694,
      -0.10611743479967117,
      -0.0636841207742691,
      0.026755420491099358,
      -0.05141685530543327,
      0.07003203779459,
      -0.006864165887236595,
      -0.04968052729964256,
      0.02142348326742649,
      0.00004974819967173971,
      0.04288036376237869,
      -0.02093040756881237,
      0.018421616405248642,
      0.024039197713136673,
      0.06044602766633034,
      0.021948251873254776,
      -0.014231633394956589,
      0.0017019975930452347,
      0.007522432133555412,
      -0.011301386170089245,
      0.018847262486815453,
      0.06331539154052734,
      0.03278696537017822,
      0.010218831710517406,
      0.007023986894637346,
      -0.044076330959796906,
      -0.0006922971806488931,
      0.0049352035857737064,
      0.03138919174671173,
      -0.10148288309574127,
      -0.003101647598668933,
      -0.027937019243836403,
      0.06566762924194336,
      0.05416383966803551,
      -0.00019352462550159544,
      0.04944279417395592,
      0.03646624833345413,
      0.038523171097040176,
      0.040097665041685104,
      -0.047205034643411636,
      -0.06013044714927673,
      -0.09468341618776321,
      0.008113452233374119,
      -0.02072732150554657,
      0.0635356605052948,
      0.011707589030265808,
      -0.006398179568350315,
      -0.08531539142131805,
      -0.08487872034311295,
      0.05007321387529373,
      -0.017281660810112953,
      -0.00874802004545927,
      -0.02049373649060726,
      -0.05448703095316887,
      0.052798718214035034,
      0.018109729513525963,
      0.08123427629470825,
      -0.006641778629273176,
      -0.04180869832634926,
      -0.012752782553434372,
      0.03588603064417839,
      0.013230185024440289,
      -0.058287087827920914,
      -0.038056738674640656,
      0.030286042019724846,
      0.0319884791970253,
      -0.009765395894646645,
      -0.03542954474687576,
      0.08217813074588776,
      0.0733383297920227,
      0.059370677918195724,
      0.053797803819179535,
      -0.08093756437301636,
      0.019581852480769157,
      0.003006298327818513,
      -0.031141994521021843,
      0.005029632244259119,
      3.2836402459243786e-33,
      0.08185507357120514,
      0.03226310387253761,
      0.03426268696784973,
      0.031030988320708275,
      0.05613115057349205,
      -0.034371666610240936,
      -0.006044390611350536,
      -0.020221812650561333,
      -0.13267546892166138,
      -0.06454978138208389,
      -0.015201815403997898,
      0.002459497656673193,
      -0.059518806636333466,
      0.08387098461389542,
      0.023974893614649773,
      -0.037576623260974884,
      -0.03709264472126961,
      0.052307527512311935,
      0.08143511414527893,
      0.03510342165827751,
      0.008154903538525105,
      -0.06707077473402023,
      -0.0497586652636528,
      0.04753528907895088,
      -0.022640516981482506,
      0.0020130439661443233,
      0.012234224937856197,
      -0.06847425550222397,
      0.013116125017404556,
      -0.016647493466734886,
      -0.059795770794153214,
      0.02299480140209198,
      0.010117826983332634,
      -0.0011528569739311934,
      0.0009826708119362593,
      -0.06355922669172287,
      -0.046362221240997314,
      -0.019447142258286476,
      -0.02208816632628441,
      0.03661704808473587,
      0.03530433401465416,
      0.016933616250753403,
      0.012575716711580753,
      -0.15156686305999756,
      -0.055338867008686066,
      0.04480792209506035,
      -0.01992802880704403,
      0.06722836196422577,
      0.01812508888542652,
      0.033913902938365936,
      -0.017460474744439125,
      0.023115016520023346,
      -0.029192626476287842,
      -0.05223916843533516,
      0.016704002395272255,
      -0.045303862541913986,
      0.020182933658361435,
      -0.014269697479903698,
      0.04866626486182213,
      -0.014137490652501583,
      0.0018269631545990705,
      0.006981855258345604,
      0.003253874136134982,
      0.07258140295743942,
      0.03527810424566269,
      0.012835386209189892,
      0.0372440367937088,
      0.07296626269817352,
      0.00954755675047636,
      -0.00393542367964983,
      -0.05192532762885094,
      0.025905491784214973,
      -0.012910856865346432,
      -0.039550215005874634,
      0.04191289469599724,
      -0.05253078415989876,
      -0.029571009799838066,
      -0.08051837235689163,
      -0.035821039229631424,
      0.06127604842185974,
      -0.0507514625787735,
      -0.009863176383078098,
      -0.057084567844867706,
      -0.0017791892169043422,
      -0.060933828353881836,
      -0.002130469074472785,
      0.049130164086818695,
      -0.10191572457551956,
      -0.03675239905714989,
      -0.0059494138695299625,
      -0.010506548918783665,
      0.0334940105676651,
      -0.1198032796382904,
      -0.054013852030038834,
      -0.06665080040693283,
      -2.4554936391815304e-33,
      0.06879433244466782,
      -0.039432309567928314,
      -0.012835334055125713,
      0.10675159841775894,
      0.04007682204246521,
      -0.019290674477815628,
      0.03737829998135567,
      0.09410865604877472,
      0.08446215093135834,
      -0.034849513322114944,
      -0.030270252376794815,
      -0.00823486689478159,
      -0.13044027984142303,
      -0.07782667130231857,
      0.00998721458017826,
      0.007587821688503027,
      -0.0330890454351902,
      -0.07335761189460754,
      0.05487247183918953,
      0.04280766472220421,
      -0.013246261514723301,
      0.08519008010625839,
      0.0012278866488486528,
      0.035751473158597946,
      0.01827026903629303,
      0.07600465416908264,
      0.05647774040699005,
      0.0969967320561409,
      -0.02380484528839588,
      -0.060593534260988235,
      -0.026202406734228134,
      0.006242789793759584,
      -0.09690871089696884,
      0.03137148544192314,
      -0.020125538110733032,
      0.0374545156955719,
      0.0011133108055219054,
      0.02615361660718918,
      -0.013467255979776382,
      0.045014701783657074,
      0.11047665774822235,
      -0.0253980103880167,
      -0.07327856868505478,
      -0.060172148048877716,
      -0.04411763325333595,
      -0.04572883993387222,
      -0.015368668362498283,
      0.031181348487734795,
      0.01457842905074358,
      0.06302186846733093,
      -0.008501050062477589,
      -0.06403331458568573,
      -0.10628737509250641,
      -0.008725166320800781,
      -0.07173770666122437,
      -0.08071771264076233,
      0.03805829584598541,
      -0.05236539617180824,
      -0.020285235717892647,
      -0.0307821836322546,
      -0.036376919597387314,
      -0.040899258106946945,
      0.025974111631512642,
      -0.03502175956964493,
      0.01360862236469984,
      -0.0740102156996727,
      -0.041661158204078674,
      -0.031286146491765976,
      -0.020807897672057152,
      0.028308967128396034,
      0.03398008272051811,
      -0.032822564244270325,
      0.09105433523654938,
      0.047504376620054245,
      0.036638882011175156,
      -0.008303849957883358,
      0.03082893416285515,
      -0.0509999543428421,
      0.030777858570218086,
      -0.1233973428606987,
      -0.054619356989860535,
      -0.01200085785239935,
      0.04619473218917847,
      0.0907997414469719,
      0.06620315462350845,
      0.08710722625255585,
      -0.042488809674978256,
      0.013982441276311874,
      0.06903482228517532,
      0.03128989040851593,
      -0.04727238416671753,
      0.032449379563331604,
      0.07615111768245697,
      0.06773371994495392,
      -0.03391057252883911,
      -5.4040700803170694e-8,
      -0.06298521906137466,
      0.0030519228894263506,
      -0.058503083884716034,
      0.014974418096244335,
      -0.04940219968557358,
      0.01176445372402668,
      0.02676895447075367,
      -0.0035780626349151134,
      0.013342888094484806,
      -0.049581870436668396,
      0.12871789932250977,
      -0.002329776529222727,
      -0.024343321099877357,
      0.02555200830101967,
      -0.04249110817909241,
      0.025842400267720222,
      0.04840635880827904,
      0.013067035935819149,
      -0.009433053433895111,
      -0.0710870549082756,
      0.03938381373882294,
      -0.004524996969848871,
      -0.029461102560162544,
      -0.04945877566933632,
      0.03952625021338463,
      -0.00209221662953496,
      -0.07394745945930481,
      0.020940227434039116,
      -0.018872108310461044,
      -0.029675325378775597,
      0.05282672494649887,
      0.010433117859065533,
      0.06400161236524582,
      0.04788246750831604,
      0.06687846034765244,
      -0.015065010637044907,
      -0.01483143586665392,
      -0.06962999701499939,
      -0.07899463176727295,
      0.03588351607322693,
      0.07384517043828964,
      0.05992992967367172,
      -0.04231873154640198,
      -0.07402647286653519,
      0.11049947887659073,
      -0.03719334676861763,
      0.03298242762684822,
      -0.10513582825660706,
      0.048762015998363495,
      0.000016762822269811295,
      -0.012037085369229317,
      -0.03482888638973236,
      0.04929524287581444,
      0.0900224819779396,
      0.032465096563100815,
      -0.05467552691698074,
      0.13587422668933868,
      -0.04578149691224098,
      0.047990571707487106,
      0.10520391166210175,
      0.03971371427178383,
      0.040326617658138275,
      0.039979029446840286,
      0.015823692083358765
    ],
    "content": "---\ntitle: From Pixels to Words - Exploring the Capabilities of Image-to-Text AI Tools\ndescription: I had an idea to create an image-to-text automation tool for writing descriptions for my images. As a hobby landscape photographer, I have a lot of images, and this tool would speed up my workflow when posting on Instagram. I thought, \"Well, I am a software developer. I can develop something like that very quickly, right?\" I only need to add my credit card details to OpenAI, and then I can start using their API. This sounds simple enough. Well, let's discuss how it all went. Imagine attaching an image and then starting a conversation with an AI assistant about the description you need help writing for that image. It would look something like this.\nimage: https://res.cloudinary.com/suv4o/image/upload/q_auto,f_auto,w_1200,e_sharpen:100/v1697369313/blog/from-pixels-to-words/hero\nkeywords:\n    - LangChain\n    - AI\n    - JavaScript\n    - Artificial Intelligence\n    - ML\n    - Machine Learning\n    - Chat GPT\n    - Image Classification\n    - Image Captioning\n    - Image recognition\n    - Zero-shot image classification\n    - TensorFlow\n    - Transformers.js\n    - Vue.js\n    - Vite\n    - TypeScript\n    - Web Development\n    - Development\n    - Nuxt.js\n    - Chat\n    - Chatbot\ntype: page\nblog: post\npublished: 18th October 2023\nreadTime: 15\nauthor: Aleksandar Trpkovski\narticleTags:\n    - AI\n    - LangChain\n    - JavaScript\n---\n\n# From Pixels to Words: Exploring the Capabilities of Image-to-Text AI Tools\n\n_{{$document.published}} • {{$document.readTime}} min read — by **[{{$document.author}}](/)**_\n\n::tag-pills{:tags=\"articleTags\"}\n::\n\n![Landing Image](https://res.cloudinary.com/suv4o/image/upload/q_auto,f_auto,w_750,e_sharpen:100/v1697369313/blog/from-pixels-to-words/hero)\n\nI had an idea to create an image-to-text automation tool for writing descriptions for my images. As a hobby landscape photographer, I have a lot of images, and this tool would speed up my workflow when posting on Instagram. I thought, \"Well, I am a software developer. I can develop something like that very quickly, right?\" I only need to add my credit card details to OpenAI, and then I can start using their API. This sounds simple enough. Well, let's discuss how it all went.\n\nImagine attaching an image and then starting a conversation with an AI assistant about the description you need help writing for that image. It would look something like this.\n\n![Entire conversation](https://res.cloudinary.com/suv4o/image/upload/q_auto,f_auto,w_750,e_sharpen:100/v1697368221/blog/from-pixels-to-words/from-pixels-to-words-conversation)\n\n1. First, we attach an image and ask the AI assistant for help.\n2. We request assistance in writing a description for the image, and the assistant provides one.\n3. Next, we ask the assistant to convert the description into an Instagram caption. We can see it adds emojis and hashtags as well.\n4. Then we also request an alternative text for the image to use on our website.\n5. Finally, we thank the assistant for their help.\n\nWhat I just showed you is a screenshot of the app I developed, which includes a conversation with one of my images attached. The image was taken in 2016, and it shows the city of Melbourne. At the end of this document, I will provide you with the GitHub repo and a link to play with the app. But first, let's walk through the steps on how I achieved all of this.\n\nHere is a diagram that visually represents the web app described above.\n\n![Diagram Chart](https://res.cloudinary.com/suv4o/image/upload/q_auto,f_auto,w_750,e_sharpen:100/v1697368216/blog/from-pixels-to-words/diagram-chart)\n\nThe diagram above provides a high-level overview of the app's functionality. The user submits a question about an attached image, and the web application responds with an answer. To achieve this, our app utilises <a href=\"https://js.langchain.com/docs/\" target=\"_blank\" rel=\"noopener noreferrer\">LangChain</a>, a powerful framework for working with Large Language Models (LLMs). LangChain supports both TypeScript and Python programming languages, and in our case, we are using TypeScript. We will become more familiar with LangChain and why we have chosen to work with it in the upcoming sections.\n\nIn addition, our app also uses additional tools to help us analyse the content of the image, giving us possible labels of classes or objects that might be included in the image.\n\n## Image Recognition Models for Text Generation and Object Detection\n\nFirst, we will discuss the additional tools used to help us identify the content of the image. The LLM does not have any knowledge about the content of the image, so to write an effective description, we need to provide relevant information. We used two libraries to accomplish that: <a href=\"https://www.tensorflow.org/\" target=\"_blank\" rel=\"noopener noreferrer\">TensorFlow</a> and <a href=\"https://huggingface.co/docs/transformers.js/index\" target=\"_blank\" rel=\"noopener noreferrer\">Transformers.js</a> from <a href=\"https://huggingface.co/\" target=\"_blank\" rel=\"noopener noreferrer\">Hugging Face</a>.\n\n### TensorFlow\n\nOur app utilises two pre-trained models from TensorFlow. These models help to classify the image into meaningful labels with probability percentage and assist in detecting objects in photos.\n\n### Transformers.js\n\nWe also use two more models from Transformers.js, one to help us convert an image into meaningful words, and another for zero-shot image classification. We will explain what zero-shot image classification means later in this section.\n\nWe decided to use multiple models because each model predicts different parts of the image differently. Then all the labels will be passed through the zero-shot image classification model that will help us determine which labels are highly likely to be included in the image.\n\nTo demonstrate the models, we will use the same image as in our first chat, a photograph of the city of Melbourne that I took in 2016.\n\n### Image Classification with TensorFlow\n\nOnce the image has been uploaded the first model we are passing through is the <a href=\"https://github.com/tensorflow/tfjs-models/tree/master/mobilenet\" target=\"_blank\" rel=\"noopener noreferrer\">Image Classification</a> model from TensorFlow. This TensorFlow.js model does not require knowledge of machine learning. It can take any browser-based image elements (`<img>`, `<video>`, `<canvas>`, for example) as input and return an array of the most likely predictions and their confidences.\n\nThe array of classes and probabilities for our image can be seen below:\n\n```js\n[\n    {\n        className: \"castle\",\n        probability: 0.21438449621200562,\n    },\n    {\n        className: \"suspension bridge\",\n        probability: 0.1847757250070572,\n    },\n    {\n        className: \"lakeside, lakeshore\",\n        probability: 0.18075722455978394,\n    },\n];\n```\n\nLet's analyse the results above. The highest probability was for a castle, which is inaccurate since there is no castle in the image. The second highest probability was for a suspension bridge, which is correct since there is a bridge in the photo. The final prediction was for a lakeside or lake shore, which is also incorrect because there is a river in the image, not a lake.\n\nTherefore, the only useful label from the predictions above is suspension bridge.\n\n### **Object Detection** with TensorFlow\n\nWe pass the image through the <a href=\"https://github.com/tensorflow/tfjs-models/tree/master/coco-ssd\" target=\"_blank\" rel=\"noopener noreferrer\">Object Detection</a> model from TensorFlow as a second step. This model aims to identify multiple objects in a single image and is capable of detecting 80 different classes of objects. Unfortunately, in the case of the image of the city of Melbourne, the model was not able to detect any objects, resulting in an empty array. For demonstration purposes, the following example shows how the output would appear if we used an image in which objects could be detected:\n\n```js\n[\n    {\n        bbox: [x, y, width, height],\n        class: \"person\",\n        score: 0.8380282521247864,\n    },\n    {\n        bbox: [x, y, width, height],\n        class: \"kite\",\n        score: 0.74644153267145157,\n    },\n];\n```\n\nAs we can see from the example above, this mode returns an array of bounding boxes with class names and confidence levels. Unfortunately, in our case, we received an empty array, so we did not get any predictions for our particular image.\n\nLet's move on to the next models from Transformers.js.\n\n### Image captioning with Transformers.js\n\nImage captioning is the process of generating a description or caption from an input image. This requires both natural language processing and computer vision to generate the caption. To accomplish this, we use a model called <a href=\"https://huggingface.co/nlpconnect/vit-gpt2-image-captioning\" target=\"_blank\" rel=\"noopener noreferrer\">vit-gpt2-image-captioning</a> from Transformers.js. Using this model, giving us the following output for the image above:\n\n```js\n[\n    {\n        generated_text: \"a bridge over a river with a city\",\n    },\n];\n```\n\nAs we can see from the text above, the capture is pretty accurate. We got fairly accurate results for this particular image, but for every image, the results are different. When experimenting with different images, I sometimes get results that are not as accurate as this one. However, the next step will be to extract the nouns and verbs from the sentence above. How can we do that?\n\nI won't go into the details of this step, but we will be using Chat GPT to ask it to return an array of all the nouns and verbs from the generated text above. It works quite well. Here are the results returned by Chat GPT:\n\n```js\n[\"bridge\", \"river\", \"city\"];\n```\n\nBasically, we can use only these three labels from the last model prediction and skip all the TensorFlow model usage. However, as I mentioned earlier, this is not the case for every image. In some cases, the Image Classification mode from TensorFlow can give us more accurate results. Therefore, we will keep both models for better predictions.\n\nNow that we have all the predictions in place, the next step is to figure out which predicted labels are really included in the image. As human beings, we can easily determine that, but in the case of automation, we need to find a way to handle this automatically without human input. This is where the zero-shot image classification model that I mentioned earlier comes into play.\n\n### Zero-shot image classification with Transformers.js\n\nZero Shot Classification is the task of predicting a class that wasn't seen by the model during training. In other words, a zero-shot model allows us to classify data that wasn't used to build the model. For example, imagine a child is asked to recognise a zebra in a zoo. The child has never seen a zebra before, but they have seen a horse. By telling the child that a zebra is very similar to a horse but with black and white stripes, the child can recognise a zebra easily. This is essentially how the model works.\n\nThis is the opposite of what we've done before. In previous models, we give them an image, and they give us predictions on what can be included in the image. In zero-shot image classification, we provide both text predictions and an image, and the model can tell us which texts are highly likely to be included in the image.\n\nIn our case, we will be using <a href=\"https://huggingface.co/openai/clip-vit-base-patch32\" target=\"_blank\" rel=\"noopener noreferrer\">clip-vit-base-patch32</a> from Transformers.js, which utilises the CLIP model developed by researchers at OpenAI.\n\nAll predicted labels previously assigned to the image are passed to this model. As a result, we receive the following output:\n\n```js\n[\n    {\n        score: 0.36474844813346863,\n        label: \"bridge\",\n    },\n    {\n        score: 0.22917157411575317,\n        label: \"suspension bridge\",\n    },\n    {\n        score: 0.223050057888031,\n        label: \"city\",\n    },\n    {\n        score: 0.1010189950466156,\n        label: \"river\",\n    },\n    {\n        score: 0.0377478264272213,\n        label: \" lakeshore\",\n    },\n    {\n        score: 0.02330002561211586,\n        label: \"lakeside\",\n    },\n    {\n        score: 0.020963076502084732,\n        label: \"castle\",\n    },\n];\n```\n\nAs seen from the results above, this model is capable of giving pretty accurate scores for all the labels and determining which are most likely to be included in the image. Based on my previous experimentation while developing this application, I realised that the top three to five labels are fairly accurate. For our app, we will only focus on the top four labels. Next, we will explore the capabilities of LangChain and the specific feature we used from this framework to generate a meaningful description.\n\n## LangChain\n\nWorking with LLMs can be challenging, especially when working on a complex web application. I find managing memory and writing clear instructions (prompts) to be the two most challenging aspects. Fortunately, LangChain provides a solution to both of these issues and more.\n\nLangChain is an open-source framework that supports both Python and TypeScript. It allows you to build applications that use LLMs. LangChain provides a simple interface that makes it easy to connect LLMs to our application. One of the key features that LangChain provides to help manage different prompts is chains. LangChain has different types of chains, and the one we use in our application is called the <a href=\"https://js.langchain.com/docs/modules/chains/other_chains/multi_prompt_chain\" target=\"_blank\" rel=\"noopener noreferrer\">Multi-Prompt Chain</a>. This allows us to use more than one prompt template and pick an appropriate prompt based on the user's question.\n\nTo make this clearer, let me give an example of how this applies to our application. We use different prompt templates in our application for different purposes. For example, we use one prompt to give instructions to the model on how to write a description, another prompt to handle Instagram descriptions, and a third prompt for writing an alt text. Each of these prompt templates has different instructions. For instance, when we want the model to assist the user in writing an Instagram caption, we provide instructions to add some emojis and hashtags. So, when someone asks for writing a description or an alt text, different instructions are given. We can fine-tune the output based on specific prompt templates for specific scenarios. In my experience, writing multiple short prompts instead of one large single prompt drastically improves the quality of the model's output.\n\nMemory is another concept that LangChain solves out of the box. For applications like chatbots, it is essential that they can remember previous conversations. However, by default, LLMs do not have any long-term memory unless you input the chat history. LangChain solves this problem by providing several options for dealing with chat history: keeping all conversations, keeping only the latest number of conversations, or summarising the conversation. In our app, we use the option to keep the latest number conversations, so we remember the last ten conversations.\n\nThese are only a small number of the features that LangChain can offer. I highly recommend checking the LangChain documentation to learn more about the awesome features this tool provides.\n\n## Conclusion\n\nI enjoyed developing this chatbot that helps humans write their descriptions base on an image. This is a beta version, and I have plans to improve it in the future, but it's a good starting point. It's still not perfect and can sometimes get confused, but as technology progresses and new models become available, I'm confident we'll be able to get much better results.\n\nIf you want to try it, follow this link: <a href=\"https://image-to-text-ai-chat.vercel.app/\" target=\"_blank\" rel=\"noopener noreferrer\">here</a>. All you need to do is provide your OpenAI API key at the bottom of the page.\n\nFor those who want to see the source code, it's available on GitHub at this link: <a href=\"https://github.com/Suv4o/Image-to-Text-AI-Chat\" target=\"_blank\" rel=\"noopener noreferrer\">here</a>. Please keep in mind that this only works on Chrome and Mozilla for now. Safari is not currently supported. I hope you enjoy it!\n"
  },
  {
    "articlePath": "/2023/10/23/grouping-images-by-colours-exploring-colour-based-image-clustering",
    "embeddings": [
      -0.07108104228973389,
      0.018456928431987762,
      -0.0015367327723652124,
      0.046985726803541183,
      0.08661755174398422,
      -0.03507336229085922,
      -0.016933634877204895,
      -0.024780796840786934,
      0.04474348947405815,
      0.02228117547929287,
      0.015290116891264915,
      0.08136004209518433,
      0.13766583800315857,
      0.07693249732255936,
      -0.053090211004018784,
      0.08596103638410568,
      -0.10904596745967865,
      0.039266135543584824,
      -0.10021587461233139,
      -0.07238683849573135,
      -0.04093972593545914,
      -0.026230040937662125,
      0.06924895942211151,
      -0.05678718537092209,
      -0.06813313066959381,
      0.05311105400323868,
      -0.029665973037481308,
      -0.028688618913292885,
      -0.060617752373218536,
      -0.06085652485489845,
      0.04861181601881981,
      0.04841221868991852,
      0.05342884734272957,
      0.048662394285202026,
      0.018273329362273216,
      0.07746558636426926,
      -0.024743499234318733,
      -0.0000054686715884599835,
      -0.01106090098619461,
      0.019574861973524094,
      0.002162417396903038,
      0.04391247034072876,
      0.01136607676744461,
      -0.0758407711982727,
      0.04074842855334282,
      0.02498755045235157,
      -0.05382036790251732,
      -0.010080653242766857,
      -0.06992245465517044,
      -0.02323991060256958,
      -0.09652300179004669,
      -0.0810740664601326,
      -0.08566844463348389,
      0.06697137653827667,
      -0.03597608953714371,
      0.03199367970228195,
      -0.000026534256903687492,
      -0.09666368365287781,
      0.03795509412884712,
      -0.056959476321935654,
      0.048569150269031525,
      -0.05704129487276077,
      -0.026418395340442657,
      -0.019093411043286324,
      0.03575989231467247,
      0.07737324386835098,
      0.030974626541137695,
      0.0298365019261837,
      0.05602344125509262,
      -0.06407856196165085,
      0.05292772501707077,
      0.04992811381816864,
      0.07916088402271271,
      0.06037971004843712,
      0.01380646601319313,
      0.007093226071447134,
      0.04210749268531799,
      -0.018683522939682007,
      -0.01893696002662182,
      -0.11093627661466599,
      -0.03185700625181198,
      -0.04405538737773895,
      0.053849175572395325,
      0.05951246619224548,
      0.09620072692632675,
      0.0017916903598234057,
      -0.04820859432220459,
      0.025961216539144516,
      -0.018667588010430336,
      -0.06660518050193787,
      -0.05520891398191452,
      0.0032283440232276917,
      -0.04228656366467476,
      0.002024600747972727,
      0.0011767051182687283,
      -0.010319599881768227,
      0.12221508473157883,
      -0.07357905060052872,
      -0.017003988847136497,
      0.07075168937444687,
      0.004203314892947674,
      -0.05758647620677948,
      0.027948632836341858,
      -0.06568652391433716,
      0.06794875115156174,
      -0.008063562214374542,
      0.00826165173202753,
      0.0011459075612947345,
      0.03623964264988899,
      -0.05874757468700409,
      -0.020494665950536728,
      0.01986362785100937,
      -0.0745946541428566,
      -0.01188666932284832,
      -0.059458330273628235,
      0.022087134420871735,
      0.06230958178639412,
      -0.03609725087881088,
      0.038009315729141235,
      0.029519418254494667,
      0.08319728076457977,
      0.012947142124176025,
      -0.06407447904348373,
      -0.022754494100809097,
      0.03756263479590416,
      0.011471175588667393,
      -0.00842680037021637,
      5.920617172232416e-33,
      0.06004301831126213,
      -0.014027267694473267,
      0.05059267580509186,
      -0.02373274229466915,
      0.11658786982297897,
      -0.007184755988419056,
      -0.031183836981654167,
      -0.06230584532022476,
      -0.11710502952337265,
      -0.0817527025938034,
      -0.02870611846446991,
      0.0789535865187645,
      -0.06469952315092087,
      0.052574269473552704,
      0.009884292259812355,
      -0.06806410849094391,
      0.010336698032915592,
      0.04110271856188774,
      -0.027228020131587982,
      -0.019986657425761223,
      -0.05432555451989174,
      -0.026689259335398674,
      -0.000998072326183319,
      -0.003810606664046645,
      -0.07914459705352783,
      0.001980756176635623,
      0.017787260934710503,
      -0.04363592714071274,
      0.07913065701723099,
      -0.012660578824579716,
      -0.023111922666430473,
      0.015624599531292915,
      -0.03770982474088669,
      0.013698424212634563,
      -0.029895545914769173,
      -0.02326389029622078,
      -0.04476221650838852,
      -0.04797318950295448,
      0.029603594914078712,
      0.04717226326465607,
      0.0030680610798299313,
      0.0315498448908329,
      0.042809806764125824,
      -0.10840480774641037,
      -0.0024686509277671576,
      0.09075827896595001,
      -0.008355905301868916,
      0.04428858309984207,
      0.06003206595778465,
      0.03500116989016533,
      -0.05089467763900757,
      -0.032900914549827576,
      -0.0047384765930473804,
      0.003581640310585499,
      0.008333253674209118,
      -0.01889723725616932,
      0.027418963611125946,
      0.0034890573006123304,
      0.060281891375780106,
      -0.03378705307841301,
      0.03551982343196869,
      0.0200567077845335,
      0.02178998291492462,
      0.0036897724494338036,
      0.06450903415679932,
      -0.027724435552954674,
      0.09617789089679718,
      0.10010232031345367,
      0.016541335731744766,
      0.04423338174819946,
      -0.04156152158975601,
      0.10441618412733078,
      0.04885256290435791,
      -0.028654061257839203,
      0.08022698014974594,
      -0.01167360134422779,
      0.052604977041482925,
      -0.03071299009025097,
      -0.08690175414085388,
      -0.031072476878762245,
      -0.0310799703001976,
      -0.03530803322792053,
      -0.013204769231379032,
      -0.05187411233782768,
      -0.1362726390361786,
      0.040101662278175354,
      0.0738062858581543,
      -0.028603052720427513,
      -0.09045030921697617,
      -0.11548767983913422,
      -0.03085535578429699,
      0.06987173855304718,
      -0.011145045049488544,
      -0.029076820239424706,
      -0.024971578270196915,
      -4.386300966769717e-33,
      0.070523202419281,
      -0.010811283253133297,
      0.021219754591584206,
      0.0660519078373909,
      0.0707663968205452,
      -0.06403068453073502,
      -0.00023186311591416597,
      0.04914310202002525,
      0.013497584499418736,
      -0.01720157079398632,
      0.031541481614112854,
      -0.02764090523123741,
      -0.09506824612617493,
      -0.020879434421658516,
      -0.02142617665231228,
      0.016672518104314804,
      0.004815731663256884,
      -0.04338616505265236,
      0.0593172125518322,
      0.024111997336149216,
      -0.0946153923869133,
      0.0514882393181324,
      0.01543671265244484,
      0.04952023923397064,
      -0.04387795552611351,
      0.08611370623111725,
      0.08889945596456528,
      0.030328713357448578,
      -0.006872315425425768,
      -0.020952574908733368,
      -0.041666340082883835,
      -0.017749743536114693,
      -0.09503749012947083,
      -0.002592352917417884,
      -0.034064434468746185,
      -0.004258120898157358,
      -0.023815035820007324,
      0.007847989909350872,
      -0.02532821148633957,
      0.07991917431354523,
      0.003582550911232829,
      0.013197774067521095,
      -0.08395695686340332,
      -0.07291301339864731,
      -0.024998586624860764,
      -0.07320735603570938,
      0.03954204544425011,
      0.061875782907009125,
      -0.045187510550022125,
      0.005976160056889057,
      -0.002018391853198409,
      -0.01786211133003235,
      -0.06482972204685211,
      -0.011237517930567265,
      0.01054186187684536,
      -0.017887413501739502,
      0.038199394941329956,
      0.030193690210580826,
      -0.06616803258657455,
      0.03049175813794136,
      -0.07204380631446838,
      -0.031031856313347816,
      -0.049802470952272415,
      -0.04263602942228317,
      -0.032934073358774185,
      -0.0313691683113575,
      -0.08076128363609314,
      -0.07866576313972473,
      -0.04639306664466858,
      0.0744144394993782,
      0.01197350025177002,
      -0.001729891519062221,
      0.07639472931623459,
      0.016576547175645828,
      0.019595691934227943,
      -0.018106253817677498,
      0.04733305051922798,
      0.03931613638997078,
      0.055912017822265625,
      -0.08212406188249588,
      -0.04230760410428047,
      -0.03822951018810272,
      0.056135762482881546,
      0.08599459379911423,
      0.03246650472283363,
      0.06966518610715866,
      -0.01818530634045601,
      0.003090174635872245,
      0.06513649970293045,
      -0.04054451733827591,
      0.002021392807364464,
      -0.035302452743053436,
      0.15647511184215546,
      0.09033309668302536,
      0.023831864818930626,
      -5.928983881631211e-8,
      -0.011873111128807068,
      -0.02533610537648201,
      -0.017840808257460594,
      -0.036418892443180084,
      -0.008357065729796886,
      -0.024463659152388573,
      0.08544176816940308,
      0.03465955704450607,
      -0.03146249055862427,
      0.010445243678987026,
      0.13118386268615723,
      0.000667128071654588,
      -0.0558733232319355,
      0.013187362812459469,
      -0.05992448329925537,
      0.05588334798812866,
      0.035172294825315475,
      -0.01174131315201521,
      -0.0523160919547081,
      0.030749976634979248,
      -0.014302311465144157,
      -0.01934865489602089,
      0.005365849006921053,
      -0.017372043803334236,
      0.033029619604349136,
      0.04880159720778465,
      -0.05600713565945625,
      0.008792413398623466,
      0.03417825698852539,
      -0.05272585153579712,
      -0.0016732014482840896,
      0.01854921691119671,
      0.01700560748577118,
      0.005772184114903212,
      0.03156441077589989,
      -0.005535213276743889,
      -0.10916788876056671,
      0.040574345737695694,
      -0.11462995409965515,
      0.020744575187563896,
      -0.033560119569301605,
      0.019184229895472527,
      -0.009828637354075909,
      -0.0434921570122242,
      0.13817381858825684,
      -0.03806014358997345,
      0.05340828374028206,
      -0.014453980140388012,
      0.05114973708987236,
      0.056319091469049454,
      -0.0037521834019571543,
      -0.06687506288290024,
      0.025650806725025177,
      0.05736653879284859,
      -0.015811258926987648,
      -0.014135023579001427,
      0.019331417977809906,
      0.005528868176043034,
      0.05803029239177704,
      0.027738120406866074,
      0.029033474624156952,
      -0.062223002314567566,
      -0.0022132510785013437,
      0.029919328168034554
    ],
    "content": "---\ntitle: Grouping images by Colours - Exploring Colour-Based Image Clustering\ndescription: The idea for this experimental project, which I am going to demonstrate in this blog article, came to me from the Office Works website. Here's how it all happened. As a hobbyist landscape photographer, I have accumulated hundreds of images over the years. Recently, I decided to print these photos in a 10x12\" photo book. I immediately checked the Office Works website to see if they offer such a service, and I was in luck. Office Works has an incredible platform that allows customers to easily create photo books using their online editor. While I was able to accomplish what I wanted, there was one feature that I was missing but would be nice to have the ability to sort all of the images based on their colours. In my case, I uploaded 160 images, and manually sorting all of them was a bit tedious.\nimage: https://res.cloudinary.com/suv4o/image/upload/q_auto,f_auto,w_1200,e_sharpen:100/v1697956564/blog/grouping-images-by-colours/ot79c0slnfykfnvy5i9e\nkeywords:\n    - LangChain\n    - AI\n    - Python\n    - Artificial Intelligence\n    - ML\n    - Machine Learning\n    - Chat GPT\n    - Image Classification\n    - Web Development\n    - Development\ntype: page\nblog: post\npublished: 23rd October 2023\nreadTime: 8\nauthor: Aleksandar Trpkovski\narticleTags:\n    - Python\n    - LangChain\n    - AI\n---\n\n# Grouping images by Colours - Exploring Colour-Based Image Clustering\n\n_{{$document.published}} • {{$document.readTime}} min read — by **[{{$document.author}}](/)**_\n\n::tag-pills{:tags=\"articleTags\"}\n::\n\n![Landing Image](https://res.cloudinary.com/suv4o/image/upload/q_auto,f_auto,w_750,e_sharpen:100/v1697956564/blog/grouping-images-by-colours/ot79c0slnfykfnvy5i9e.jpg)\n\nThe idea for this experimental project, which I am going to demonstrate in this blog article, came to me from the Office Works website. Here's how it all happened.\n\nAs a hobbyist landscape photographer, I have accumulated hundreds of images over the years. Recently, I decided to print these photos in a 10x12\" photo book. I immediately checked the Office Works website to see if they offer such a service, and I was in luck. Office Works has an incredible platform that allows customers to easily create photo books using their online editor.\n\nWhile I was able to accomplish what I wanted, there was one feature that I was missing but would be nice to have: the ability to sort all of the images based on their colours. In my case, I uploaded 160 images, and manually sorting all of them was a bit tedious.\n\nAs a software developer, I thought that this would be an interesting side project to see how far I could go in implementing this kind of sorting and grouping of images based on their colours hues. So here is how it all went.\n\n## The Problem\n\nTo demonstrate this example, I will use the 10 photos shown in the image below:\n\n![Original Images](https://res.cloudinary.com/suv4o/image/upload/q_auto,f_auto,w_750,e_sharpen:100/v1697965697/blog/grouping-images-by-colours/knfc7u1v025fbbuycq2m)\n\nThe photos shown in the image are not sorted based on their hues, resulting in an unpleasing visual arrangement. It would be better if the photos were categorised into three groups based on their colour hues, as demonstrated in the subsequent image.\n\n![Groped Images](https://res.cloudinary.com/suv4o/image/upload/q_auto,f_auto,w_750,e_sharpen:100/v1697965670/blog/grouping-images-by-colours/hpepiyqamctzegdz8ttn)\n\nWhile it is not a big deal when we have just 10 images, as we can easily group them manually, it becomes a much bigger job when we have 160, as was the case for me. Some sort of automation would be very helpful in this situation.\n\n## The solution\n\nFor my solution to automatically sort images based on hues, I utilised several technologies. In the following sections, I will provide a detailed explanation of how each technology was implemented. Here is a brief overview of the technologies used:\n\n- <a href=\"https://www.python.org/\" target=\"_blank\" rel=\"noopener noreferrer\">Python</a> (programming language)\n- <a href=\"https://www.langchain.com/\" target=\"_blank\" rel=\"noopener noreferrer\">LangChain</a> (framework for working with LLMs)\n- <a href=\"https://chat.openai.com/\" target=\"_blank\" rel=\"noopener noreferrer\">ChatGPT</a> 3.5 turbo (LLM)\n- <a href=\"https://www.sbert.net/\" target=\"_blank\" rel=\"noopener noreferrer\">SentenceTransformer</a> with the `all-MiniLM-L6-v2` open source model (used for generating embeddings to calculate similarities)\n\nThe diagram below provides an overview of the implementation. Lets analyse each step of the diagram in more detail below.\n\n![Diagram - Grouping images by Colours - Exploring Colour-Based Image Clustering](https://res.cloudinary.com/suv4o/image/upload/q_auto,f_auto,w_750,e_sharpen:100/v1697966006/blog/grouping-images-by-colours/n0d2cdowobpbp6tbk1xb)\n\n### Extract Colours from a photo using KMeans clustering\n\nIn the first step, each photo is loaded, and then each pixel is analysed using several Python libraries that help accomplish this, such a `scikit-learn`, `opencv-python`, `numpy`, and `pillow`. Then each pixel is assigned to one of the 5 clusters, represented by a hex value, using KMeans. Increasing the number of clusters results in more accurate classifications, but it also affects the processing speed, resulting in slower processing time. We stick with 5 clusters since they are more than enough for our purpose. I also tried classification with 10 clusters, but that resulted in doubling the processing time. I will share some time comparisons in the later section of this document.\n\nThe image below shows how the hues of a photo are grouped into 5 clusters with different hex colours values.\n\n![Clusters](https://res.cloudinary.com/suv4o/image/upload/q_auto,f_auto,w_750,e_sharpen:100/v1697966134/blog/grouping-images-by-colours/mkubxeofuui2juhl3k0y)\n\nThis implementation that I used here is part of an open source project I found on Hugging Face <a href=\"https://huggingface.co/spaces/Shamima/extract-color-from-image\" target=\"_blank\" rel=\"noopener noreferrer\">here</a>. The author of the project, Shamima Hossain, has done an amazing job implementing this. She has also contributed to a lot of open source projects regarding AI and ML work. If you are interested, you can find her work on GitHub <a href=\"https://github.com/silvererudite\" target=\"_blank\" rel=\"noopener noreferrer\">here</a> or follow her on <a href=\"https://twitter.com/ShamimaHossai13\" target=\"_blank\" rel=\"noopener noreferrer\">Twitter</a>.\n\n## Colour classification\n\nTo group the photos based on their most used hex colours, we need to consider that it is unlikely for two photos to have identical hex values. Therefore, we will categorise the photos into similar colour groups based on their hues.\n\nTo accomplish this task, we need a comprehensive list of colours that covers the entire spectrum. To obtain the list, I asked chat GPT to provide it for me. My exact question was as follows:\n\n\"**_Give me a list of colours different variations from all spectrum. I am going to use this colour labels to classify hex colours. Give me as many colour labels as possible. Including white and black variations.\"_**\n\nThe response was the following list of colours that are shown in the image below:\n\n![Entire Spectrum](https://res.cloudinary.com/suv4o/image/upload/q_auto,f_auto,w_750,e_sharpen:100/v1697966229/blog/grouping-images-by-colours/vtsor7rqjbxno6dux7gf)\n\nThe next step is to categorise the hex values of each photo into one of the mentioned colours names.\n\nTo accomplish this task, I utilised the OpenAI function with the LangChain framework. The language model used was Chat GPT. The prompt and the structure of the JSON output were as follows:\n\n```python\n[\n     (\n         \"system\",\n         \"You are a hex colour to colour name converter. You are given a hex colour and you must return the colour name. The hex colour must belong in one of the following descriptive colour labels: Red, Crimson, Scarlet, Vermilion, Maroon, Rose, Pink, Magenta, Fuchsia, Purple, Lavender, Indigo, Blue, Navy, Azure, Cyan, Teal, Turquoise, Green, Emerald, Lime, Chartreuse, Olive, Yellow, Gold, Amber, Orange, Peach, Apricot, Brown, Sienna, Chocolate, Tan, Beige, Khaki, Gray, Silver, Charcoal, White, Ivory, Cream, Pearl, Platinum, Jet Black, Onyx Black\",\n     ),\n     (\"human\", \"Use the given hex color to classify into a colour name: {input}\"),\n     (\"human\", \"Tip: Make sure to use the labels that were provided to classify the colour.\"),\n ]\n\njson_schema = {\n    \"title\": \"Colour\",\n    \"description\": \"Convert a hex colour to a colour name\",\n    \"type\": \"object\",\n    \"properties\": {\n        \"colour_name\": {\"type\": \"string\", \"description\": \"The colour name\"},\n        \"hex_colour\": {\"type\": \"string\", \"description\": \"The hex colour\"},\n    },\n    \"required\": [\"colour_name\"],\n}\n```\n\nBased on the earlier shown image, we proceeded to group each hex colour using the Open AI function. The result was as follows:\n\n![Clusters-2](https://res.cloudinary.com/suv4o/image/upload/q_auto,f_auto,w_750,e_sharpen:100/v1697966349/blog/grouping-images-by-colours/gwpg8rwo4x9gutthnucr)\n\n## Photo group classification using embeddings\n\nThe last step is to compare the similarities between each photo based on the colour grouping we did in the previous section. This can be easily accomplished by converting the colour names into embeddings and comparing them using a similarity score. To do this, we utilise a Python library called SentenceTransformer, along with an open-source model called `all-MiniLM-L6-v2`, which I have locally served.\n\nThe number of clusters was specified to be 3, since the number of photos in this example is relatively small (only 10 photos).\n\n# Performance\n\nFor this example, I used several different setups to measure the time it takes to run the photo grouping:\n\n- 10 photos with a resolution of 1024px on the longer side and 5 colour clusters: 157.10 seconds\n- 10 photos with a resolution of 2048px on the longer side and 5 colour clusters: 210.68 seconds\n- 10 photos with a resolution of 2048px on the longer side and 10 colour clusters: 397.74 seconds\n- 14 photos with a resolution of 2048px on the longer side and 10 colour clusters: 1029.08 seconds\n\nI used my personal machine, which has an Apple M1 Max with 64GB of memory. As expected, the performance was slower when using higher photo resolutions and more clusters.\n\n# Resources\n\n- Project GitHub repository: <a href=\"https://github.com/Suv4o/image_classification_based_on_colours\" target=\"_blank\" rel=\"noopener noreferrer\">here</a>\n- Shamima Hossain - Extract colours from an image using KMeans clustering: <a href=\"https://huggingface.co/spaces/Shamima/extract-color-from-image\" target=\"_blank\" rel=\"noopener noreferrer\">here</a>\n- Hugging Face - `all-MiniLM-L6-v2` model: <a href=\"https://huggingface.co/sentence-transformers/all-MiniLM-L6-v2\" target=\"_blank\" rel=\"noopener noreferrer\">here</a>\n"
  },
  {
    "articlePath": "/2024/01/23/how-to-define-multiple-components-in-a-single-file-in-nuxt-using-jsx",
    "embeddings": [
      -0.05849895998835564,
      0.00800162460654974,
      0.030469045042991638,
      0.03874163702130318,
      0.0649595707654953,
      0.018942777067422867,
      0.014781993813812733,
      0.07053127884864807,
      0.07485232502222061,
      -0.011723603121936321,
      -0.003909612074494362,
      0.0169990211725235,
      0.017839068546891212,
      0.05760641768574715,
      0.04528066888451576,
      0.03142542392015457,
      -0.09217054396867752,
      0.04597833380103111,
      -0.04943520203232765,
      0.021062936633825302,
      0.08116770535707474,
      0.000013673447028850205,
      0.04563399776816368,
      -0.07145566493272781,
      -0.0110782440751791,
      0.052074458450078964,
      -0.044233083724975586,
      -0.03023996762931347,
      -0.053631071001291275,
      -0.0846133753657341,
      0.09779918193817139,
      0.10561378300189972,
      -0.07971178740262985,
      0.01825091801583767,
      -0.00791665818542242,
      0.07120400667190552,
      -0.03202752023935318,
      -0.00021717097843065858,
      -0.05656629800796509,
      -0.04926818609237671,
      0.06583058089017868,
      0.07662922143936157,
      -0.11316896229982376,
      -0.0696868896484375,
      0.017108125612139702,
      -0.04106897488236427,
      -0.041426174342632294,
      -0.09799175709486008,
      -0.01907747983932495,
      -0.009015149436891079,
      -0.05949399992823601,
      -0.09092786908149719,
      0.016093622893095016,
      0.06125327944755554,
      -0.00939241237938404,
      0.0007836711592972279,
      -0.060714930295944214,
      0.0003029619110748172,
      0.046423956751823425,
      -0.027889970690011978,
      0.03269418329000473,
      -0.03567158803343773,
      0.0177652295678854,
      -0.020326754078269005,
      0.08980640023946762,
      0.05657549574971199,
      0.001991374883800745,
      0.014760040678083897,
      -0.05145660415291786,
      0.029817979782819748,
      -0.04115833714604378,
      0.025407835841178894,
      0.059119585901498795,
      0.021099306643009186,
      0.006094641052186489,
      -0.06492909044027328,
      0.017732836306095123,
      0.002036713995039463,
      0.05179229751229286,
      -0.08712291717529297,
      -0.04244481027126312,
      -0.01038802694529295,
      0.0079145897179842,
      -0.033175934106111526,
      0.04311184212565422,
      0.08945465087890625,
      -0.0035010732244700193,
      -0.05510445684194565,
      0.0390293151140213,
      -0.05574096739292145,
      -0.10888690501451492,
      -0.014037889428436756,
      0.0839846208691597,
      0.06549990177154541,
      0.08605463057756424,
      0.018455715849995613,
      -0.008894296362996101,
      0.10067548602819443,
      0.0006043975590728223,
      0.005851707886904478,
      0.023221051320433617,
      0.023329978808760643,
      0.034834135323762894,
      0.0695343017578125,
      0.07710297405719757,
      -0.00044477166375145316,
      0.01679704152047634,
      -0.03595319017767906,
      -0.06782309710979462,
      -0.02654704637825489,
      -0.006812347564846277,
      0.07708004862070084,
      -0.029347900301218033,
      -0.08609375357627869,
      -0.030678480863571167,
      0.022343959659337997,
      0.08084956556558609,
      0.01749063841998577,
      0.07584033906459808,
      0.04422544315457344,
      0.10140831023454666,
      -0.021729974076151848,
      0.001409023767337203,
      0.021754035726189613,
      0.04646436870098114,
      -0.05254368856549263,
      0.00021395701332949102,
      7.855619361614107e-33,
      -0.043385591357946396,
      0.032920509576797485,
      -0.061824504286050797,
      0.04987151548266411,
      0.03163226321339607,
      -0.06524942815303802,
      0.014963659457862377,
      -0.041414156556129456,
      -0.16319319605827332,
      0.044236939400434494,
      -0.020044958218932152,
      0.03746592253446579,
      -0.055845122784376144,
      0.05025095492601395,
      -0.0038935369811952114,
      -0.03912890702486038,
      0.03123326040804386,
      0.03606661036610603,
      -0.013292190618813038,
      -0.01482095941901207,
      0.034929338842630386,
      0.03192787617444992,
      -0.03879629075527191,
      0.044057659804821014,
      -0.03902297466993332,
      -0.02275252155959606,
      0.03504609689116478,
      -0.005433084908872843,
      -0.03609325736761093,
      -0.056335389614105225,
      0.04209205135703087,
      0.004506517667323351,
      0.04618782177567482,
      0.04140534624457359,
      0.0137286726385355,
      -0.024676524102687836,
      0.008177459239959717,
      0.002143504796549678,
      -0.1109229177236557,
      -0.011009623296558857,
      0.022787058725953102,
      0.06477810442447662,
      -0.013229685835540295,
      -0.09655476361513138,
      -0.052772533148527145,
      0.010473749600350857,
      -0.03626308962702751,
      0.060016848146915436,
      0.050323572009801865,
      -0.02276218682527542,
      -0.06495024263858795,
      0.06002795696258545,
      -0.0017179383430629969,
      -0.04115737974643707,
      0.07139792293310165,
      0.03633333742618561,
      0.03075530380010605,
      0.0020627793855965137,
      0.04856034368276596,
      -0.03682544454932213,
      -0.049799028784036636,
      0.015086266212165356,
      -0.0016445545479655266,
      0.0010222276905551553,
      -0.0012652203440666199,
      0.057384151965379715,
      0.03765637055039406,
      0.06057876721024513,
      -0.019754789769649506,
      -0.004930081311613321,
      -0.06591198593378067,
      0.0872386023402214,
      0.02704288810491562,
      -0.09195094555616379,
      0.11429940164089203,
      -0.11702238768339157,
      -0.024803683161735535,
      -0.06912478059530258,
      -0.008817008696496487,
      -0.028298400342464447,
      -0.01852448470890522,
      0.006753767374902964,
      -0.04584641009569168,
      0.07606477290391922,
      -0.022160392254590988,
      -0.0281364843249321,
      0.03051874414086342,
      -0.03634841367602348,
      -0.00785671453922987,
      -0.03391144052147865,
      -0.001810416579246521,
      -0.016245227307081223,
      -0.041737932711839676,
      -0.15053482353687286,
      -0.06841927021741867,
      -6.070067687286038e-33,
      0.09165048599243164,
      0.04291579872369766,
      -0.009297158569097519,
      0.0904136374592781,
      0.038040511310100555,
      0.012224365957081318,
      0.006774093024432659,
      0.037321787327528,
      0.024309655651450157,
      -0.05660315975546837,
      0.0033538220450282097,
      -0.0315830372273922,
      -0.03435129672288895,
      -0.0661664754152298,
      -0.034994352608919144,
      0.12793168425559998,
      -0.025234434753656387,
      -0.08123666048049927,
      0.08594584465026855,
      -0.07724206894636154,
      -0.005106235388666391,
      0.0428045392036438,
      0.047867197543382645,
      0.05563858523964882,
      0.03387840464711189,
      0.03254138305783272,
      0.06160448491573334,
      0.08134888112545013,
      -0.049746073782444,
      -0.05926629528403282,
      -0.054053764790296555,
      0.011895191855728626,
      -0.08768369257450104,
      -0.04153170436620712,
      -0.003629617393016815,
      -0.0034661300014704466,
      -0.02129378728568554,
      0.03105895407497883,
      0.0016229436732828617,
      0.014640048146247864,
      -0.01971523091197014,
      0.026801900938153267,
      -0.042809709906578064,
      -0.021039137616753578,
      -0.0756015032529831,
      -0.012824208475649357,
      0.06519204378128052,
      0.02573014236986637,
      0.0031210852321237326,
      0.0029588767793029547,
      0.019519243389368057,
      -0.1196284070611,
      -0.07555809617042542,
      0.03977245092391968,
      -0.00523343263193965,
      -0.06292189657688141,
      0.05284680426120758,
      -0.029238447546958923,
      -0.022638021036982536,
      -0.054720889776945114,
      0.03195066750049591,
      -0.04555237293243408,
      0.020893117412924767,
      -0.02292044274508953,
      0.010343420319259167,
      -0.07479877769947052,
      -0.10603215545415878,
      -0.05388883873820305,
      0.034249916672706604,
      -0.008551869541406631,
      -0.00847616232931614,
      0.053391773253679276,
      0.06172478199005127,
      -0.0016357803251594305,
      0.028847305104136467,
      -0.033265821635723114,
      0.06900491565465927,
      -0.042962800711393356,
      0.07053044438362122,
      -0.016537170857191086,
      -0.10317816585302353,
      0.007242340128868818,
      -0.008804600685834885,
      0.03556937351822853,
      0.0234555434435606,
      0.07308180630207062,
      -0.0015508548822253942,
      0.05372532829642296,
      0.043882645666599274,
      -0.019992146641016006,
      -0.03437098115682602,
      0.023100685328245163,
      0.04199446737766266,
      0.05398779734969139,
      -0.03451532498002052,
      -5.626977994666049e-8,
      -0.034466590732336044,
      -0.01799246482551098,
      -0.13855113089084625,
      -0.08364791423082352,
      -0.04717401787638664,
      0.023305412381887436,
      0.03366304188966751,
      -0.02486814185976982,
      -0.01799912378191948,
      0.04047900810837746,
      0.14394022524356842,
      0.10233891010284424,
      -0.022399796172976494,
      0.020510787144303322,
      -0.042967624962329865,
      0.0009602115023881197,
      0.0061577074229717255,
      0.055154092609882355,
      -0.06389768421649933,
      -0.01311181765049696,
      0.048046912997961044,
      0.10733295977115631,
      0.016046714037656784,
      0.003989009186625481,
      0.12051255255937576,
      0.023950349539518356,
      -0.009502848610281944,
      -0.004479851573705673,
      0.0186285562813282,
      -0.05415539816021919,
      -0.07527162879705429,
      0.04293931648135185,
      -0.007467006798833609,
      -0.03205617517232895,
      -0.015500552020967007,
      0.0021268127020448446,
      0.03565842658281326,
      0.07978720217943192,
      0.01958603598177433,
      0.058201465755701065,
      -0.00868045911192894,
      -0.03850628063082695,
      -0.0836566686630249,
      0.022576672956347466,
      -0.014942130073904991,
      -0.02632775716483593,
      -0.08474365621805191,
      -0.02276208996772766,
      0.03636804223060608,
      -0.011577816680073738,
      0.009379444643855095,
      -0.04976651072502136,
      -0.0005668029771186411,
      0.050658926367759705,
      -0.027706077322363853,
      -0.025380313396453857,
      0.09290913492441177,
      0.0009937644936144352,
      0.0626736581325531,
      -0.08891534805297852,
      -0.008766143582761288,
      -0.04729029908776283,
      0.06261392682790756,
      0.017598720267415047
    ],
    "content": "---\ntitle: How to Define Multiple Components in a Single File in Nuxt using JSX\ndescription: In this blog article, we have demonstrated how to define multiple components in a single .vue file in Nuxt using JSX. By using JSX, we can combine regular Vue components and JSX components in the same file, thus utilising the same reactivity system provided by Vue. While it is generally recommended to separate components into individual files, there are situations where declaring small components in the same file can be beneficial. We hope you found this blog article useful. Please subscribe for more articles like this in the future.\nimage: https://res.cloudinary.com/suv4o/image/upload/q_auto,f_auto,w_1200,e_sharpen:100/v1705811682/blog/how-to-defining-multiple-components-in-a-single-file-in-nuxt/dx3lzu2av0hwbu2hkuob\nkeywords:\n    - Nuxt.js\n    - Vue.js\n    - TypeScript\n    - JSX\n    - TSX\n    - Tailwind CSS\n    - Multiple Components\n    - Single File\n    - Vue\n    - Vue 3\n    - Web Development\n    - Development\ntype: page\nblog: post\npublished: 23rd January 2024\nreadTime: 10\nauthor: Aleksandar Trpkovski\narticleTags:\n    - Nuxt.js\n    - Vue.js\n    - TypeScript\n---\n\n# How to Define Multiple Components in a Single File in Nuxt using JSX\n\n_{{$document.published}} • {{$document.readTime}} min read — by **[{{$document.author}}](/)**_\n\n::tag-pills{:tags=\"articleTags\"}\n::\n\n![Landing Image](https://res.cloudinary.com/suv4o/image/upload/q_auto,f_auto,w_750,e_sharpen:100/v1705811682/blog/how-to-defining-multiple-components-in-a-single-file-in-nuxt/dx3lzu2av0hwbu2hkuob)\n\nI've been using Vue and Nuxt for quite a while now. One feature I've always been missing is the ability to declare more than one component in a single `.vue` file. This has been possible in other frameworks like React for a long time. I know that most people will say that if you want more than one component, it's a good idea to separate those components into separate files. I agree with that statement and it makes sense. However, sometimes for very small components that won't be used in other places in the code, it also makes sense to declare them in the same file to make the code more readable.\n\nI thought that it wasn't possible until I found out that we can actually do that. In this article, I'm going to demonstrate how we can declare more than one component in Nuxt 3 and provide a few examples. So keep reading.\n\n## Create a new Nuxt project.\n\nFirst, we are going to create a brand new Nuxt 3 project. Execute the following command in your terminal and name your project `nuxt-multiple-components`, or choose any other name that you prefer:\n\n```bash\nnpx nuxi@latest init nuxt-multiple-components\n```\n\nI chose `yarn` as my package manager, but you can choose between `npm`, `pnpm`, or `bun` if you prefer those instead.\n\nOnce the project has been initialised, we need to install the dependencies and start the project using the following commands in the terminal:\n\n```bash\ncd nuxt-multiple-components\nyarn\nyarn dev\n\n```\n\nGreat! Now our project is set up. Before diving into the code, let's do some clean-up. In the `app.vue` file, please delete the predefined component so that the code will look like the following:\n\n```ts\n<script setup>\n<script>\n\n<template>\n</template>\n\n```\n\n## Define our first component in `JSX`.\n\nSome may wonder what JSX can do with Vue frameworks. Although JSX is a popular JavaScript syntax in `React.js` and frameworks that use React, such as `Next` and `Remix`, we can technically write `JSX` in Vue as well. This is what we will use to declare multiple components in a single file in Vue.\n\nThe very first thing we need to do is to define the language in the `<script setup>` to be `jsx` or, in our case here I prefer to use TypeScript and will be using `tsx` instead. So let's do that. In the `app.vue` file, set `lang` to `tsx` in order to enable writing JSX code in our `.vue` file:\n\n```ts\n<script setup lang=\"tsx\">\n<script>\n```\n\nThen let's define our first `<CustomLink/>` JSX component:\n\n```ts\n<script setup lang=\"tsx\">\n    const CustomLink = (props: { href: string; name: string }) => <a href=\"{props.href}>{props.name}\"</a>;\n<script>\n```\n\nWe declare an anchor HTML element component that receives two props: `href` and `name`. To use this component in our tablet, we follow the same approach as using other Vue components. Here is how we use it:\n\n```html\n<template>\n    <CustomLink href=\"https://vitejs.dev\" name=\"Vite\" />\n</template>\n```\n\nWe can even declare reactive `ref` variables as we usually do in the Vue composition API and pass those values as props without losing any reactivity:\n\n```ts\n<script setup lang=\"tsx\">\n\tconst href = \"https://vitejs.dev\";\n\tconst name = \"Vite\";\n    const CustomLink = (props: { href: string; name: string }) => <a href=\"{props.href}>{props.name}\"</a>;\n<script>\n```\n\n```html\n<template>\n    <CustomLink :href=\"href\" :name=\"name\" />\n</template>\n```\n\nThe advantage of this is that we can combine regular Vue components, JSX components, and regular HTML all together in the same Vue template within a `.vue` file. Therefore, the following example will still be valid syntax:\n\n```html\n<template>\n    <p>This is my first JSX component!</p>\n    <CustomLink :href=\"href\" :name=\"name\" />\n    <p>Let me know what you think!</p>\n</template>\n```\n\n## Create a `<Card />` component by utilising various components.\n\nNow that we have demonstrated how to create a simple JSX component, let's proceed to create a more complex component using both Vue and JSX together.\n\nBefore we start building our Card component, let's add Tailwind CSS to our project. This will make it easier to style our components.\n\n### Add Tailwind CSS.\n\nAdding Tailwind to our Nuxt project is simple. First, we need to install the required dependencies and initialise Tailwind CSS using the following commands:\n\n```bash\nyarn add -D tailwindcss postcss autoprefixer\nnpx tailwindcss init\n```\n\nNext, we need to add the following to the `nuxt.config.ts` file:\n\n```ts\ncss: ['~/assets/css/main.css'],\npostcss: {\n    plugins: {\n      tailwindcss: {},\n      autoprefixer: {},\n    },\n  },\n```\n\nThen, add the following code to the `tailwind.config.js` file:\n\n```ts\ncontent: [\"**/*.vue\"],\n```\n\nFinally, create a `main.css` file in the `assets/css` folder and add the following content:\n\n```css\n@tailwind base;\n@tailwind components;\n@tailwind utilities;\n```\n\n### Define the components.\n\nWe will build the following Card component:\n![Card Component](https://res.cloudinary.com/suv4o/image/upload/q_auto,f_auto,w_750,e_sharpen:100/v1705811677/blog/how-to-defining-multiple-components-in-a-single-file-in-nuxt/utw0ryorqxndtrcr0lbl)\n\nHowever, before we start building the component, we will divide it into several smaller individual components.\n\n- `<CardImage />`: This will be a regular Vue component defined inside the `/components` directory. We are using a Vue component to demonstrate the ability to mix and match Vue and JSX components.\n- `<CardDescription />`: This will be a JSX component.\n- `<CardButton />`: This will also be a JSX component.\n- `<Card />`: This will be the master component, also built with JSX, that will include all of the components mentioned above.\n\nNow that we have listed our components, let's start building them.\n\n### Create the `<CardImage />` component.\n\nFirst, we are going to create the `<CardImage />` component. As mentioned earlier, this will be a regular Vue component. Inside the `/components` folder in Nuxt, we are going to create the following `CardImage.vue` component:\n\n```ts\n<script setup lang=\"ts\">\nconst props = defineProps<{\n    src: string;\n}>();\n</script>\n\n<template>\n    <img class=\"mx-auto h-48 w-48 rounded-full md:h-56 md:w-56\" :src=\"props.src\" alt=\"card image\" />\n</template>\n```\n\nHere, we will only have one property, `src`, where we can add the image path.\n\n### Create the `<CardDescription />` component.\n\nNext, we will create a `<CardDescription />` JSX component. This component will be declared in the `app.vue` component located in the root directory. We will define the script setup with `lang=\"tsx\"`, as we have shown earlier in the article. To avoid repetition, we will refrain from adding `lang=\"tsx\"` to the JSX components that we will declare later in the article.\n\n```ts\nconst CardDescription = (props: { name: string; title: string }) => (\n    <>\n        <h3 class=\"mt-6 text-base font-semibold leading-7 tracking-tight text-white\">{props.name}</h3>\n        <p class=\"text-sm leading-6 text-yellow-400\">{props.title}</p>\n    </>\n);\n```\n\nThis component will accept two props: `name` and `title`.\n\n### Create the `<CardButton />` component.\n\nThe `<CardButton />` is another JSX component that will be created in the `app.vue` file. In this component, we will demonstrate how to use a function declared in the `<script setup>` section and utilise it inside the `onClick` event of this component. The function will simply toggle a boolean reactive `ref` variable between the `true` and `false` states. Later, we will make use of this reactive variable in our `<Card/>` component in the next section. So, let's first declare the function and the reactive variable `isCardRed`:\n\n```ts\nconst isCardRed = ref(true);\n\nfunction updateStyle() {\n    isCardRed.value = !isCardRed.value;\n}\n```\n\nNext, we will declare the `<CardButton />` component:\n\n```ts\nconst CardButton = (props: { action: () => any }, components: { slots: any }) => (\n    <div class=\"mt-6 flex justify-center gap-x-6\">\n        <button\n            onClick={props.action}\n            type=\"submit\"\n            class=\"flex-none rounded-md bg-yellow-500 px-3.5 py-2.5 text-sm font-semibold text-white shadow-sm hover:bg-yellow-400 focus-visible:outline focus-visible:outline-2 focus-visible:outline-offset-2 focus-visible:outline-yellow-500\"\n        >\n            {components.slots.default()}\n        </button>\n    </div>\n);\n```\n\nAs we can see, we only have one prop here called `action`, which we will use to pass a function. We will pass the `updateStyle` function to this prop later when we use this component.\n\nAnother parameter apart from the props we are passing is the `components` parameter, which has a property of `slots`. We call this parameter inside the JSX as `components.slots.default()`. This allows us to pass slots in the same way as we do with Vue components, something like this:\n\n```html\n<CardButton :action=\"updateStyle\">Switch Colour</CardButton>\n```\n\nNow, let's build our main `<Card />` component where we can use all the components we declared above together.\n\n### Create the `<Card />` component.\n\nThis will be our last JSX component, also declared in the `app.vue` file inside the `<script setup>`. It is going to be pretty simple. In this component, we will pass components as slots.\n\n```ts\nconst Card = (props: { toggleColour: boolean }, components: { slots: any }) => (\n    <>\n        <div class={\"rounded-2xl px-8 py-10 w-80 \" + `${props.toggleColour ? \"bg-red-800\" : \"bg-yellow-800\"}`}>\n            {components.slots.default()}\n        </div>\n    </>\n);\n```\n\nWe have a prop called `toggleColour` which is a boolean. In this prop, we are going to pass the `isCardRed` reactive `ref` variable that we declared earlier when we declared the `<CardButton />`. We use this `toggleColour` prop in the `<Card />` component to conditionally toggle between two background colours.\n\nSimilarly, we are also passing the `components` property, just like we did in the `<CardButton />`, using `components.slots.default()`. This allows us to pass the components that we declare above.\n\nLastly, we can use the `<Card />` component together with all the components mentioned above like this:\n\n```html\n<template>\n    <div class=\"flex justify-center p-4\">\n        <Card :toggleColour=\"isCardRed\">\n            <CardImage\n                src=\"https://images.unsplash.com/photo-1494790108377-be9c29b29330?ixlib=rb-1.2.1&ixid=M3wxMjA3fDB8MHxwaG90by1wYWdlfHx8fGVufDB8fHx8fA9&auto=format&fit=facearea&facepad=8&w=1024&h=1024&q=80\"\n            />\n            <CardDescription name=\"Lopez Simba\" title=\"Human Resources\" />\n            <CardButton :action=\"updateStyle\">Switch Colour</CardButton>\n        </Card>\n    </div>\n</template>\n```\n\nAnd that is it. We now have a fully functional `<Card />` using multiple components declared in the same `.vue` file, as well as mixing components between Vue and JSX together while maintaining the same reactivity system.\n\nYou can find this example in my GitHub repository at the following <a href=\"https://github.com/Suv4o/Defining-Multiple-Components-in-a-Single-File-in-Nuxt\" target=\"_blank\" rel=\"noopener noreferrer\">link</a>.\n\n## Conclusion\n\nIn this blog article, we have demonstrated how to define multiple components in a single `.vue` file in Nuxt using JSX. By using JSX, we can combine regular Vue components and JSX components in the same file, thus utilising the same reactivity system provided by Vue. While it is generally recommended to separate components into individual files, there are situations where declaring small components in the same file can be beneficial. We hope you found this blog article useful. Please subscribe for more articles like this in the future.\n"
  },
  {
    "articlePath": "/2024/02/25/create-a-web-server-using-nitro-sqlite-and-typeorm",
    "embeddings": [
      -0.06511416286230087,
      -0.02576255612075329,
      -0.06913037598133087,
      0.05281718075275421,
      -0.0001721602602628991,
      -0.07593691349029541,
      0.05744621530175209,
      0.041642095893621445,
      -0.006338775157928467,
      0.03178000822663307,
      -0.02504236064851284,
      -0.004798406269401312,
      0.075246661901474,
      -0.01835869438946247,
      -0.03556205332279205,
      0.031931884586811066,
      -0.04158472642302513,
      0.014781085774302483,
      -0.02553671784698963,
      -0.016024833545088768,
      -0.022257016971707344,
      0.03592662513256073,
      0.049479641020298004,
      -0.06266564875841141,
      -0.040205638855695724,
      0.025251176208257675,
      -0.03656599298119545,
      -0.02350848913192749,
      -0.0356026217341423,
      -0.10769109427928925,
      0.0509328655898571,
      -0.01620120368897915,
      -0.07063601911067963,
      0.05315364524722099,
      0.04435380548238754,
      0.04014403745532036,
      0.014598311856389046,
      -0.029784120619297028,
      -0.09048876911401749,
      -0.09468056261539459,
      0.06899433583021164,
      -0.036813121289014816,
      -0.10187836736440659,
      0.056180406361818314,
      -0.027038704603910446,
      -0.006286962423473597,
      -0.08553928136825562,
      -0.019377730786800385,
      -0.03093184158205986,
      -0.01290145143866539,
      -0.13912495970726013,
      -0.08789697289466858,
      -0.006622525863349438,
      0.03894135355949402,
      0.01851043291389942,
      0.024515749886631966,
      -0.06461694836616516,
      -0.06297203153371811,
      -0.029469674453139305,
      0.0051080333068966866,
      0.025650693103671074,
      -0.052696771919727325,
      0.043875887989997864,
      -0.029816653579473495,
      0.06418213993310928,
      0.05269790440797806,
      0.023737041279673576,
      0.018619857728481293,
      0.014731967821717262,
      -0.040212489664554596,
      -0.012358937412500381,
      -0.01423722505569458,
      -0.06072916463017464,
      0.023436522111296654,
      -0.03560756519436836,
      -0.0974823608994484,
      0.06217978149652481,
      -0.010969345457851887,
      -0.006722785532474518,
      -0.03995099663734436,
      -0.05387872830033302,
      -0.000013538417988456786,
      0.03252953290939331,
      0.08079400658607483,
      0.05167952552437782,
      -0.030869774520397186,
      0.03924240171909332,
      0.056289561092853546,
      0.06326638162136078,
      -0.03338714689016342,
      -0.08692890405654907,
      0.046995777636766434,
      0.013912050053477287,
      -0.0018733975011855364,
      0.01966165006160736,
      0.021140260621905327,
      0.03921183943748474,
      0.02094239927828312,
      0.05378564074635506,
      0.08154890686273575,
      0.0677826851606369,
      0.017581753432750702,
      -0.048707265406847,
      -0.003099091351032257,
      0.052300870418548584,
      -0.026602400466799736,
      0.11018140614032745,
      -0.03539087623357773,
      0.015539497137069702,
      0.040077973157167435,
      -0.025319959968328476,
      0.08654750883579254,
      -0.08329903334379196,
      -0.06882334500551224,
      -0.01487827766686678,
      -0.04345065355300903,
      0.03986187279224396,
      -0.04139404371380806,
      0.007571043446660042,
      0.04854962229728699,
      0.08341170847415924,
      0.03637079894542694,
      -0.0890292078256607,
      -0.024543428793549538,
      0.05134976655244827,
      0.016685327515006065,
      0.034261491149663925,
      5.383396784781445e-33,
      0.009093700908124447,
      0.036284107714891434,
      -0.05680065602064133,
      -0.014033219777047634,
      0.06362006813287735,
      -0.005378915462642908,
      0.01573537476360798,
      -0.03092290833592415,
      -0.15042948722839355,
      0.005480095278471708,
      0.0022593976464122534,
      0.013862169347703457,
      -0.08727621287107468,
      -0.025384051725268364,
      0.0370662659406662,
      -0.0473732128739357,
      0.030082523822784424,
      0.056923411786556244,
      0.09816745668649673,
      -0.019311493262648582,
      -0.02173592709004879,
      0.0595320388674736,
      -0.026094596832990646,
      0.05363203585147858,
      0.0059964898973703384,
      0.028206728398799896,
      -0.05299355462193489,
      -0.00128461723215878,
      0.01647472195327282,
      -0.04413626343011856,
      0.07027928531169891,
      -0.06610428541898727,
      -0.03230178728699684,
      -0.015870381146669388,
      0.04277462512254715,
      -0.06175196170806885,
      0.005852028727531433,
      0.0029758161399513483,
      -0.05364029109477997,
      -0.00381744047626853,
      -0.017336519435048103,
      0.010161084122955799,
      -0.026502016931772232,
      -0.09400993585586548,
      -0.10627540946006775,
      -0.008488207124173641,
      -0.0018605771474540234,
      0.021670032292604446,
      0.09604210406541824,
      -0.06087222695350647,
      -0.09148109704256058,
      -0.015749212354421616,
      -0.025788050144910812,
      -0.022672176361083984,
      0.02522505447268486,
      0.022697897627949715,
      0.014065861701965332,
      0.008543084375560284,
      0.09225853532552719,
      -0.013965771533548832,
      -0.05689379200339317,
      -0.035735901445150375,
      0.04148276895284653,
      -0.023539962247014046,
      0.07494982331991196,
      0.0005549363559111953,
      0.0016961873043328524,
      0.01246978621929884,
      0.0707353726029396,
      -0.004784655757248402,
      -0.05946396291255951,
      0.051607292145490646,
      0.06355389952659607,
      -0.019474167376756668,
      0.04798064008355141,
      -0.05397515743970871,
      -0.03868700563907623,
      -0.08598253130912781,
      -0.027343256399035454,
      -0.0027098117861896753,
      0.08115069568157196,
      -0.000993307214230299,
      -0.08222299814224243,
      0.047949641942977905,
      -0.023732729256153107,
      -0.009517360478639603,
      -0.011117636226117611,
      -0.022913964465260506,
      -0.03658732399344444,
      -0.06162991374731064,
      0.023767931386828423,
      -0.015990646556019783,
      0.007456047460436821,
      -0.1533282995223999,
      -0.05140794441103935,
      -4.529321160382357e-33,
      0.04400232806801796,
      -0.04421498253941536,
      -0.055771827697753906,
      0.1103392019867897,
      0.034546516835689545,
      -0.03514515236020088,
      -0.021746817976236343,
      0.07229702174663544,
      -0.01973341591656208,
      -0.038712628185749054,
      0.05660748854279518,
      -0.06335990875959396,
      -0.010178016498684883,
      -0.033305466175079346,
      0.01870138756930828,
      0.09435639530420303,
      -0.011233115568757057,
      -0.09097364544868469,
      0.048838045448064804,
      -0.010674280114471912,
      -0.012456709519028664,
      0.08958101272583008,
      -0.03947490453720093,
      0.05441934987902641,
      -0.023445796221494675,
      0.08265842497348785,
      0.019041795283555984,
      0.08912254869937897,
      -0.01830805093050003,
      -0.05220514163374901,
      -0.06103553622961044,
      0.022244060412049294,
      -0.06713647395372391,
      -0.04842009395360947,
      0.007965363562107086,
      -0.015308348461985588,
      0.037275563925504684,
      0.09189343452453613,
      -0.037162553519010544,
      0.06575173139572144,
      0.049587495625019073,
      0.04251448065042496,
      0.007296007592231035,
      -0.046963419765233994,
      -0.05522136390209198,
      0.028851155191659927,
      -0.028238557279109955,
      0.07059977948665619,
      0.012503447011113167,
      0.007417693734169006,
      0.05864277854561806,
      -0.06667641550302505,
      -0.06560330837965012,
      -0.023099521175026894,
      0.022308044135570526,
      -0.04045164957642555,
      0.04571348428726196,
      -0.04448886588215828,
      -0.019343947991728783,
      0.0099253598600626,
      -0.03737092763185501,
      -0.02963229827582836,
      0.035792026668787,
      -0.02405814453959465,
      0.01744462177157402,
      -0.039683979004621506,
      -0.1143476814031601,
      -0.01089373230934143,
      -0.066181980073452,
      0.027372868731617928,
      -0.0394580140709877,
      0.09455475956201553,
      0.14237289130687714,
      -0.02585279569029808,
      0.06902096420526505,
      0.002085960004478693,
      0.07845247536897659,
      -0.0065820044837892056,
      0.0655040442943573,
      -0.010362295433878899,
      -0.06289063394069672,
      0.09006432443857193,
      0.039958808571100235,
      -0.0061626252718269825,
      0.011763639748096466,
      0.010758251883089542,
      0.008662285283207893,
      0.03533202409744263,
      0.012515915557742119,
      -0.03425215557217598,
      -0.049032483249902725,
      -0.007427598815411329,
      0.019057676196098328,
      0.07140454649925232,
      -0.0703476145863533,
      -5.990202112116094e-8,
      -0.09937451779842377,
      -0.02878999523818493,
      -0.08519461005926132,
      -0.021126583218574524,
      0.05310238152742386,
      0.05170731619000435,
      0.04953727498650551,
      -0.0029183817096054554,
      0.024818679317831993,
      -0.004717272240668535,
      0.13474974036216736,
      0.07003629207611084,
      0.004075591452419758,
      0.018054107204079628,
      -0.011728363111615181,
      0.044754043221473694,
      0.06648168712854385,
      -0.04869399219751358,
      -0.02268732339143753,
      -0.05262943357229233,
      0.03511928394436836,
      0.05066690221428871,
      -0.0033458329271525145,
      0.010861487127840519,
      0.11135410517454147,
      0.06850127875804901,
      -0.04325583577156067,
      0.011460991576313972,
      -0.016215285286307335,
      -0.0434814989566803,
      -0.04776836931705475,
      0.07756567001342773,
      0.037296928465366364,
      0.0008029784657992423,
      0.05136854574084282,
      0.022162899374961853,
      0.04091477394104004,
      0.07194618880748749,
      -0.08926878869533539,
      0.027577055618166924,
      0.05753202736377716,
      0.06591065227985382,
      -0.1284971982240677,
      -0.01629422977566719,
      -0.004816337954252958,
      -0.01948150433599949,
      -0.07159041613340378,
      0.005757372826337814,
      0.06164718419313431,
      0.013280314393341541,
      0.037243690341711044,
      -0.07760004699230194,
      0.03912568464875221,
      0.04884107783436775,
      -0.023224053904414177,
      -0.017318759113550186,
      0.10191196203231812,
      -0.027386171743273735,
      0.02507193759083748,
      0.05317974463105202,
      0.045967549085617065,
      -0.004389162175357342,
      0.09548971801996231,
      0.039531927555799484
    ],
    "content": "---\ntitle: Create a Web Server using Nitro, SQLite and TypeORM\ndescription: If you're familiar with Nuxt.js, you might know that the latest version, Nuxt version 3, runs on a new server engine called Nitro. Nitro isn't just used in Nuxt, it's also an independent open-source framework for developing web server applications. It provides several built-in features that make it a modern, user-friendly backend framework. Nitro is open-source and maintained by the same core team as Nuxt.js. In this blog post, we'll show you how to build a simple web server using Nitro and connect it to an SQLite database. We'll also explain the process of database migration with TypeORM, a popular typescript library, introduce the widely-used pattern for validating request data, the Data Transfer Object (DTO), and utilise some of Nitro's built-in features to cache results.\nimage: https://res.cloudinary.com/suv4o/image/upload/q_auto,f_auto,w_1200,e_sharpen:100/v1708844513/blog/create-a-web-server-using-nitro-sqlite-and-typeorm/create-a-web-server-using-nitro-sqlite-and-typeorm_ozdamt\nkeywords:\n    - Nuxt.js\n    - Nitro.js\n    - TypeScript\n    - SQLite\n    - TypeORM\n    - Data Transfer Object\n    - DTO\n    - Class Validator\n    - Decorators\n    - Web Development\n    - Development\ntype: page\nblog: post\npublished: 25th February 2024\nreadTime: 12\nauthor: Aleksandar Trpkovski\narticleTags:\n    - Nitro\n    - BackEnd\n    - TypeScript\n---\n\n# Create a Web Server using Nitro, SQLite and TypeORM\n\n_{{$document.published}} • {{$document.readTime}} min read — by **[{{$document.author}}](/)**_\n\n::tag-pills{:tags=\"articleTags\"}\n::\n\n![Landing Image](https://res.cloudinary.com/suv4o/image/upload/q_auto,f_auto,w_750,e_sharpen:100/v1708844513/blog/create-a-web-server-using-nitro-sqlite-and-typeorm/create-a-web-server-using-nitro-sqlite-and-typeorm_ozdamt)\n\nIf you're familiar with <a href=\"https://nuxt.com/\" target=\"_blank\" rel=\"noopener noreferrer\">Nuxt.js</a>, you might know that the latest version, Nuxt version 3, runs on a new server engine called Nitro. Nitro isn't just used in Nuxt, it's also an independent open-source framework for developing web server applications. It provides several built-in features that make it a modern, user-friendly backend framework. Nitro is open-source and maintained by the same core team as Nuxt.js.\n\nIn this blog post, we'll show you how to build a simple web server using Nitro and connect it to an SQLite database. We'll also explain the process of database migration with TypeORM, a popular typescript library, introduce the widely-used pattern for validating request data, the Data Transfer Object (DTO), and utilise some of Nitro's built-in features to cache results.\n\n## Create a Nitro Web Server\n\nFirst, we need to create a new project using the following command in the terminal of your choice. We will name our project `nitro-sqlite`.\n\n```bash\nnpx giget@latest nitro nitro-sqlite\n```\n\nIn this article, we're going to use `yarn` as a package management tool, but feel free to use your preferred one.\n\nWe will need to install the dependencies and finally run the development server:\n\n```bash\ncd nitro-sqlite\nyarn install\nyarn dev\n```\n\nIf you open your browser and navigate to `http://localhost:3000`, you will see the following:\n\n```json\n{\n    \"nitro\": \"Is Awesome!\"\n}\n```\n\nGreat, we've successfully set up our Nitro web server.\n\n## Database Setup\n\nIn this project, we'll be using SQLite, but the same setup can be applied to any database. We'll establish the database using a popular Object-Relational Mapping (ORM) library in TypeScript, <a href=\"https://typeorm.io/\" target=\"_blank\" rel=\"noopener noreferrer\">TypeORM</a>. TypeORM simplifies the creation and querying of data from a relational database using an object-oriented approach, assists in defining the database schema, and manages migrations. We'll explore these features later. For now, let's install the required libraries:\n\n```bash\nyarn add reflect-metadata sqlite3 typeorm\n```\n\n```bash\nyarn add -D ts-node @types/node typescript rollup-plugin-typescript2\n```\n\nIn `nitro.config.ts`, import the rollup plugin `rollup-plugin-typescript2` and adjust the TypeScript compiler options before proceeding with the database setup. Ensure that your `nitro.config.ts` looks like the following:\n\n```ts\nimport typescript from \"rollup-plugin-typescript2\";\n\nexport default defineNitroConfig({\n    rollupConfig: {\n        plugins: [typescript()],\n    },\n    typescript: {\n        tsConfig: {\n            compilerOptions: {\n                lib: [\"es2021\"],\n                target: \"es2021\",\n                module: \"es2022\",\n                moduleResolution: \"node\",\n                allowSyntheticDefaultImports: true,\n                emitDecoratorMetadata: true,\n                experimentalDecorators: true,\n                sourceMap: true,\n            },\n        },\n    },\n});\n```\n\nWithout the above settings, I encountered several compiler errors with the TypeORM setup, so it's necessary to ensure the compiler options are set as described above.\n\nNext, we will create a file named `ormconfig.ts` in the root of the project. This ORM configuration will be used when we create our migrations. The content of the `ormconfig.ts` file should look like this:\n\n```ts\nimport { DataSource } from \"typeorm\";\n\nconst dataSource = new DataSource({\n    type: \"sqlite\",\n    database: \"database.sqlite\",\n    synchronize: false,\n    logging: false,\n    subscribers: [],\n    entities: [\"entity/**/*{.js,.ts}\"],\n    migrations: [\"migrations/**/*{.js,.ts}\"],\n});\n\nexport default dataSource;\n```\n\nIn the configuration settings, we named our database `database.sqlite`, but the name is entirely optional. We also set up the entities (the database schema we are going to create) to be found in the `/entity` directory, and the migrations we will create to be stored in the `/migrations` directory at the root of the project.\n\nNext, we will create the following directories at the root of the project: `/entity` and `/migrations`. And also add the following line in `package.json` in the script section:\n\n```json\n\"scripts\": {\n\t\t...\n    \"typeorm\": \"typeorm-ts-node-esm -d ormconfig.ts\"\n },\n```\n\n### Defining the User entity\n\nTypeORM utilises TypeScript decorators to define entities and relationships directly within your TypeScript classes. Models can be defined using classes with TypeScript decorators for properties and relationships such as `@Entity`, `@Column` etc.\n\nFor a comprehensive understanding of all decorators, refer to the TypeORM official <a href=\"https://typeorm.io/\" target=\"_blank\" rel=\"noopener noreferrer\">documentation</a>. In this blog, we will only demonstrate how to model a simple `User` table.\n\nLet's create our User entity within the `/entity` directory. In the `/entity` directory, we will define a file named `User.ts` with the following content:\n\n```ts\nimport { Entity, PrimaryGeneratedColumn, Column } from \"typeorm\";\n\n@Entity(\"user\")\nexport class User {\n    @PrimaryGeneratedColumn()\n    id: number;\n\n    @Column()\n    firstName: string;\n\n    @Column()\n    lastName: string;\n\n    @Column()\n    age: number;\n}\n```\n\nThe above code defines a simple database table named `user` with four columns: `id`, `firstName,` `lastName`, and `age`.\n\n### Create a migration for the User table\n\nNext, we need to create a migration so the User entity will be translated into a database table. To do this, run the following command in your terminal of choice:\n\n```bash\nyarn typeorm migration:generate --name=create-user-table\n\n```\n\nWe name our migration `create-user-table`. This creates a migration inside the `/migrations` directory. Each migration's name will be created with a timestamp followed by the name of the migration. In my case, the migration file was called: `1708245318068-create-user-table.ts`.\n\nThe migrations can then be run or reverted with the following terminal commands:\n\n```bash\nyarn typeorm migration:run\n\n```\n\nor\n\n```bash\nyarn typeorm migration:revert\n\n```\n\nOnce the migration is run, the `database.sqlite` database will have two tables: the `user` table and the `migrations` table.\n\nNow we have a database set up, but it's empty. We need to define a couple of endpoints in Nitro so we can add and read users from the database. But before that, we need to configure one more TypeORM setting. Let's do that first.\n\n### TypeORM Configuration\n\nTo use TypeORM for creating and querying users in the database, we need to configure it. This enables us to use the entities and migrations we create.\n\nCreate a `/config` directory in the root of the project. Inside this directory, create a file named `config/typeorm.config.ts` with the following configuration:\n\n```ts\nimport \"reflect-metadata\";\nimport { DataSource } from \"typeorm\";\nimport { User } from \"../entity/User\";\nimport { CreateUserTable1708227011732 } from \"../migrations/1708227011732-create-user-table\";\n\nconst dataSource = new DataSource({\n    type: \"sqlite\",\n    database: \"database.sqlite\",\n    synchronize: false,\n    logging: false,\n    subscribers: [],\n    entities: [User],\n    migrations: [CreateUserTable1708227011732],\n});\n\nexport default dataSource;\n```\n\nThis will be very similar to the `ormconfig.ts` file, except it imports the User entity and the migrations and adding them to the entities and migrations arrays.\n\n### Initialising the database with Nitro Plugins\n\nNitro uses a plugin system to extend its runtime behaviour. This is quite useful if you want to add custom behaviour to the web server. Nitro provides several hooks such as on `request`, `beforeResponse`, on application `close`, etc. For more details, refer to the Nitro documentation <a href=\"https://nitro.unjs.io/guide/plugins#available-hooks\" target=\"_blank\" rel=\"noopener noreferrer\">here</a>.\n\nIn our case, we will utilise on `request` and `beforeResponse` hooks to initialise and destroy the database respectively.\n\nTo achieve this, create a `/plugins` directory in the root of the project, and then create the following file: `/plugins/initializing-database.ts`. Add the following code to this file:\n\n```ts\nimport dataSource from \"../config/typeorm.config\";\n\nexport default defineNitroPlugin((nitro) => {\n    nitro.hooks.hook(\"request\", async () => {\n        await dataSource.initialize();\n    });\n    nitro.hooks.hook(\"beforeResponse\", async () => {\n        await dataSource.destroy();\n    });\n});\n```\n\nAs long as the plugin is created inside the plugins directory, Nitro will automatically import the plugin, so no additional action is required.\n\nWe now have everything we need for the database setup. Next, we're going to create the user endpoint to create and read users from the database.\n\n## User endpoints\n\nNitro supports file-based routing for your API routes. You can define a route simply by creating a file inside the `api/` or `routes/` directory.\n\nIn this project, we will define three routes:\n\n- `POST` route to create users: `/create-user`\n- `GET` route to retrieve all users: `/get-users`\n- `GET` route to retrieve a single user: `/get-user/:id`\n\nLet's begin with the first route for creating users.\n\n### Create a user endpoint\n\nIn Nitro, we can add specific utils inside the `utils/` directory, and they will be automatically imported when used. Every export in the `utils` directory and its subdirectories becomes available globally in your application. For a cleaner implementation, we'll take advantage of this auto-import feature in Nitro.\n\nFor our user endpoints, we'll define utility functions inside the `/utils` directory. Let's define the following file inside the `utils/user.ts` directory:\n\n```ts\nimport dataSource from \"../config/typeorm.config\";\nimport { User } from \"../entity/User\";\n\nexport async function createUser(body: User) {\n    const user = new User();\n    user.firstName = body.firstName;\n    user.lastName = body.lastName;\n    user.age = body.age;\n\n    try {\n        await dataSource.manager.save(user);\n        return { success: true, message: \"User created\" };\n    } catch (error) {\n        console.error(error);\n        return { success: false, message: \"Failed to create user\" };\n    }\n}\n```\n\nHere, we're defining the logic for creating a user by utilising the ORM capability in TypeORM.\n\nThen, inside the `/routes` directory, we're going to define the following file `routes/create-user.post.ts`.\n\n```ts\nexport default defineEventHandler(async (event) => {\n    const body = await readBody(event);\n    return await createUser(body);\n});\n```\n\nThis will automatically create an endpoint `/create-user` that will receive a `post` request.\n\nWe use the Nitro function `readBody` to access the body of the request. This function is automatically imported by Nitro, so we don't need to import it separately.\n\nYou can call this endpoint with the following body payload:\n\n```json\nPOST http://localhost:3000/create-user\nContent-Type: application/json\n{\n    \"firstName\": \"Aleks\",\n    \"lastName\": \"Trpkovski\",\n    \"age\": 43\n}\n```\n\n### Read users endpoint\n\nSimilar to how we define the user creation endpoint, we will now create an endpoint to retrieve all users. In the user utility function `utils/user.ts`, we will add another function to return all users:\n\n```ts\nexport async function getUsers() {\n    try {\n        const users = await dataSource.manager.find(User);\n        return { users };\n    } catch (error) {\n        console.error(error);\n        return { success: false, message: \"Failed to get users\" };\n    }\n}\n```\n\nNext, within the `/routes` directory, we will define the following file `routes/get-users.get.ts`.\n\n```ts\nexport default defineEventHandler(async (event) => {\n    return await getUsers();\n});\n```\n\nThe above endpoint will return all the users from the database.\n\n### Read a single user endpoint\n\nFinally, we will create an endpoint that, given an id, returns a single user associated with that id. Similar to the previous process, we are adding another function to the utility function `utils/user.ts`:\n\n```ts\nexport async function getUser(id: number) {\n    try {\n        const user = await dataSource.manager.findOne(User, {\n            where: { id },\n        });\n        return { user };\n    } catch (error) {\n        console.error(error);\n        return { success: false, message: \"Failed to get users\" };\n    }\n}\n```\n\nNext, create the endpoint `routes/get-user/[id].get.ts`. Note that we've created a new directory inside the `/routes` called `/get-user`, and inside this directory, a file named `[id].get.ts`. If you're familiar with Nuxt.js, this pattern will be recognisable, as Nitro also uses it. The name within the square brackets represents the name of the dynamic parameter we want to pass to the endpoint. For example, in our case, the endpoint `/get-user/:id` will have a dynamic `id` that can be any user id. Here's how the `[id].get.ts` file should be implemented:\n\n```ts\nexport default defineEventHandler(async (event) => {\n    const userId = Number(getRouterParam(event, \"id\"));\n    return await getUser(userId);\n});\n```\n\nWe use the Nitro function `getRouterParam` to access the parameter's id. This function is automatically imported by Nitro, so we don't need to import it separately.\n\nWith that, we've defined the three endpoints for creating and reading users. Next, we'll show how to validate data using DTOs, ensuring the parameters passed during user creation follows the database schema and prevent the inclusion of unsupported types.\n\n## Use DTO to validate the request\n\nDTOs are a design pattern used in applications to hold and transfer data between different layers. One common application of DTOs is to define validation logic directly within their classes or functions, offering control over validation rules. This can be beneficial for validating data on each request, ensuring data integrity before it reaches the database.\n\nCurrently, our `create-user` endpoint can accept any type of data. For instance, a number could be passed into the `firstName` field, or a string could replace a number in the `age` property. To prevent these scenarios, we need to implement validation rules.\n\nTo address this, we will use the `class-validator` library. This library employs classes and TypeScript decorators, similar to TypeORM, to define validation rules. Let's start by installing the library:\n\n```bash\nyarn add class-validator\n```\n\nFirst, we will create a directory at the root of the project called `/dtos`. Inside this directory, we will create the following file: `create-user.dto.ts`, where we define the validation.\n\n```ts\nimport { validateOrReject, IsString, IsNotEmpty, IsAlpha, IsNumber } from \"class-validator\";\n\nexport class CreateUserDto {\n    @IsString()\n    @IsNotEmpty()\n    @IsAlpha()\n    firstName: string;\n\n    @IsString()\n    @IsNotEmpty()\n    @IsAlpha()\n    lastName: string;\n\n    @IsNumber()\n    @IsNotEmpty()\n    @Max(99)\n    age: number;\n}\n\nconst createUserDto = defineEventHandler(async (event) => {\n    const userRequestBody = await readBody(event);\n\n    const user = new CreateUserDto();\n    user.firstName = userRequestBody.firstName;\n    user.lastName = userRequestBody.lastName;\n    user.age = userRequestBody.age;\n\n    try {\n        await validateOrReject(user);\n    } catch (errors) {\n        const res = event.node.res;\n        res.statusCode = 400;\n        res.end(JSON.stringify(errors, null, 2));\n    }\n});\n\nexport default createUserDto;\n```\n\nFirstly, we will define the validation schema class `CreateUserDto`. We use decorators to define validation rules for each field. For more details on available decorators, refer to the `class-validator` package documentation <a href=\"https://www.npmjs.com/package/class-validator\" target=\"_blank\" rel=\"noopener noreferrer\">here</a>.\n\nYou might notice that this function looks very similar to the routes functions. We use the `defineEventHandler` handler and read the event body same as we do in the `create-user.post.ts` route. To give you context, this is a middleware that we will add to the existing `create-user.post.ts` function to handle validation for each request. If the body data does not follow the rule, it will return a 400 error with an explanation of the error.\n\nLet's see how we can do that. Modify the `create-user.post.ts` as follows:\n\n```ts\nimport createUserDto from \"../dtos/create-user.dto\";\n\nexport default defineEventHandler({\n    onRequest: [createUserDto],\n    async handler(event) {\n        const body = await readBody(event);\n        return await createUser(body);\n    },\n});\n```\n\nAs you can see, we added an `onRequest` property and included the `createUserDto` function in the array. This will be run first before each request and validate the data before continuing with any other operation. If the rules are broken, the request will not continue.\n\nFor example, if we added a number to the `firstName` and the rules are set to accept only alphabetic characters, we would get the following error:\n\n```json\n[\n    {\n        \"target\": {\n            \"firstName\": \"Nicole123\",\n            \"lastName\": \"Tesla\",\n            \"age\": 43\n        },\n        \"value\": \"Nicole123\",\n        \"property\": \"firstName\",\n        \"children\": [],\n        \"constraints\": {\n            \"isAlpha\": \"firstName must contain only letters (a-zA-Z)\"\n        }\n    }\n]\n```\n\nOr if we add an age of 101, this will result in an error because we have set rules to accept a maximum age of 99.\n\n```json\n{\n    \"target\": {\n      \"firstName\": \"Nicole\",\n      \"lastName\": \"Tesla\",\n      \"age\": 101\n    },\n    \"value\": 101,\n    \"property\": \"age\",\n    \"children\": [],\n    \"constraints\": {\n      \"max\": \"age must not be greater than 99\"\n    }\n  }\n]\n```\n\n## Cacheing\n\nNitro provides a caching system where we can easily cache certain routes. For more details on how caching works and what options are available, refer to the Nitro documentation <a href=\"https://nitro.unjs.io/guide/cache\" target=\"_blank\" rel=\"noopener noreferrer\">here</a>.\n\nFor now, we will demonstrate how to modify the `get-users.get.ts` type to handle caching for 10 seconds. We can modify the endpoint as follows:\n\n```ts\nexport default defineCachedEventHandler(\n    async () => {\n        return await getUsers();\n    },\n    { maxAge: 10 /* 10 seconds */ }\n);\n```\n\nThat's it. Replacing the function to `defineCachedEventHandler` and adding an option of `maxAge` will handle this automatically.\n\n## Conclusion\n\nNitro is an open-source, user-friendly backend framework for Node.js. It's maintained by the same core team behind Nuxt.js. The framework offers numerous built-in features, making it a great choice for modern web development. These features include file-based routing, auto imports, built-in middleware, caching, and a plugin-based system for easy extendability.\n\nAside from the built-in features in Nitro, we also demonstrate how to start and create a database using SQLite and TypeORM. This includes adding migrations and integrating well-known patterns such as DTOs for validating request.\n\nThe blog post above provides a basic app to help you get started. It can serve as your starting point. Feel free to check out the GitHub repository containing the code for this project <a href=\"https://github.com/Suv4o/nitro-sqlite\" target=\"_blank\" rel=\"noopener noreferrer\">here</a>.\n"
  },
  {
    "articlePath": "/2024/03/24/is-it-possible-to-use-nuxt-link-in-content-rendered-with-v-html",
    "embeddings": [
      -0.02407582849264145,
      0.050425589084625244,
      0.04778950661420822,
      0.04981270059943199,
      0.09208159893751144,
      0.019075121730566025,
      -0.047368891537189484,
      0.03734457492828369,
      0.05412409454584122,
      0.014582373201847076,
      -0.050387006253004074,
      0.014488655142486095,
      0.04427449405193329,
      0.06713097542524338,
      0.01877855882048607,
      0.0363801084458828,
      -0.018125062808394432,
      0.045066166669130325,
      0.015342912636697292,
      -0.015995007008314133,
      0.015983151271939278,
      0.07906888425350189,
      0.043116550892591476,
      -0.018191033974289894,
      0.00392772164195776,
      -0.007341291289776564,
      -0.0485757440328598,
      -0.0046036154963076115,
      0.00471728527918458,
      -0.08173457533121109,
      0.10049615800380707,
      0.01571040228009224,
      -0.0979522168636322,
      0.045287154614925385,
      0.007552052848041058,
      0.045511770993471146,
      -0.049208275973796844,
      -0.04833817854523659,
      -0.013281882740557194,
      -0.043396998196840286,
      0.07756851613521576,
      -0.0076377796940505505,
      -0.12149851769208908,
      -0.03807790204882622,
      -0.04057776555418968,
      -0.027309183031320572,
      -0.04692259430885315,
      -0.06951694190502167,
      -0.06534057855606079,
      0.017393777146935463,
      -0.07337664067745209,
      -0.12030326575040817,
      0.033301107585430145,
      0.030503911897540092,
      -0.022551119327545166,
      0.00482472637668252,
      -0.06804387271404266,
      -0.06514185667037964,
      0.046753138303756714,
      -0.025432508438825607,
      0.031975626945495605,
      -0.044129449874162674,
      0.03933299705386162,
      -0.0221039280295372,
      0.032227110117673874,
      0.02952137216925621,
      0.014340676367282867,
      0.0601382702589035,
      -0.08965133875608444,
      0.03215574100613594,
      0.010381833650171757,
      -0.005163030698895454,
      0.06346997618675232,
      0.0193110853433609,
      0.016015736386179924,
      -0.04959479346871376,
      0.015286067500710487,
      0.0008273106068372726,
      0.022819167003035545,
      -0.0648302212357521,
      0.047798946499824524,
      -0.013962330296635628,
      -0.033241912722587585,
      -0.004162668716162443,
      0.04614921286702156,
      0.053229790180921555,
      -0.002305000787600875,
      -0.04688194766640663,
      0.03390125557780266,
      -0.10090761631727219,
      -0.10539767146110535,
      -0.01250578835606575,
      0.0488152951002121,
      0.01712847501039505,
      0.03223670274019241,
      0.02904897928237915,
      -0.0022399916779249907,
      0.0019857133738696575,
      -0.0027653109282255173,
      0.028388774022459984,
      0.062322940677404404,
      0.009281989187002182,
      -0.029780825600028038,
      0.0011668005026876926,
      0.10743098706007004,
      0.030893703922629356,
      0.06104062497615814,
      0.0657341256737709,
      -0.05667426064610481,
      -0.00015650286513846368,
      -0.007626174949109554,
      0.05867769196629524,
      -0.039016012102365494,
      -0.08746560662984848,
      -0.05108474940061569,
      -0.041112810373306274,
      0.1120327040553093,
      0.0031355852261185646,
      0.024279018864035606,
      0.028839239850640297,
      0.07631512731313705,
      -0.00036667336826212704,
      -0.04517081752419472,
      -0.018400054425001144,
      -0.005533695686608553,
      -0.11980994045734406,
      0.042519181966781616,
      5.213748705386803e-33,
      0.014964471571147442,
      -0.00046087754890322685,
      -0.049263112246990204,
      -0.035181328654289246,
      0.06407319754362106,
      -0.052014030516147614,
      -0.022964244708418846,
      -0.08919848501682281,
      -0.13409815728664398,
      0.00230538472533226,
      -0.004694423172622919,
      -0.036672916263341904,
      -0.027257952839136124,
      0.04182755574584007,
      -0.0005465304129756987,
      -0.04730335250496864,
      0.024401243776082993,
      0.004819059744477272,
      -0.008297443389892578,
      -0.019512977451086044,
      -0.05454156547784805,
      0.000958055432420224,
      -0.022114869207143784,
      0.026913577690720558,
      -0.039358410984277725,
      0.0012899675639346242,
      -0.0283668115735054,
      -0.063306525349617,
      -0.05124864727258682,
      -0.0575430803000927,
      0.019689293578267097,
      0.03696400672197342,
      0.02197781763970852,
      -0.0034489110112190247,
      -0.001327376696281135,
      -0.04380273073911667,
      0.015645112842321396,
      0.02251599356532097,
      -0.10831845551729202,
      0.0433812141418457,
      0.04804181307554245,
      0.00098576326854527,
      0.026135358959436417,
      -0.09116637706756592,
      -0.09178329259157181,
      0.03659716993570328,
      -0.0030735901091247797,
      0.08097020536661148,
      0.000815063074696809,
      -0.0029843677766621113,
      -0.08939454704523087,
      0.011154361069202423,
      -0.04302794858813286,
      -0.09242665767669678,
      0.07711055129766464,
      0.01616593636572361,
      -0.036395978182554245,
      0.021104153245687485,
      0.07701224088668823,
      -0.03157227858901024,
      -0.06410840898752213,
      -0.0238761268556118,
      0.057062502950429916,
      -0.0035539071541279554,
      -0.016624221578240395,
      0.01150526199489832,
      0.07725726813077927,
      0.03730656951665878,
      0.01686960645020008,
      -0.002033299533650279,
      -0.0896725058555603,
      0.08885358273983002,
      0.020412743091583252,
      -0.029091373085975647,
      0.0914105698466301,
      -0.0927906185388565,
      -0.10016846656799316,
      -0.08176753669977188,
      0.023172372952103615,
      0.031771715730428696,
      0.01431905385106802,
      -0.022397587075829506,
      -0.0022566281259059906,
      0.034901753067970276,
      0.002411478664726019,
      -0.03664606809616089,
      0.009472743608057499,
      -0.06312663108110428,
      0.01666814647614956,
      -0.05472460389137268,
      0.0285550095140934,
      -0.02870296686887741,
      -0.025474218651652336,
      -0.13196323812007904,
      -0.03466128185391426,
      -4.367057389562787e-33,
      0.12983092665672302,
      0.07604297995567322,
      -0.02819772996008396,
      0.10579272359609604,
      0.016875561326742172,
      -0.003962003625929356,
      0.08317440748214722,
      0.06898149847984314,
      -0.004731529392302036,
      -0.0500621572136879,
      0.027141893282532692,
      -0.010487491264939308,
      -0.06507384777069092,
      -0.04328279197216034,
      0.013701380230486393,
      0.09811537712812424,
      0.014359905384480953,
      -0.07510190457105637,
      0.08216195553541183,
      -0.04866372048854828,
      -0.02452104166150093,
      -0.00984880793839693,
      0.020472804084420204,
      0.024401739239692688,
      0.04041961580514908,
      0.05349256470799446,
      0.09568971395492554,
      0.09881314635276794,
      -0.046214692294597626,
      -0.05619483441114426,
      -0.007453725207597017,
      0.033986836671829224,
      -0.040475424379110336,
      -0.025560831651091576,
      0.049469709396362305,
      0.0367901474237442,
      0.028315545991063118,
      0.06146642938256264,
      0.012061692774295807,
      0.03369264677166939,
      0.06021475791931152,
      0.016879724338650703,
      0.011724354699254036,
      0.019888481125235558,
      -0.06207882985472679,
      -0.02635568380355835,
      0.06542301923036575,
      -0.03431057184934616,
      0.029787946492433548,
      0.0009703999967314303,
      0.06408478319644928,
      -0.10351807624101639,
      -0.0772748813033104,
      0.04738879203796387,
      -0.01661861687898636,
      -0.07635872066020966,
      -0.026284581050276756,
      0.007726981304585934,
      -0.030484337359666824,
      -0.038771532475948334,
      0.04716413468122482,
      -0.016081832349300385,
      0.01100366935133934,
      -0.02989974617958069,
      0.008780824020504951,
      -0.06868164986371994,
      -0.10696897655725479,
      -0.05836908519268036,
      -0.02690502628684044,
      0.011159567162394524,
      0.0008085792069323361,
      0.044146813452243805,
      0.06884396821260452,
      -0.010921303182840347,
      0.05088226497173309,
      -0.037077657878398895,
      0.10702815651893616,
      -0.00300122844055295,
      0.013325860723853111,
      -0.05485224351286888,
      -0.07455962896347046,
      -0.009584261104464531,
      -0.061311930418014526,
      -0.023789143189787865,
      0.044550616294145584,
      0.06080903485417366,
      -0.07178559899330139,
      0.07482898980379105,
      0.007388826925307512,
      -0.027559423819184303,
      -0.03310549631714821,
      -0.010637394152581692,
      0.016045693308115005,
      0.05885789543390274,
      -0.008753368631005287,
      -5.571390815362065e-8,
      -0.05062879994511604,
      -0.0005044826539233327,
      -0.12132448703050613,
      -0.045118607580661774,
      -0.018300699070096016,
      0.07342180609703064,
      0.09065885841846466,
      -0.04728776961565018,
      -0.03299770504236221,
      0.041981663554906845,
      0.07311186194419861,
      0.10227703303098679,
      -0.01863591931760311,
      0.04270227625966072,
      -0.04511719197034836,
      0.07276585698127747,
      -0.013438606634736061,
      0.035027969628572464,
      -0.00753549300134182,
      0.020466111600399017,
      0.004530825652182102,
      0.07230626791715622,
      -0.04614787921309471,
      -0.020862506702542305,
      0.09368725121021271,
      0.07751002907752991,
      -0.10833721607923508,
      -0.024207059293985367,
      0.0018366684671491385,
      -0.016917914152145386,
      0.04456767439842224,
      0.057800114154815674,
      -0.05150626227259636,
      -0.03277498111128807,
      -0.019265150651335716,
      -0.024308806285262108,
      0.03698413446545601,
      0.019677741453051567,
      -0.015343673527240753,
      0.05904035270214081,
      0.04336203262209892,
      0.028687026351690292,
      -0.06969345360994339,
      -0.022778604179620743,
      -0.006203405559062958,
      -0.028014209121465683,
      -0.046186838299036026,
      -0.02267857827246189,
      0.07250544428825378,
      0.00939672626554966,
      0.06053029000759125,
      -0.06977111846208572,
      -0.002568215597420931,
      -0.0014970856718719006,
      0.012566640041768551,
      -0.07169172167778015,
      0.1555178463459015,
      0.024580417200922966,
      -0.022856315597891808,
      -0.029485657811164856,
      0.045705366879701614,
      -0.030487336218357086,
      0.13590727746486664,
      0.002348191337659955
    ],
    "content": "---\ntitle: Is it possible to use \"<nuxt-link>\" in content rendered with \"v-html\"?\ndescription: If you've used Vue or Nuxt, you're likely familiar with the \"v-html\" directive. This is used to dynamically insert HTML content into an element. It takes a string value containing HTML tags and text, replacing the inner HTML of the target element with this content. One limitation of \"v-html\" is that it does not allow you to render \"<nuxt-link>\". Instead, all \"<a>\" HTML tags do not use the native Vue router. However, we can address this limitation by writing our own directive. This will allow all \"<a>\" tags to be converted into \"<nuxt-link>\". Thanks to Nuxt and its plugin system, we can easily expand the functionality of Nuxt. Let's get started.\nimage: https://res.cloudinary.com/suv4o/image/upload/q_auto,f_auto,w_1200,e_sharpen:100/v1711259337/blog/Is%20it%20possible%20to%20use%20nuxt-link%20in%20content%20rendered%20with%20v-html/aktookoffk14wzluq2er\nkeywords:\n    - Nuxt.js\n    - Vue.js\n    - TypeScript\n    - JavaScript\n    - Vue Directives\n    - v-html\n    - Nuxt-link\n    - Vue Router\n    - Render html content\n    - Web Development\n    - Development\ntype: page\nblog: post\npublished: 24th March 2024\nreadTime: 6\nauthor: Aleksandar Trpkovski\narticleTags:\n    - Nuxt.js\n    - Vue.js\n    - TypeScript\n---\n\n# Is it possible to use `<nuxt-link>` in content rendered with `v-html`?\n\n_{{$document.published}} • {{$document.readTime}} min read — by **[{{$document.author}}](/)**_\n\n::tag-pills{:tags=\"articleTags\"}\n::\n\n![Landing Image](https://res.cloudinary.com/suv4o/image/upload/q_auto,f_auto,w_750,e_sharpen:100/v1711259337/blog/Is%20it%20possible%20to%20use%20nuxt-link%20in%20content%20rendered%20with%20v-html/aktookoffk14wzluq2er)\n\nIf you've used Vue or Nuxt, you're likely familiar with the `v-html` directive. This is used to dynamically insert HTML content into an element. It takes a string value containing HTML tags and text, replacing the inner HTML of the target element with this content.\n\nOne limitation of `v-html` is that it does not allow you to render `<nuxt-link>`. Instead, all `<a>` HTML tags do not use the native Vue router.\n\nHowever, we can address this limitation by writing our own directive. This will allow all `<a>` tags to be converted into `<nuxt-link>`.\n\nThanks to Nuxt and its plugin system, we can easily expand the functionality of Nuxt. Let's get started.\n\n## Create a Nuxt plugin\n\nWithin the root of your Nuxt application, create a `/plugins` directory. In this directory, create a file named `nuxt-html.ts`. The following logic will be added to this file:\n\n```ts\nexport default defineNuxtPlugin((nuxtApp) => {\n    nuxtApp.vueApp.directive(\"nuxtHtml\", {\n        mounted(el: HTMLElement, binding) {\n            el.innerHTML = assignAnchorsIds(binding.value);\n            convertAnchorToNuxtLink(el);\n        },\n        updated(el, binding) {\n            el.innerHTML = assignAnchorsIds(binding.value);\n            convertAnchorToNuxtLink(el);\n        },\n        unmounted() {\n            removeListeners();\n        },\n    });\n});\n```\n\nLet's break down the code above to understand each part:\n\n- **`defineNuxtPlugin`:** This function creates a Nuxt plugin, making its features available throughout the application.\n- **`nuxtApp.vueApp.directive`:** This registers a custom Vue directive called `nuxtHtml`. We can use `v-nuxt-html` later in the `.vue` file.\n\n**Directive Lifecycle Hooks:**\n\n- **`mounted`:** Executes when the element using the directive is inserted into the DOM.\n- **`updated`:** Executes when the value bound to the directive changes.\n- **`unmounted`:** Executes when the element is removed from the DOM.\n\nNext, let's examine the key functions we'll use within our directive: `assignAnchorsIds`, `convertAnchorToNuxtLink`, and `removeListeners`. We'll add these functions in the `nuxt-html.ts`, above the plugin definition.\n\n```ts\nconst idsWithListeners = new Set<string>();\n\nfunction generateUuid() {\n    return \"xxxxxxxx-xxxx-4xxx-yxxx-xxxxxxxxxxxx\".replace(/[xy]/g, function (c) {\n        const r = (Math.random() * 16) | 0,\n            v = c === \"x\" ? r : (r & 0x3) | 0x8;\n        return v.toString(16);\n    });\n}\n\nfunction assignAnchorsIds(html: string) {\n    const domParser = new DOMParser();\n    const doc = domParser.parseFromString(html, \"text/html\");\n    const anchors = doc.querySelectorAll(\"a\");\n\n    anchors.forEach((anchor) => {\n        if (!anchor.hasAttribute(\"id\")) {\n            anchor.setAttribute(\"id\", generateUuid());\n        }\n    });\n    return doc.documentElement.outerHTML;\n}\n\nfunction convertAnchorToNuxtLink(html: HTMLElement) {\n    const anchors = html.querySelectorAll(\"a\");\n\n    anchors.forEach((anchor) => {\n        if (anchor.id && !idsWithListeners.has(anchor.id)) {\n            const link = document.getElementById(anchor.id);\n\n            link?.addEventListener(\"click\", (event) => {\n                event.preventDefault();\n                const to = anchor.getAttribute(\"href\");\n                if (to) {\n                    useNuxtApp().$router.push(to);\n                }\n            });\n\n            // Add the ID to the Set\n            idsWithListeners.add(anchor.id);\n        }\n    });\n}\n\nfunction removeListeners() {\n    idsWithListeners.forEach((id) => {\n        const link = document.getElementById(id);\n        link?.removeEventListener(\"click\", () => {});\n        idsWithListeners.delete(id);\n    });\n}\n```\n\nNow, let's delve into the specifics of each function and understand how they contribute to the overall functionality of the directive.\n\n- **`assignAnchorsIds`:**\n    - Parses the provided HTML string into a DOM document.\n    - Identifies anchor elements (`<a>`) without IDs.\n    - Assigns unique IDs (using `generateUuid`) to those anchors for tracking and linking.\n    - Returns the modified HTML string.\n- **`convertAnchorToNuxtLink`:**\n    - Finds anchor elements within a given HTML element.\n    - Identifies anchors with IDs that haven't been handled yet.\n    - Attaches click event listeners to those anchors:\n        - Prevents default browser behaviour (page reload).\n        - Retrieves the anchor's `href` attribute.\n        - Utilises Nuxt's `$router` to programmatically navigate to the specified route, effectively converting basic anchors into Nuxt-powered navigation links.\n- **`removeListeners`:**\n    - Iterates through the IDs of anchors with event listeners.\n    - Removes the click event listeners to prevent memory leaks or unintended behaviour.\n\n## Using the `v-nuxt-html` directive\n\nNow, we can use our `v-nuxt-html` as follows in our `.vue` file:\n\n```html\n<script setup lang=\"ts\">\n    const htmlString = ref(`\n<h1>Example Heading</h1>\n<p>Example Paragraph</p>\n<a href=\"/example-1\">Example 1</a>\n<a href=\"/example-2\">Example 2</a>\n<a href=\"/example-3\">Example 3</a>`);\n\n    onMounted(() => {\n        setTimeout(() => {\n            htmlString.value = `\n            <h1>Example Heading</h1>\n            <p>Example Paragraph</p>\n            <a href=\"/example-1\">Example 1</a>\n            <a href=\"/example-2\">Example 2</a>\n            <a href=\"/example-3\">Example 3</a>\n            <a href=\"/example-4\">Example 4</a>`;\n        }, 4000);\n    });\n</script>\n\n<template>\n    <div>\n        <div v-nuxt-html=\"htmlString\"></div>\n    </div>\n</template>\n```\n\nAlright, let's break down the code above piece by piece, so we can get a good grasp on how everything fits together.\n\n- **Dynamic HTML Content:** The code defines a `ref` named `htmlString` that holds HTML content as a string. This allows for dynamic updates to the displayed HTML.\n- **Initial Render:**\n    - The template section includes a `div` element containing another `div` with the `v-nuxt-html` directive applied.\n    - When the component mounts, the initial value of `htmlString` (defined in the `script setup` section) is used.\n    - The `v-nuxt-html` directive intercepts this and performs the following actions:\n        - It parses the HTML string using the `assignAnchorsIds` function. This ensures any anchor (`<a>`) elements without IDs are assigned unique ones.\n        - It then calls the `convertAnchorToNuxtLink` function. This function finds the anchors within the parsed HTML and attaches click event listeners to them.\n        - When an anchor with a `href` attribute is clicked, the event listener:\n            - Prevents default behavior (stopping the browser from navigating away from the current page).\n            - Extracts the `href` attribute value (e.g., `/example-1`).\n            - Uses Nuxt's router (`$router`) to programmatically navigate to the specified route, effectively turning the anchor into a Nuxt link.\n- **Dynamic Update:** After a 4-second delay using `setTimeout`, the `htmlString` is updated with a new string containing an additional anchor element (`<a href=\"/example-4\">Example 4</a>`).\n- **Re-rendering and Event Listener Management:**\n    - The component re-renders due to the change in `htmlString`.\n    - The `v-nuxt-html` directive again parses and processes the updated HTML.\n    - Importantly, the directive's `unmounted` lifecycle hook ensures any previously attached event listeners are removed using the `removeListeners` function. This prevents memory leaks and unintended behavior when the HTML content changes.\n\n## Conclusion\n\nUsing the `v-html` directive in a Nuxt application has a limitation - it doesn't render `<nuxt-link>`. You can overcome this by creating a custom Vue directive named `v-nuxt-html`. This directive helps convert all `<a>` HTML tags into `<nuxt-link>` behaviour, enabling dynamic, interactive HTML content in a Nuxt application. The code for this is available in the following GitHub repository <a href=\"https://github.com/Suv4o/nuxt-link-with-v-html\" target=\"_blank\" rel=\"noopener noreferrer\">here</a>.\n"
  },
  {
    "articlePath": "/2025/01/04/understanding-javascript-reactivity-with-proxy-and-typescript",
    "embeddings": [
      -0.09952448308467865,
      -0.02166653983294964,
      0.028881890699267387,
      0.05582119897007942,
      0.027363834902644157,
      0.06936890631914139,
      0.026593348011374474,
      0.09125975519418716,
      0.003142307512462139,
      0.06270968914031982,
      -0.07943947613239288,
      0.024648118764162064,
      -0.021974289789795876,
      0.07715331017971039,
      0.05299866199493408,
      0.10456553101539612,
      0.02957282029092312,
      -0.046131033450365067,
      -0.044328473508358,
      -0.016758453100919724,
      0.029872482642531395,
      -0.07789935916662216,
      0.009677516296505928,
      -0.01229380164295435,
      -0.029207058250904083,
      0.07312377542257309,
      -0.11839639395475388,
      -0.05131097882986069,
      -0.04054202139377594,
      -0.007903758436441422,
      0.036266643553972244,
      0.06029559671878815,
      -0.060376618057489395,
      0.0028779651038348675,
      -0.11601901054382324,
      0.08504388481378555,
      -0.023562658578157425,
      -0.0508718304336071,
      0.012829131446778774,
      -0.047159772366285324,
      0.021764438599348068,
      0.05328363552689552,
      -0.041912056505680084,
      -0.06795534491539001,
      0.09108109772205353,
      -0.04551786184310913,
      -0.019240155816078186,
      -0.055515632033348083,
      -0.04511328414082527,
      -0.04698958992958069,
      -0.09570333361625671,
      -0.07014927268028259,
      0.022544456645846367,
      0.06440861523151398,
      -0.0005962957511655986,
      -0.025001415982842445,
      -0.011250313371419907,
      0.009264440275728703,
      0.025708895176649094,
      -0.04578683525323868,
      0.00027324786060489714,
      -0.04526813328266144,
      0.007858841679990292,
      0.02939414791762829,
      -0.01589721255004406,
      0.0017173434607684612,
      -0.023082586005330086,
      0.0687636211514473,
      0.10171792656183243,
      -0.009783640503883362,
      -0.09115680307149887,
      0.025139834731817245,
      0.05923536419868469,
      -0.04135904461145401,
      0.013125319965183735,
      -0.10773467272520065,
      0.043735213577747345,
      0.0036156242713332176,
      0.06536439061164856,
      -0.08390583842992783,
      -0.04973035678267479,
      -0.0330202579498291,
      -0.05346610024571419,
      0.061281684786081314,
      0.009094955399632454,
      0.07500964403152466,
      0.02554544061422348,
      -0.06065118685364723,
      0.04247904196381569,
      -0.006300884764641523,
      -0.051421571522951126,
      -0.053826410323381424,
      0.043288882821798325,
      0.08214708417654037,
      0.02728867158293724,
      0.030520031228661537,
      0.020651565864682198,
      0.04445980116724968,
      -0.036266159266233444,
      0.050655800849199295,
      0.030445216223597527,
      0.05770551413297653,
      0.009852305985987186,
      0.016471024602651596,
      0.047937918454408646,
      -0.029726263135671616,
      0.004156473092734814,
      0.01894404925405979,
      -0.035651370882987976,
      0.04002388194203377,
      -0.07836279273033142,
      0.028153061866760254,
      -0.01878892257809639,
      -0.09183212369680405,
      -0.07521288841962814,
      0.03214789181947708,
      0.13317909836769104,
      -0.049127381294965744,
      0.11592922359704971,
      0.04758109152317047,
      0.11007609218358994,
      0.030738113448023796,
      -0.0031886270735412836,
      -0.029751015827059746,
      0.06377273052930832,
      -0.03540145978331566,
      0.06976468116044998,
      7.580993759219281e-33,
      0.044756703078746796,
      0.06015559285879135,
      -0.020244454964995384,
      0.02269675023853779,
      0.046178776770830154,
      -0.006490034982562065,
      0.05396941676735878,
      -0.04214373230934143,
      -0.08992182463407516,
      -0.014070935547351837,
      0.04166034981608391,
      0.08590986579656601,
      -0.06884801387786865,
      0.058785419911146164,
      -0.017661139369010925,
      -0.04579520970582962,
      -0.023146959021687508,
      -0.01381987426429987,
      0.02524089813232422,
      -0.03830688074231148,
      0.007281702943146229,
      0.00006267486605793238,
      -0.036914922297000885,
      0.020538443699479103,
      -0.0038597078528255224,
      -0.02426440455019474,
      0.01478357333689928,
      0.04753781110048294,
      -0.07320310175418854,
      -0.01768583431839943,
      0.0550835058093071,
      0.04649611935019493,
      -0.05296824499964714,
      0.0037035285495221615,
      -0.0071490793488919735,
      -0.07902323454618454,
      0.01036744937300682,
      -0.06540388613939285,
      -0.09010794013738632,
      -0.05678926408290863,
      -0.002042123582214117,
      0.012842687778174877,
      -0.039530541747808456,
      -0.05912411957979202,
      0.03053930401802063,
      -0.06914506107568741,
      0.005733187776058912,
      0.05105726048350334,
      0.10026085376739502,
      0.01191677525639534,
      -0.047144901007413864,
      -0.014363502152264118,
      0.023319847881793976,
      -0.07942575961351395,
      0.06999439001083374,
      0.012458632700145245,
      0.03415549919009209,
      0.05186086893081665,
      0.007893435657024384,
      -0.021447720006108284,
      -0.06600268930196762,
      0.026724033057689667,
      0.07991206645965576,
      -0.034315675497055054,
      0.03343532979488373,
      0.05181550979614258,
      -0.05725717544555664,
      0.01837976463139057,
      0.0245150588452816,
      0.046555958688259125,
      -0.013853445649147034,
      0.04557552561163902,
      0.04185893386602402,
      0.02308526635169983,
      0.07510270923376083,
      -0.0693482905626297,
      -0.0413200706243515,
      -0.09355110675096512,
      0.053660277277231216,
      -0.005813259165734053,
      -0.018019216135144234,
      -0.04523376375436783,
      -0.028276754543185234,
      0.14660179615020752,
      -0.09203097969293594,
      -0.021627426147460938,
      0.030698219314217567,
      -0.034759435802698135,
      0.026874128729104996,
      -0.026910891756415367,
      -0.002704999875277281,
      -0.018869033083319664,
      0.03704172745347023,
      -0.07750043272972107,
      -0.06701192259788513,
      -7.826961544025029e-33,
      -0.01072730403393507,
      0.004222280811518431,
      -0.09711870551109314,
      0.09143448621034622,
      -0.029505539685487747,
      -0.034720953553915024,
      -0.0052596223540604115,
      0.05331921949982643,
      0.06664558500051498,
      -0.029983507469296455,
      0.042562857270240784,
      -0.02743193879723549,
      -0.0016471996204927564,
      0.012737133540213108,
      -0.054760873317718506,
      0.07149649411439896,
      -0.04678191617131233,
      -0.09808377921581268,
      0.0727672278881073,
      0.003317953320220113,
      0.03032473474740982,
      0.05671164020895958,
      -0.009182564914226532,
      0.08710921555757523,
      0.06295373290777206,
      0.013084139674901962,
      0.06213432550430298,
      0.06129152700304985,
      -0.01863194815814495,
      -0.006696515250951052,
      -0.032569050788879395,
      -0.02519846148788929,
      -0.11564163118600845,
      0.009157435968518257,
      0.00368748651817441,
      -0.011182378977537155,
      -0.009994996711611748,
      0.07012655586004257,
      -0.016448717564344406,
      -0.05646412819623947,
      0.0038037654012441635,
      -0.02976379357278347,
      -0.02156160958111286,
      -0.032410696148872375,
      -0.024126045405864716,
      0.0010785643244162202,
      0.004738011863082647,
      0.049281053245067596,
      0.019585436210036278,
      -0.031762637197971344,
      0.033946797251701355,
      -0.0590001717209816,
      -0.054653726518154144,
      0.009990287944674492,
      -0.05840229243040085,
      -0.021232014521956444,
      -0.005609715357422829,
      -0.037484195083379745,
      -0.011351876892149448,
      -0.030194111168384552,
      -0.005001621786504984,
      -0.07275066524744034,
      -0.005030028056353331,
      0.025798341259360313,
      0.01427996065467596,
      -0.07245567440986633,
      -0.1419948935508728,
      -0.021645907312631607,
      0.05928291007876396,
      -0.07145533710718155,
      0.02321484312415123,
      0.011472306214272976,
      0.0596645250916481,
      -0.06971866637468338,
      0.07933321595191956,
      -0.05008701980113983,
      0.08725684136152267,
      -0.07106627523899078,
      0.03512493148446083,
      0.039967410266399384,
      -0.02386554516851902,
      0.042763613164424896,
      0.042015962302684784,
      -0.02537139505147934,
      -0.019253987818956375,
      0.05558536946773529,
      -0.12326221168041229,
      0.01805395446717739,
      0.006888541392982006,
      -0.0023325856309384108,
      -0.053184207528829575,
      0.024562086910009384,
      -0.08574032038450241,
      0.04153043031692505,
      -0.02489900216460228,
      -5.9426433551834634e-8,
      0.04045826196670532,
      -0.004991764668375254,
      -0.06787309050559998,
      -0.0517258457839489,
      -0.01818924769759178,
      0.010169505141675472,
      -0.01054281834512949,
      -0.10110856592655182,
      -0.06687098741531372,
      0.05005192384123802,
      0.05137889087200165,
      0.12316925823688507,
      -0.018717661499977112,
      0.05269354209303856,
      0.028372712433338165,
      0.006137256044894457,
      -0.0023103689309209585,
      0.049616120755672455,
      -0.09648079425096512,
      0.005760538391768932,
      0.033727820962667465,
      0.009647377766668797,
      -0.05560153350234032,
      -0.026467973366379738,
      0.11364538967609406,
      0.05793533846735954,
      0.040008965879678726,
      -0.014739526435732841,
      0.01934404857456684,
      -0.003262976882979274,
      -0.011430098675191402,
      0.04869801551103592,
      0.03106551244854927,
      -0.053704921156167984,
      0.013503342866897583,
      0.06847088038921356,
      0.06210422143340111,
      -0.019456390291452408,
      -0.06196553260087967,
      0.07389477640390396,
      0.041316624730825424,
      -0.013932950794696808,
      -0.08572535961866379,
      0.017558597028255463,
      0.02458595298230648,
      0.007525129709392786,
      -0.06881184130907059,
      0.01180796418339014,
      0.04977886751294136,
      -0.026790542528033257,
      0.029993100091814995,
      -0.05445832386612892,
      -0.028264379128813744,
      -0.0007469535921700299,
      -0.0465942844748497,
      0.028502698987722397,
      0.033082641661167145,
      -0.04281308874487877,
      0.022133557125926018,
      -0.058582957834005356,
      0.08924797177314758,
      0.013354997150599957,
      0.09241490066051483,
      0.022304333746433258
    ],
    "content": "---\ntitle: Understanding JavaScript Reactivity with Proxy and TypeScript\ndescription: Learn how to create a reactive system in JavaScript using Proxy, step-by-step, from monitoring changes to implementing a Vue.js-inspired ref function. This guide covers everything from simple examples to advanced TypeScript integration, culminating in a practical demo of two-way HTML bindings. Perfect for developers exploring reactivity concepts and building modern web apps.\nimage: https://res.cloudinary.com/suv4o/image/upload/q_auto,f_auto,w_1200,e_sharpen:100/v1735957390/blog/understanding-javascript-reactivity-with-proxy-and-typescript/yklh8nkuomwfu8gbmcqq\nkeywords:\n    - React.js\n    - Proxy\n    - Vue.js\n    - TypeScript\n    - Reactivity in JavaScript\n    - Reactivity\n    - Vue 3\n    - Web Development\n    - Development\n    - JavaScript Proxy\n    - JavaScript reactivity\n    - TypeScript reactivity\n    - Reactive programming\n    - JavaScript reactive systems\n    - Vue.js reactivity\n    - Two-way data binding\n    - TypeScript Proxy example\n    - JavaScript Proxy tutorial\n    - TypeScript reactive variables\n    - Build reactive system JavaScript\n    - TypeScript two-way binding\n    - Reactive programming tutorial\n    - Proxy-based reactivity\n    - TypeScript DOM reactivity\ntype: page\nblog: post\npublished: 4th January 2025\nreadTime: 5\nauthor: Aleksandar Trpkovski\narticleTags:\n    - JavaScript\n    - TypeScript\n    - FrontEnd\n---\n\n# Understanding JavaScript Reactivity with Proxy and TypeScript\n\n_{{$document.published}} • {{$document.readTime}} min read — by **[{{$document.author}}](/)**_\n\n::tag-pills{:tags=\"articleTags\"}\n::\n\n![Landing Image](https://res.cloudinary.com/suv4o/image/upload/q_auto,f_auto,w_750,e_sharpen:100/v1735957390/blog/understanding-javascript-reactivity-with-proxy-and-typescript/yklh8nkuomwfu8gbmcqq)\n\nReactivity is a core concept in modern JavaScript frameworks like Vue.js, where UI automatically updates when the underlying data changes. But have you ever wondered how to implement a similar reactivity system yourself? In this blog post, we’ll explore how you can use JavaScript's `Proxy` to monitor and react to data changes. By the end, we’ll create a simple reactive system with two-way HTML bindings using TypeScript.\n\n## Step 1: Monitoring Changes with JavaScript Proxy\n\nThe `Proxy` object in JavaScript allows you to intercept and customise operations performed on an object, such as reading or setting a property. Let’s start with a simple example:\n\n```javascript\n// Define a target object\nlet target = { value: 0 };\n\n// Create a Proxy handler to track changes\nconst handler = {\n    set(obj, prop, value) {\n        console.log(`Property \"${prop}\" changed from ${obj[prop]} to ${value}`);\n        obj[prop] = value; // Update the value\n        return true; // Indicate success\n    },\n};\n\n// Create a proxy for the target object\nconst proxy = new Proxy(target, handler);\n\n// Monitor changes\nproxy.value = 42; // Logs: Property \"value\" changed from 0 to 42\nproxy.value = 100; // Logs: Property \"value\" changed from 42 to 100\n```\n\nHere, every time the `value` property changes, the `set` trap is triggered, and we log the change. This is the foundation for building a reactive system.\n\n## Step 2: Creating a Reusable `watch` Function\n\nNext, let’s create a reusable function called `watch`. This function will monitor changes to a specific property and execute a callback whenever the property changes.\n\n```javascript\nfunction watch(target, property, callback) {\n    const handler = {\n        set(obj, prop, value) {\n            if (prop === property) {\n                callback(value, obj[prop]); // Call the callback\n            }\n            obj[prop] = value; // Update the value\n            return true;\n        },\n    };\n\n    return new Proxy(target, handler);\n}\n\n// Usage example\nlet data = { value: 0 };\nconst watchedData = watch(data, \"value\", (newValue, oldValue) => {\n    console.log(`Value changed from ${oldValue} to ${newValue}`);\n});\n\nwatchedData.value = 42; // Logs: Value changed from 0 to 42\nwatchedData.value = 100; // Logs: Value changed from 42 to 100\n```\n\nThis abstraction makes it easy to monitor changes for any property in any object.\n\n## Step 3: Simplifying Reactivity with `ref`\n\nInspired by Vue.js, we can simplify our system by wrapping a value in a `ref`. A `ref` is an object with a single `value` property that is reactive. Here’s how it looks in JavaScript:\n\n```javascript\nfunction ref(initialValue, onChange) {\n    const target = { value: initialValue };\n\n    const handler = {\n        set(obj, prop, newValue) {\n            if (prop === \"value\") {\n                onChange?.(newValue, obj[prop]); // Trigger callback\n            }\n            obj[prop] = newValue; // Update the value\n            return true;\n        },\n    };\n\n    return new Proxy(target, handler);\n}\n\n// Example usage\nconst name = ref(\"Alex\", (newValue, oldValue) => {\n    console.log(`Name changed from ${oldValue} to ${newValue}`);\n});\n\nconsole.log(name.value); // Alex\nname.value = \"John\"; // Logs: Name changed from Alex to John\n```\n\nThis implementation is simple and reusable, but we can make it even better by adding type safety with TypeScript.\n\n## Step 4: Adding TypeScript for Type Safety\n\nWith TypeScript, we can make the `ref` function type-safe. This ensures that the `value` property always has the correct type and the callback receives properly typed arguments.\n\n```typescript\ntype RefCallback<T> = (newValue: T, oldValue: T) => void;\n\nfunction ref<T>(initialValue: T, onChange?: RefCallback<T>) {\n    const target = { value: initialValue };\n\n    const handler: ProxyHandler<{ value: T }> = {\n        set(obj, prop, newValue) {\n            if (prop === \"value\" && obj.value !== newValue) {\n                onChange?.(newValue as T, obj.value); // Trigger callback\n            }\n            obj[prop as keyof typeof obj] = newValue;\n            return true;\n        },\n    };\n\n    return new Proxy(target, handler);\n}\n\n// Usage with TypeScript\nconst age = ref(25, (newValue, oldValue) => {\n    console.log(`Age changed from ${oldValue} to ${newValue}`);\n});\n\nage.value = 30; // Logs: Age changed from 25 to 30\n```\n\nWith TypeScript, you get type safety, better IDE support, and fewer runtime errors.\n\n## Step 5: Building a Reactive HTML System\n\nFinally, let’s create a system where changes to a `ref` update the DOM reactively. We’ll use our `ref` implementation from the previous step.\n\n```html\n<!doctype html>\n<html lang=\"en\">\n    <head>\n        <meta charset=\"UTF-8\" />\n        <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\" />\n        <title>Reactivity with Proxy and TypeScript</title>\n    </head>\n    <body>\n        <div>\n            <p id=\"text\"></p>\n            <input id=\"input\" type=\"text\" placeholder=\"Enter text...\" />\n        </div>\n        <script>\n            function ref(initialValue, onChange) {\n                const target = { value: initialValue };\n\n                const handler = {\n                    set(obj, prop, newValue) {\n                        if (prop === \"value\" && obj.value !== newValue) {\n                            onChange?.(newValue, obj.value); // Trigger callback\n                        }\n                        obj[prop] = newValue;\n                        return true;\n                    },\n                };\n\n                return new Proxy(target, handler);\n            }\n\n            document.body.innerHTML = `\n          <div>\n            <p id=\"text\"></p>\n            <input id=\"input\" type=\"text\" placeholder=\"Enter text...\" />\n          </div>\n        `;\n\n            const textElement = document.getElementById(\"text\");\n            const inputElement = document.getElementById(\"input\");\n\n            // Create a reactive ref\n            const name = ref(\"Alex\", (newValue) => {\n                textElement.textContent = `Hello, ${newValue}!`; // Update the DOM reactively\n            });\n\n            // Initialize the DOM\n            textElement.textContent = `Hello, ${name.value}!`;\n\n            // Listen for input changes\n            inputElement.addEventListener(\"input\", (event) => {\n                const target = event.target;\n                name.value = target.value; // Trigger reactivity\n            });\n        </script>\n    </body>\n</html>\n```\n\n### How It Works:\n\n1. **Reactive Updates:** When `name.value` changes, the callback updates the DOM (`<p>` element).\n2. **Two-Way Binding:** Changes in the input field update the `name.value`, and the DOM reacts accordingly.\n3. **Reactivity Simplified:** This mimics Vue.js's two-way data binding system with minimal code.\n\n## Conclusion\n\nUsing JavaScript's `Proxy`, we've built a simple yet powerful reactivity system. We started with basic change tracking, moved to a reusable `watch` function, simplified it with `ref`, added type safety with TypeScript, and finally created a reactive HTML system.\n\nThis demonstrates how modern frameworks implement reactivity under the hood, and you can now experiment with your own lightweight reactive systems.\n\nThe code for this is available in the following GitHub repository <a href=\"https://github.com/Suv4o/understanding-javascript-reactivity-with-proxy-and-typescript?tab=readme-ov-file\" target=\"_blank\" rel=\"noopener noreferrer\">here</a>.\n"
  },
  {
    "articlePath": "/2025/01/09/the-container-presentational-pattern-with-react-and-vue",
    "embeddings": [
      -0.10362355411052704,
      0.0706443265080452,
      0.022354522719979286,
      0.0515824630856514,
      0.07452551275491714,
      0.0568554624915123,
      -0.03203907608985901,
      0.06228364631533623,
      0.015175046399235725,
      0.004651274532079697,
      -0.025096304714679718,
      0.04745302349328995,
      -0.10712400078773499,
      0.07239000499248505,
      0.06835530698299408,
      0.01327842753380537,
      -0.014637863263487816,
      0.03980844095349312,
      -0.030125794932246208,
      0.019715566188097,
      0.08266784250736237,
      -0.011060329154133797,
      0.01208044495433569,
      -0.009445441886782646,
      -0.04785836115479469,
      0.12168271094560623,
      -0.07225596904754639,
      -0.0612708181142807,
      -0.012696701101958752,
      -0.04404217004776001,
      0.053841810673475266,
      0.09210098534822464,
      -0.05223959684371948,
      0.005902523174881935,
      -0.07086250185966492,
      0.03308065980672836,
      -0.008073337376117706,
      -0.049320682883262634,
      -0.0390014573931694,
      -0.02747502736747265,
      0.025336282327771187,
      0.014574067667126656,
      -0.10949583351612091,
      -0.03457358479499817,
      0.023131918162107468,
      -0.07130812853574753,
      0.0033137300051748753,
      -0.06405975669622421,
      -0.04223005846142769,
      -0.02032814361155033,
      -0.0631919577717781,
      -0.08019141852855682,
      0.03215118497610092,
      0.03581731393933296,
      0.006103822495788336,
      -0.009000520221889019,
      0.022591959685087204,
      0.016895459964871407,
      0.052739765495061874,
      -0.07435117661952972,
      0.04484689235687256,
      -0.004173619672656059,
      -0.007119595538824797,
      0.013172528706490993,
      0.04238755628466606,
      0.05696295201778412,
      0.036321718245744705,
      0.03940904140472412,
      0.09171197563409805,
      0.009196256287395954,
      -0.05614655837416649,
      0.05666366592049599,
      0.07154978066682816,
      -0.016459858044981956,
      0.016065234318375587,
      -0.053978681564331055,
      0.0011749588884413242,
      -0.029398510232567787,
      0.04252346605062485,
      -0.024663889780640602,
      -0.015549789182841778,
      -0.028719278052449226,
      -0.02664945460855961,
      -0.03211252763867378,
      -0.03371931612491608,
      0.08253005892038345,
      0.005212838761508465,
      -0.06900209933519363,
      0.047680143266916275,
      -0.06382257491350174,
      -0.08479563146829605,
      -0.040059495717287064,
      0.019899539649486542,
      0.012202879413962364,
      0.018872477114200592,
      -0.014327063225209713,
      -0.023251883685588837,
      0.009689386002719402,
      -0.02774251438677311,
      0.05130143463611603,
      0.04327484220266342,
      0.04969027638435364,
      0.029624277725815773,
      0.05077924579381943,
      0.10863862931728363,
      -0.04589133337140083,
      -0.01959700509905815,
      0.010500308126211166,
      -0.09569792449474335,
      0.004188458435237408,
      -0.041165973991155624,
      0.07187502086162567,
      -0.014411442913115025,
      -0.07442143559455872,
      -0.03829603269696236,
      -0.02422231435775757,
      0.06057310849428177,
      -0.04154188558459282,
      0.11031436175107956,
      0.07639177143573761,
      0.1523974984884262,
      0.03949565812945366,
      -0.03162425756454468,
      -0.00784657709300518,
      0.017434142529964447,
      -0.03818412125110626,
      -0.04108137637376785,
      6.580858186284724e-33,
      0.0027112863026559353,
      0.03639185428619385,
      -0.03777233138680458,
      0.04015825688838959,
      0.08438371866941452,
      -0.01850559003651142,
      0.024493519216775894,
      -0.052244633436203,
      -0.10211583226919174,
      0.014170028269290924,
      0.0021909005008637905,
      0.034168973565101624,
      -0.051090631633996964,
      0.08622090518474579,
      0.03143761307001114,
      -0.11423096060752869,
      -0.020939892157912254,
      0.033194489777088165,
      0.011999914422631264,
      -0.05716617405414581,
      -0.004950192291289568,
      -0.01163583155721426,
      -0.03962961956858635,
      0.001354377018287778,
      0.006266620941460133,
      0.02429364062845707,
      0.00854466762393713,
      0.014733266085386276,
      -0.0666452944278717,
      -0.032493218779563904,
      0.06734957545995712,
      0.023533392697572708,
      0.05134855955839157,
      -0.003577834228053689,
      -0.03126420080661774,
      -0.06603008508682251,
      -0.035624053329229355,
      -0.07374325394630432,
      -0.03009793534874916,
      -0.012219264172017574,
      0.005041234195232391,
      0.007545260712504387,
      -0.02038704790174961,
      -0.03260099142789841,
      0.006262101698666811,
      -0.029604732990264893,
      0.030473971739411354,
      0.05198764428496361,
      0.09651774913072586,
      0.0008058332023210824,
      -0.053506795316934586,
      0.004000697284936905,
      -0.025151880457997322,
      -0.05693526566028595,
      0.03845395892858505,
      -0.056844837963581085,
      0.015512696467339993,
      0.020924266427755356,
      0.05376558005809784,
      0.042138226330280304,
      -0.04860231652855873,
      0.037380609661340714,
      0.014047888107597828,
      0.013058222830295563,
      -0.038506124168634415,
      0.057623978704214096,
      -0.03957471251487732,
      0.03330903872847557,
      0.01230543851852417,
      0.019279073923826218,
      -0.07208389788866043,
      0.045608073472976685,
      0.042901258915662766,
      -0.03818579018115997,
      0.09563829004764557,
      -0.0678834542632103,
      0.005160055588930845,
      -0.07198847085237503,
      -0.028780139982700348,
      -0.06977790594100952,
      -0.0501052588224411,
      -0.01881137490272522,
      -0.014149351045489311,
      0.1372266560792923,
      -0.06648917496204376,
      -0.01791783794760704,
      0.016083721071481705,
      -0.028207864612340927,
      -0.00919806957244873,
      -0.030635518953204155,
      0.017393602058291435,
      -0.04652022942900658,
      0.04648207873106003,
      -0.11027862131595612,
      -0.028206588700413704,
      -6.409950123882794e-33,
      0.08075620979070663,
      -0.020016878843307495,
      -0.09129492938518524,
      0.058084823191165924,
      0.01286688819527626,
      -0.011785832233726978,
      -0.0010059579508379102,
      0.05628814175724983,
      0.019706405699253082,
      -0.08931099623441696,
      -0.006660666316747665,
      -0.007930291816592216,
      0.04132292792201042,
      0.03977984935045242,
      -0.07408248633146286,
      0.12154102325439453,
      -0.0011779960477724671,
      -0.16809166967868805,
      0.11941654235124588,
      -0.01473858579993248,
      0.06490061432123184,
      0.06419528275728226,
      -0.06428354233503342,
      0.041078437119722366,
      0.009543994441628456,
      -0.039823997765779495,
      0.05543458089232445,
      0.019670307636260986,
      0.019829750061035156,
      -0.05949351191520691,
      -0.06437191367149353,
      -0.06452669948339462,
      -0.028259560465812683,
      -0.002582009183242917,
      0.00007813863339833915,
      0.0286636333912611,
      -0.008517246693372726,
      0.059953585267066956,
      -0.05083492770791054,
      -0.018784459680318832,
      -0.009782686829566956,
      -0.013524840585887432,
      -0.03931797295808792,
      -0.02194642461836338,
      -0.065277099609375,
      0.029471853747963905,
      0.008912352845072746,
      0.022792214527726173,
      0.036257192492485046,
      0.005763598717749119,
      -0.04331866279244423,
      -0.09789829701185226,
      -0.0679820105433464,
      -0.04816052317619324,
      -0.07507766038179398,
      -0.049118731170892715,
      0.03475164622068405,
      -0.04511598125100136,
      -0.04818224534392357,
      0.02199184149503708,
      0.047843385487794876,
      0.005250104237347841,
      0.013281261548399925,
      -0.061734460294246674,
      0.08127783983945847,
      -0.0565459243953228,
      -0.1266290247440338,
      -0.00960828922688961,
      0.04588639363646507,
      -0.03207897022366524,
      0.07129103690385818,
      0.041410185396671295,
      0.08059031516313553,
      -0.0341012105345726,
      0.06588409841060638,
      -0.03781599923968315,
      0.047878023236989975,
      -0.03147193044424057,
      0.050261370837688446,
      0.005165275186300278,
      -0.09781944006681442,
      0.017369398847222328,
      -0.009027897380292416,
      0.024901989847421646,
      -0.02278270572423935,
      0.07615698128938675,
      -0.051941078156232834,
      0.07162655144929886,
      -0.00017272830882575363,
      0.044119734317064285,
      -0.06312330812215805,
      -0.0057161422446370125,
      0.002749960171058774,
      0.07498690485954285,
      0.02828461304306984,
      -6.020599130351911e-8,
      0.004898504354059696,
      -0.00002385890911682509,
      -0.037203386425971985,
      -0.09469816088676453,
      -0.024860529229044914,
      0.01361866481602192,
      0.08093121647834778,
      -0.007069042883813381,
      -0.07789614796638489,
      -0.015822218731045723,
      0.045504264533519745,
      0.07957416772842407,
      -0.026891479268670082,
      0.010528999380767345,
      0.03436973690986633,
      0.08504156768321991,
      -0.06783158332109451,
      0.06471328437328339,
      -0.10772696137428284,
      -0.07905738800764084,
      0.029831303283572197,
      0.03821761906147003,
      -0.009197024628520012,
      -0.0039093042723834515,
      0.10959958285093307,
      0.07635064423084259,
      0.038043636828660965,
      0.019095348194241524,
      0.048701442778110504,
      -0.03260671719908714,
      0.0011039559030905366,
      0.015879731625318527,
      -0.004838121589273214,
      -0.02092096582055092,
      0.028951840475201607,
      0.05697574093937874,
      -0.007619861979037523,
      0.01015502866357565,
      -0.028622470796108246,
      0.05533625930547714,
      0.021772682666778564,
      -0.10094000399112701,
      -0.03829001262784004,
      0.009747497737407684,
      0.019269149750471115,
      0.04167042672634125,
      -0.032244037836790085,
      -0.021131694316864014,
      0.04101688042283058,
      -0.01501709595322609,
      0.009047508239746094,
      -0.05399034917354584,
      -0.056939300149679184,
      0.07447241246700287,
      0.014619339257478714,
      0.020027408376336098,
      0.07567141950130463,
      -0.045973096042871475,
      0.07233335822820663,
      -0.03714201971888542,
      0.09116007387638092,
      0.03698258474469185,
      0.11055395752191544,
      0.05177661031484604
    ],
    "content": "---\ntitle: The Container/Presentational Pattern with React and Vue\ndescription: This blog post dives into the Container/Presentational Pattern, demonstrating how to create cleaner, more modular, and reusable code with React Hooks and Vue 3 Composables. Explore how to modernise this classic frontend pattern by transitioning from traditional implementations to scalable, maintainable solutions. Perfect for developers looking to streamline logic, enhance maintainability, and build better React and Vue applications.\nimage: https://res.cloudinary.com/suv4o/image/upload/q_auto,f_auto,w_1200,e_sharpen:100/v1736332534/blog/the-container-presentational-pattern-with-react-and-vue/the-container-presentational-pattern-with-react-and-vue_tx5c9t\nkeywords:\n    - React.js\n    - Vue.js\n    - Vue 3\n    - Web Development\n    - Development\n    - Container/Presentational Pattern\n    - React Hooks\n    - Vue 3 Composables\n    - frontend development patterns\n    - modern frontend design\n    - reusable components\n    - state management\n    - React custom hooks\n    - Vue composable functions\n    - separating UI and logic\n    - modular components\n    - clean code in React\n    - clean code in Vue\n    - frontend architecture\n    - React patterns\n    - Vue 3 patterns\n    - scalable frontend design\n    - reusable frontend logic\ntype: page\nblog: post\npublished: 9th January 2025\nreadTime: 6\nauthor: Aleksandar Trpkovski\narticleTags:\n    - React.js\n    - Vue.js\n    - JavaScript\n---\n\n# The Container/Presentational Pattern with React and Vue\n\n_{{$document.published}} • {{$document.readTime}} min read — by **[{{$document.author}}](/)**_\n\n::tag-pills{:tags=\"articleTags\"}\n::\n\n![Landing Image](https://res.cloudinary.com/suv4o/image/upload/q_auto,f_auto,w_750,e_sharpen:100/v1736332534/blog/the-container-presentational-pattern-with-react-and-vue/the-container-presentational-pattern-with-react-and-vue_tx5c9t)\n\nThe **Container/Presentational Pattern** is a fundamental concept in frontend development. By separating logic and UI, it creates clean, reusable, and testable components. Traditionally, this pattern was implemented using \"container components\" to manage state and \"presentational components\" to handle UI rendering. However, modern tools like **React Hooks** and **Vue Composables** provide an alternative, more modular way to achieve the same goals, without relying on explicit container components.\n\nIn this blog post, we’ll:\n\n1. Explore the traditional implementation of the Container/Presentational Pattern in **React** and **Vue**.\n2. Enhance the pattern using **Hooks** and **Composables** for a cleaner, reusable design approach.\n\n## **Introduction to the Container/Presentational Pattern**\n\nThe Container/Presentational Pattern divides components into two types:\n\n1. **Presentational Components**:\n    - Focus on rendering the UI.\n    - Receive data via props.\n    - Are stateless and reusable across different contexts.\n2. **Container Components**:\n    - Manage state, handle logic, and perform data fetching.\n    - Pass data to presentational components.\n\nThis separation of concerns promotes maintainability and reusability. However, in modern frameworks like React and Vue, container components can be replaced by **Hooks** and **Composable functions**, encapsulating logic in reusable, framework-specific utilities.\n\n## **React Implementation with Traditional Container Components**\n\n### Presentational Component - `Card.jsx`\n\nThe `Card` component in React is focused purely on displaying user information:\n\n```jsx\nfunction Card({ data }) {\n    return (\n        <div className=\"card\">\n            <h2>{data.name}</h2>\n            <p>Age: {data.age}</p>\n        </div>\n    );\n}\n\nexport default Card;\n```\n\n### Presentational Component - `Details.jsx`\n\nSimilarly, the `Details` component handles additional user details:\n\n```jsx\nfunction Card({ data }) {\n    return (\n        <div className=\"card\">\n            <p>Email: {data.email}</p>\n            <p>Address: {data.address}</p>\n            <p>City: {data.city}</p>\n            <p>State: {data.state}</p>\n            <p>Zip: {data.zip}</p>\n            <p>Phone: {data.phone}</p>\n            <p>Occupation: {data.occupation}</p>\n            <p>Company: {data.company}</p>\n            <p>Hobbies: {data.hobbies?.join(\", \")}</p>\n            <p>Website: {data.website}</p>\n        </div>\n    );\n}\n\nexport default Card;\n```\n\n### Container Component - `DataContainer.jsx`\n\nThe `DataContainer` component manages data fetching and distributes the fetched data to child components.\n\n```jsx\nimport { useState, useEffect, Children, cloneElement } from \"react\";\n\nfunction DataContainer({ children }) {\n    const [data, setData] = useState(null);\n\n    useEffect(() => {\n        // Simulating data fetching\n        setTimeout(() => {\n            setData({\n                name: \"John Doe\",\n                age: 30,\n                email: \"john.doe@example.com\",\n                address: \"123 Main St\",\n                city: \"Anytown\",\n                state: \"CA\",\n                zip: \"12345\",\n                phone: \"555-1234\",\n                occupation: \"Software Developer\",\n                company: \"Tech Corp\",\n                hobbies: [\"reading\", \"gaming\", \"hiking\"],\n                website: \"https://johndoe.com\",\n            });\n        }, 1000);\n    }, []);\n\n    return <>{children && Children.map(children, (child) => cloneElement(child, { data }))}</>;\n}\n\nexport default DataContainer;\n```\n\n### Using the Components Together\n\n```jsx\nimport Card from \"./components/Card\";\nimport Details from \"./components/Details\";\nimport DataContainer from \"./components/DataContainer\";\n\nfunction App() {\n    return (\n        <>\n            <DataContainer>\n                <Card />\n                <Details />\n            </DataContainer>\n        </>\n    );\n}\n\nexport default App;\n```\n\n## Vue 3 Implementation with Traditional Container Components\n\n### Presentational Component - `Card.vue`\n\nThe `Card` component in Vue focuses on rendering basic user information:\n\n```html\n<script setup>\n    import { defineProps } from \"vue\";\n\n    defineProps({\n        data: Object,\n    });\n</script>\n\n<template>\n    <div class=\"card\">\n        <h2>{{ data.name }}</h2>\n        <p>Age: {{ data.age }}</p>\n    </div>\n</template>\n```\n\n### Presentational Component - `Details.vue`\n\nThe `Details` component renders additional user details:\n\n```html\n<script setup>\n    import { defineProps } from \"vue\";\n\n    defineProps({\n        data: Object,\n    });\n</script>\n\n<template>\n    <div class=\"card\">\n        <p>Email: {{ data.email }}</p>\n        <p>Address: {{ data.address }}</p>\n        <p>City: {{ data.city }}</p>\n        <p>State: {{ data.state }}</p>\n        <p>Zip: {{ data.zip }}</p>\n        <p>Phone: {{ data.phone }}</p>\n        <p>Occupation: {{ data.occupation }}</p>\n        <p>Company: {{ data.company }}</p>\n        <p>Hobbies: {{ data.hobbies?.join(\", \") }}</p>\n        <p>Website: {{ data.website }}</p>\n    </div>\n</template>\n```\n\n### Container Component - `DataContainer.vue`\n\nThe `DataContainer` encapsulates data fetching and passes it to its slot:\n\n```html\n<script setup>\n    import { ref, onMounted } from \"vue\";\n\n    const data = ref(null);\n\n    onMounted(() => {\n        // Simulating data fetching\n        setTimeout(() => {\n            data.value = {\n                name: \"John Doe\",\n                age: 30,\n                email: \"john.doe@example.com\",\n                address: \"123 Main St\",\n                city: \"Anytown\",\n                state: \"CA\",\n                zip: \"12345\",\n                phone: \"555-1234\",\n                occupation: \"Software Developer\",\n                company: \"Tech Corp\",\n                hobbies: [\"reading\", \"gaming\", \"hiking\"],\n                website: \"https://johndoe.com\",\n            };\n        }, 1000);\n    });\n</script>\n\n<template>\n    <slot :data=\"data\"></slot>\n</template>\n```\n\n### Using the Components Together\n\n```html\n<script setup>\n    import DataContainer from \"./components/DataContainer.vue\";\n    import Card from \"./components/Card.vue\";\n    import Details from \"./components/Details.vue\";\n</script>\n\n<template>\n    <DataContainer v-slot=\"{ data }\">\n        <Card :data=\"data\" />\n        <details :data=\"data\" />\n    </DataContainer>\n</template>\n```\n\n## Enhancing the Pattern with Modern Approaches\n\n### Using React Hooks\n\nEncapsulate logic with a custom hook:\n\n```js\nimport { useState, useEffect } from \"react\";\n\nfunction useData() {\n    const [data, setData] = useState(null);\n\n    useEffect(() => {\n        setTimeout(() => {\n            setData({\n                name: \"John Doe\",\n                age: 30,\n                email: \"john.doe@example.com\",\n                address: \"123 Main St\",\n                city: \"Anytown\",\n                state: \"CA\",\n                zip: \"12345\",\n                phone: \"555-1234\",\n                occupation: \"Software Developer\",\n                company: \"Tech Corp\",\n                hobbies: [\"reading\", \"gaming\", \"hiking\"],\n                website: \"https://johndoe.com\",\n            });\n        }, 1000);\n    }, []);\n\n    return { data };\n}\n\nexport default useData;\n```\n\n### Using the React Custom Hook in a Component\n\n```html\nimport Card from \"./components/Card\";\nimport Details from \"./components/Details\";\nimport useData from \"./components/useData\";\n\nfunction App() {\n    const { data } = useData();\n\n    return (\n        <>\n            <Card data={data} />\n            <Details data={data} />\n        </>\n    );\n}\n\nexport default App;\n```\n\n### Using Vue 3 Composables\n\nSimilarly, encapsulate logic with a composable function:\n\n```js\nimport { ref, onMounted } from \"vue\";\nconst data = ref(null);\n\nexport default function useData() {\n    onMounted(() => {\n        setTimeout(() => {\n            data.value = {\n                name: \"John Doe\",\n                age: 30,\n                email: \"john.doe@example.com\",\n                address: \"123 Main St\",\n                city: \"Anytown\",\n                state: \"CA\",\n                zip: \"12345\",\n                phone: \"555-1234\",\n                occupation: \"Software Developer\",\n                company: \"Tech Corp\",\n                hobbies: [\"reading\", \"gaming\", \"hiking\"],\n                website: \"https://johndoe.com\",\n            };\n        }, 1000);\n    });\n\n    return { data };\n}\n```\n\n### Using the Vue Composable in a Component\n\n```html\n<script setup>\n    import Card from \"./components/Card.vue\";\n    import Details from \"./components/Details.vue\";\n    import useData from \"./components/useData\";\n\n    const { data } = useData();\n</script>\n\n<template>\n    <Card :data=\"data\" />\n    <details :data=\"data\" />\n</template>\n```\n\n## **Conclusion**\n\nThe **Container/Presentational Pattern** remains a powerful approach for separating UI and logic in modern frontend development. While traditional container components are effective, **React Hooks** and **Vue 3 Composables** provide an even more elegant solution through modular, reusable functions. By moving logic into dedicated functions like `useData`, we gain several advantages:\n\n- Better reusability across components\n- Cleaner code with less boilerplate\n- Improved testing and scalability\n\nFor modern frontend projects, embracing **React** **Hooks** or **Vue** **3 Composables** can significantly enhance your development workflow and align with contemporary component design principles.\n\nThe code for this is available in the following GitHub repository <a href=\"https://github.com/Suv4o/the-container-presentational-pattern-with-react-and-vue\" target=\"_blank\" rel=\"noopener noreferrer\">here</a>.\n"
  },
  {
    "articlePath": "/2025/01/15/a-beginners-guide-to-vue-for-react-developers",
    "embeddings": [
      -0.05875593051314354,
      -0.02435006946325302,
      0.08031665533781052,
      0.03839196637272835,
      0.04813921079039574,
      0.07393833249807358,
      -0.06211613491177559,
      0.07351472973823547,
      -0.032679393887519836,
      0.04715873673558235,
      -0.049194563180208206,
      0.0022198064252734184,
      -0.08273644000291824,
      0.050537217408418655,
      0.07540640980005264,
      0.053224049508571625,
      0.009863408282399178,
      -0.014197614043951035,
      -0.021698102355003357,
      0.014316020533442497,
      0.08417611569166183,
      -0.045149125158786774,
      0.009230230934917927,
      -0.012438299134373665,
      -0.028385845944285393,
      0.12212566286325455,
      -0.02582792192697525,
      0.037853531539440155,
      -0.052258968353271484,
      -0.04662434756755829,
      -0.062359705567359924,
      0.06305868923664093,
      -0.042063042521476746,
      0.03270385041832924,
      -0.1391863077878952,
      -0.010554567910730839,
      -0.010766664519906044,
      -0.02150079794228077,
      -0.04713822156190872,
      0.009409032762050629,
      -0.03383861482143402,
      0.004982608836144209,
      -0.06768747419118881,
      -0.0672338530421257,
      0.09400399029254913,
      0.010147730819880962,
      0.014897638000547886,
      -0.07876370847225189,
      -0.015316196717321873,
      -0.05946522578597069,
      -0.03302035108208656,
      -0.08834877610206604,
      -0.005818189587444067,
      0.043960362672805786,
      -0.016125380992889404,
      0.036018162965774536,
      0.03731488063931465,
      0.04038470983505249,
      0.06407608091831207,
      -0.04403639957308769,
      0.016860395669937134,
      -0.01951008290052414,
      0.01352895051240921,
      0.030672375112771988,
      -0.0015293858014047146,
      0.010263173840939999,
      0.014818658120930195,
      0.026232251897454262,
      0.07456125319004059,
      -0.05584588646888733,
      -0.09795715659856796,
      0.03921668976545334,
      0.022248130291700363,
      0.026628099381923676,
      -0.030728500336408615,
      -0.04690324515104294,
      0.03783842548727989,
      0.03254462406039238,
      0.03489645570516586,
      -0.08187947422266006,
      -0.03911428898572922,
      0.006352602504193783,
      -0.05562959983944893,
      0.033881958574056625,
      -0.03456195071339607,
      0.08863231539726257,
      0.013706592842936516,
      -0.029894938692450523,
      0.05083001032471657,
      -0.0038143254350870848,
      -0.037767600268125534,
      -0.056371498852968216,
      0.07466913014650345,
      0.030775638297200203,
      0.017621172592043877,
      0.05709240213036537,
      -0.026091422885656357,
      0.005412149243056774,
      -0.005828018765896559,
      -0.05108888819813728,
      0.020259136334061623,
      0.006074820179492235,
      0.010127796791493893,
      0.03163859248161316,
      0.060327790677547455,
      0.04053055867552757,
      -0.004216581117361784,
      -0.007927409373223782,
      -0.0240229070186615,
      0.001418591127730906,
      -0.008211769163608551,
      0.019449429586529732,
      0.03904392942786217,
      -0.12799616158008575,
      -0.005068480037152767,
      0.02223767340183258,
      -0.029180070385336876,
      0.03992137312889099,
      0.12182829529047012,
      0.09112761914730072,
      0.052634820342063904,
      0.010174151510000229,
      0.025274138897657394,
      0.003940048161894083,
      -0.006222717929631472,
      -0.06443490833044052,
      -0.04907267540693283,
      3.324298758809398e-33,
      -0.019410019740462303,
      0.0628090500831604,
      -0.030087213963270187,
      0.08483752608299255,
      0.03716693073511124,
      -0.03431745618581772,
      0.03577769547700882,
      0.019685866311192513,
      -0.09226930141448975,
      0.012999988161027431,
      0.05178678780794144,
      0.10567519068717957,
      -0.04538044333457947,
      0.1030908077955246,
      0.06677030026912689,
      -0.08414845913648605,
      0.01756531372666359,
      -0.04754335433244705,
      -0.05131778493523598,
      -0.03297777846455574,
      0.023806635290384293,
      -0.009213867597281933,
      0.024453934282064438,
      0.05210009217262268,
      0.052991386502981186,
      -0.06052933633327484,
      0.026870157569646835,
      0.0969952642917633,
      -0.1118825376033783,
      -0.07740780711174011,
      -0.009219549596309662,
      0.024199549108743668,
      0.0034208339639008045,
      -0.008139231242239475,
      -0.019465021789073944,
      -0.033351872116327286,
      -0.015694761648774147,
      -0.06773748993873596,
      -0.06631728261709213,
      -0.02651650458574295,
      -0.038039326667785645,
      0.04571247845888138,
      -0.10096964240074158,
      0.008710891008377075,
      0.06031959876418114,
      0.005984566640108824,
      0.04761470481753349,
      0.022036125883460045,
      0.11410203576087952,
      0.04417681321501732,
      -0.07152031362056732,
      -0.0011555553646758199,
      -0.0023760858457535505,
      -0.007280275225639343,
      0.014136635698378086,
      0.049237869679927826,
      0.05990453436970711,
      0.020494697615504265,
      -0.004244120325893164,
      -0.003005709731951356,
      -0.035247791558504105,
      0.010050780139863491,
      -0.0011521331034600735,
      -0.028496896848082542,
      -0.06954009085893631,
      0.11077959835529327,
      -0.04084817320108414,
      -0.020614415407180786,
      0.001503610284999013,
      0.029074452817440033,
      -0.02800706960260868,
      0.032355595380067825,
      0.07035929709672928,
      -0.03576599434018135,
      0.08600834757089615,
      -0.07939211279153824,
      -0.06278196722269058,
      -0.11066580563783646,
      0.006641097366809845,
      -0.06452742964029312,
      -0.09813473373651505,
      0.054100241512060165,
      -0.020483776926994324,
      0.07650096714496613,
      -0.015213994309306145,
      -0.0476558618247509,
      0.017146818339824677,
      0.0014200478326529264,
      0.04689031466841698,
      -0.012889337725937366,
      0.007633740548044443,
      -0.015246249735355377,
      0.03692696616053581,
      -0.01860586553812027,
      -0.02112351544201374,
      -4.206581104840436e-33,
      0.011918570846319199,
      0.0277674850076437,
      -0.026515822857618332,
      0.09193383902311325,
      -0.0380694679915905,
      0.0242147296667099,
      -0.03696674108505249,
      0.00486617861315608,
      0.03185350447893143,
      -0.17802676558494568,
      -0.034992918372154236,
      0.07006210088729858,
      0.07486952096223831,
      0.034189555794000626,
      -0.08870770782232285,
      0.06287597119808197,
      -0.023449404165148735,
      -0.12162525206804276,
      0.07314018160104752,
      -0.016132833436131477,
      -0.011417887173593044,
      0.038969736546278,
      -0.059503085911273956,
      -0.0196458101272583,
      -0.007499163970351219,
      -0.012953139841556549,
      0.04258240759372711,
      0.01101287268102169,
      0.00028988654958084226,
      0.01804550178349018,
      0.01830446720123291,
      -0.0023500381503254175,
      -0.027700351551175117,
      -0.02392934449017048,
      0.008141233585774899,
      0.02411639876663685,
      0.023121695965528488,
      -0.08252963423728943,
      -0.0247483067214489,
      0.03122864104807377,
      0.03507745638489723,
      -0.03880959004163742,
      0.06804899126291275,
      -0.04883870109915733,
      -0.07651201635599136,
      0.042320821434259415,
      -0.03722551092505455,
      0.04472765326499939,
      -0.0031769967172294855,
      -0.019124584272503853,
      0.04937148094177246,
      -0.022329729050397873,
      -0.07210645079612732,
      0.0006449002539739013,
      -0.04087918996810913,
      -0.06603705883026123,
      0.013173110783100128,
      0.00008171200170181692,
      0.023030508309602737,
      -0.014517840929329395,
      0.004195965360850096,
      0.005526178050786257,
      -0.012204084545373917,
      0.05024600401520729,
      -0.05704815313220024,
      -0.04292430356144905,
      -0.16100864112377167,
      0.006760556250810623,
      0.06429000943899155,
      -0.07529718428850174,
      -0.04523509368300438,
      0.003731561591848731,
      0.013753645122051239,
      -0.05320184305310249,
      0.011445248499512672,
      -0.08399476855993271,
      0.0597057044506073,
      -0.02956058271229267,
      0.0066987257450819016,
      -0.008682685904204845,
      -0.043303944170475006,
      0.03992806747555733,
      -0.02007821761071682,
      0.027758946642279625,
      -0.0832652598619461,
      0.1413821280002594,
      -0.1095016673207283,
      -0.02411085180938244,
      0.01063530333340168,
      0.0378727987408638,
      -0.027035173028707504,
      -0.006078299134969711,
      -0.023599345237016678,
      0.05154319852590561,
      -0.05422210693359375,
      -5.681088310893756e-8,
      0.0540730245411396,
      0.011671001091599464,
      0.03127828240394592,
      -0.02571229636669159,
      0.04518386721611023,
      0.01913360320031643,
      0.06796170771121979,
      0.019774485379457474,
      -0.027627388015389442,
      0.10714985430240631,
      0.04890031740069389,
      0.10154304653406143,
      -0.04559632018208504,
      0.05169285833835602,
      0.045649584382772446,
      0.10844764113426208,
      -0.04839831218123436,
      0.04466338828206062,
      -0.05771699547767639,
      0.04432215541601181,
      0.02418164536356926,
      0.03677939996123314,
      -0.08742397278547287,
      -0.012237278744578362,
      0.12488893419504166,
      -0.02155689150094986,
      0.01730637066066265,
      0.014520993456244469,
      -0.0027464604936540127,
      -0.0009622903889976442,
      -0.018855668604373932,
      0.0004260252171661705,
      0.020595844835042953,
      -0.10012782365083694,
      0.07628187537193298,
      0.06591655313968658,
      0.02135516330599785,
      -0.00007264412852237001,
      0.02995815873146057,
      0.1006079912185669,
      0.01820831187069416,
      -0.01901552453637123,
      -0.010927149094641209,
      0.005424889735877514,
      -0.03796224668622017,
      -0.0003827925829682499,
      -0.05074840039014816,
      -0.03146391361951828,
      0.013639422133564949,
      -0.05330567806959152,
      -0.027822688221931458,
      -0.060185275971889496,
      -0.0765729546546936,
      0.01877889782190323,
      -0.015780888497829437,
      0.06398866325616837,
      -0.003212524577975273,
      -0.017842072993516922,
      0.08804480731487274,
      -0.07035735249519348,
      0.08250056207180023,
      0.003916212357580662,
      0.08479586243629456,
      -0.00827860739082098
    ],
    "content": "---\ntitle: A Beginner's Guide to Vue for React Developers\ndescription: A comprehensive guide for React developers transitioning to Vue. Learn the differences in components, styling, state management, lifecycle hooks, and more. Master Vue concepts quickly with React comparisons. We will dive into Vue's unique features, like the ref and reactive functions, v-if directives, and computed properties, make it a powerful alternative to React. Whether you're a React developer exploring Vue or simply curious about its differences, this guide provides practical examples and insights to get you started.\nimage: https://res.cloudinary.com/suv4o/image/upload/q_auto,f_auto,w_1200,e_sharpen:100/v1736935516/blog/a-beginners-guide-to-vue-for-react-developers/A_scenic_landscape_featuring_a_slightly_curved_road_that_extends_infinitely_into_the_horizon._The_road_starts_with_a_vibrant_blue_hue_and_gradually_tr\nkeywords:\n    - React.js\n    - Vue.js\n    - Reactivity in Vue.js\n    - Reactivity in React.js\n    - Reactivity\n    - Vue 3\n    - v-model\n    - Web Development\n    - Development\n    - JavaScript reactivity\n    - Reactive programming\n    - Vue.js reactivity\n    - Two-way data binding\n    - Vue for React developers\n    - React to Vue transition\n    - Vue beginner guide\n    - React vs Vue comparison\n    - Vue vs React components\n    - Vue state management\n    - Vue lifecycle hooks\n    - Vue reactivity\n    - Vue templates\n    - Vue scoped styles\n    - Vue conditional rendering\n    - Vue computed properties\n    - React vs Vue props\n    - Vue slots\n    - React CSS Modules\n    - Vue styled-components alternative\n    - Vue frontend framework\n    - Vue directive examples\n    - Vue reactive variables\n    - Vue ref vs React useState\n    - Vue hooks\n    - transitioning from React to Vue\ntype: page\nblog: post\npublished: 15th January 2025\nreadTime: 12\nauthor: Aleksandar Trpkovski\narticleTags:\n    - JavaScript\n    - Vue.js\n    - React.js\n---\n\n# A Beginner's Guide to Vue for React Developers\n\n_{{$document.published}} • {{$document.readTime}} min read — by **[{{$document.author}}](/)**_\n\n::tag-pills{:tags=\"articleTags\"}\n::\n\n![Landing Image](https://res.cloudinary.com/suv4o/image/upload/q_auto,f_auto,w_750,e_sharpen:100/v1736935516/blog/a-beginners-guide-to-vue-for-react-developers/A_scenic_landscape_featuring_a_slightly_curved_road_that_extends_infinitely_into_the_horizon._The_road_starts_with_a_vibrant_blue_hue_and_gradually_tr)\n\nVue is a frontend framework that shares many concepts with React while taking its own unique approach. This guide will walk you through Vue's key concepts and compare them to their React equivalents. By the end, you'll have a solid foundation for working with Vue.\n\n## Setting Up a Component\n\n### React\n\nIn React, a functional component is created like this:\n\n```jsx\nfunction ExampleComponent() {\n    return <h1>Hello, React!</h1>;\n}\n\nexport default ExampleComponent;\n```\n\n### Vue\n\nIn Vue, components are defined with a template and a script:\n\n```html\n<script setup></script>\n\n<template>\n    <h1>Hello, Vue!</h1>\n</template>\n```\n\n**Key Differences:**\n\n- Vue components are defined in files with the `.vue` extension.\n- Vue separates logic (`script`) and markup (`template`).\n- Vue doesn't require JSX, instead, you write HTML-like syntax directly in the `template` section of your `.vue` file.\n\n## Styling Components\n\nNow that we've set up our components, let’s explore how to style them. Styling components in React and Vue can be done in multiple ways, including:\n\n### **Inline Styles**\n\nBoth React and Vue support inline styles, though their syntax differs slightly.\n\n### **React**\n\n```jsx\nfunction ExampleComponent() {\n    const inlineStyle = { color: \"blue\", fontSize: \"20px\" };\n\n    return <h1 style={inlineStyle}>Hello, React!</h1>;\n}\n\nexport default ExampleComponent;\n```\n\n### **Vue**\n\n```html\n<script setup>\n    const inlineStyle = { color: \"blue\", fontSize: \"20px\" };\n</script>\n\n<template>\n    <h1 :style=\"inlineStyle\">Hello, Vue!</h1>\n</template>\n```\n\nIn Vue, `:style` is a directive used for binding styles.\n\n### External Styles\n\nExternal styles involve creating a separate CSS file and importing it.\n\n### **React**\n\nYou can create a `ExampleComponent.css` file and import it into your component:\n\n```jsx\nimport \"./ExampleComponent.css\";\n\nfunction ExampleComponent() {\n    return <h1 className=\"header\">Hello, React!</h1>;\n}\n\nexport default ExampleComponent;\n```\n\n**ExampleComponent.css:**\n\n```css\n.header {\n    color: blue;\n    font-size: 20px;\n}\n```\n\n### Vue\n\nIn Vue, styles can be added directly to the `.vue` file in a `<style>` block:\n\n```html\n<script setup></script>\n\n<template>\n    <h1 class=\"header\">Hello, Vue!</h1>\n</template>\n\n<style>\n    .header {\n        color: blue;\n        font-size: 20px;\n    }\n</style>\n```\n\n**Key Differences:**\n\n- Vue uses `class` attribute for CSS classes, while React uses `className` (since `class` is a reserved word in JavaScript).\n\n### Scoped Styles (Vue-Specific)\n\nVue provides a scoped styling feature to limit styles to the component they belong to.\n\n```html\n<script setup></script>\n\n<template>\n    <h1 class=\"header\">Hello, Vue!</h1>\n</template>\n\n<style scoped>\n    .header {\n        color: blue;\n        font-size: 20px;\n    }\n</style>\n```\n\n**What are scoped styles in Vue?**\n\n- Adding the `scoped` attribute to a `style` tag in Vue automatically assigns unique attributes to the component's HTML elements, ensuring styles only apply within that component.\n- This prevents style conflicts across components while maintaining all styling code in a single file.\n\n### **React's Approach to** Scoped Styles\n\nWhile React doesn't include built-in scoped styles, you can achieve similar functionality natively with CSS Modules or by using the styled-components library to isolate styles to specific components.\n\n**React CSS Modules:**\n\nReact supports **CSS Modules**, which are a way to scope CSS to a specific component. With CSS Modules, the class names are automatically locally scoped by appending unique names. Here’s an example:\n\n**Card.module.css**\n\n```css\n.header {\n    color: blue;\n    font-size: 20px;\n}\n```\n\n**Card.jsx**\n\n```jsx\nimport styles from \"./Card.module.css\";\n\nconst Card = () => <div className={styles.header}>Hello, React!</div>;\n\nexport default Card;\n```\n\n**Styled-Components (CSS-in-JS)**\n\nFor a more dynamic and scoped styling experience, you can use libraries like **Styled-Components**. It allows you to define component-scoped styles directly within your JavaScript files:\n\n```jsx\nimport styled from \"styled-components\";\n\nconst Header = styled.h1`\n    color: blue;\n    font-size: 20px;\n`;\n\nconst Card = () => <Header>Hello, React!</Header>;\n\nexport default Card;\n```\n\n## State Management with Reactivity\n\n### React\n\nReact uses `useState` for state management:\n\n```jsx\nimport { useState } from \"react\";\n\nfunction ExampleComponent() {\n    const [count, setCount] = useState(0);\n\n    return (\n        <div>\n            <p>Count: {count}</p>\n            <button onClick={() => setCount(count + 1)}>Increment</button>\n        </div>\n    );\n}\n\nexport default ExampleComponent;\n```\n\nFor more complex state logic, React uses the `useReducer` hook. It is ideal when state updates involve multiple sub-values or actions.\n\n```jsx\nimport { useReducer } from \"react\";\n\nfunction reducer(state, action) {\n    switch (action.type) {\n        case \"increment\":\n            return { count: state.count + 1 };\n        case \"decrement\":\n            return { count: state.count - 1 };\n        default:\n            throw new Error();\n    }\n}\n\nfunction Counter() {\n    const [state, dispatch] = useReducer(reducer, { count: 0 });\n\n    return (\n        <div>\n            <p>Current count: {state.count}</p>\n            <button onClick={() => dispatch({ type: \"increment\" })}>Increment</button>\n            <button onClick={() => dispatch({ type: \"decrement\" })}>Decrement</button>\n        </div>\n    );\n}\n\nexport default Counter;\n```\n\nTo derive state based on other variables, React uses memoisation with `useMemo`. This hook optimises performance by storing computed values and preventing unnecessary recalculations when dependencies haven't changed.\n\n```jsx\nimport { useState, useMemo } from \"react\";\n\nfunction DoubleCounter() {\n    const [count, setCount] = useState(0);\n\n    // Derived state\n    const doubleCount = useMemo(() => count * 2, [count]);\n\n    return (\n        <div>\n            <p>Count: {count}</p>\n            <p>Double Count: {doubleCount}</p>\n            <button onClick={() => setCount(count + 1)}>Increment</button>\n        </div>\n    );\n}\n\nexport default DoubleCounter;\n```\n\n### Vue\n\nIn Vue, you use `ref` to manage state reactively:\n\n```html\n<script setup>\n    import { ref } from \"vue\";\n\n    const count = ref(0);\n</script>\n\n<template>\n    <div>\n        <p>Count: {{ count }}</p>\n        <button @click=\"count++\">Increment</button>\n    </div>\n</template>\n```\n\nAlternatively you can use `reactive` function to creates a reactive object, which is useful for managing more complex state (e.g., multiple related properties).\n\n```html\n<script setup>\n    import { reactive } from \"vue\";\n\n    const state = reactive({\n        count: 0,\n        message: \"Hello, Vue 3!\",\n    });\n\n    const increment = () => {\n        state.count++;\n    };\n\n    const updateMessage = () => {\n        state.message = \"You updated the message!\";\n    };\n</script>\n\n<template>\n    <div>\n        <p>Count: {{ state.count }}</p>\n        <p>Message: {{ state.message }}</p>\n        <button @click=\"increment\">Increment</button>\n        <button @click=\"updateMessage\">Change Message</button>\n    </div>\n</template>\n```\n\nIn Vue you can derive state with `computed` function, which automatically updates when its dependencies change.\n\n```html\n<script setup>\n    import { ref, computed } from \"vue\";\n\n    const count = ref(0);\n\n    const doubleCount = computed(() => count.value * 2);\n\n    const increment = () => {\n        count.value++;\n    };\n</script>\n\n<template>\n    <div>\n        <p>Count: {{ count }}</p>\n        <p>Double Count: {{ doubleCount }}</p>\n        <button @click=\"increment\">Increment</button>\n    </div>\n</template>\n```\n\n**Key Differences:**\n\n- Vue uses `ref` for creating reactive variables.\n- For objects with multiple properties, Vue's `reactive` function is more appropriate.\n- Use `computed` properties to create derived or computed state.\n- When working in the `script` section, always access `ref` values with `.value`.\n- Vue uses double curly braces `{{ }}` for data binding in templates. Unlike in the `script` section, you don't need to manually unwrap reactive values in templates.\n- Vue uses a Proxy-based reactivity system that offers several advantages over React. Vue uses Proxies to observe changes in reactive objects and automatically track dependencies, allowing it to detect mutations directly. React, in contrast, relies on explicit updates (via `setState` or similar) and immutable data structures to trigger reactivity, avoiding deep observation of objects.\n\n## Two-Way Binding with `v-model`\n\nIn Vue, `v-model` simplifies two-way data binding between form inputs and reactive variables. This feature is intuitive and eliminates the need for explicit event listeners and state updates, as commonly done in React.\n\n### React\n\nReact does not have built-in two-way binding. Instead, developers manually link the state to the input’s value and use event handlers to update the state:\n\n```jsx\nimport { useState } from \"react\";\n\nfunction TwoWayBindingExample() {\n    const [inputValue, setInputValue] = useState(\"\");\n\n    const handleChange = (event) => {\n        setInputValue(event.target.value);\n    };\n\n    return (\n        <div>\n            <input value={inputValue} onChange={handleChange} placeholder=\"Type something...\" />\n            <p>You typed: {inputValue}</p>\n        </div>\n    );\n}\n\nexport default TwoWayBindingExample;\n```\n\nIn Vue, using `v-model` is straightforward. It automatically binds the input’s value to a reactive variable and updates the variable whenever the input changes.\n\n### Vue\n\n```html\n<script setup>\n    import { ref } from \"vue\";\n\n    const inputValue = ref(\"\");\n</script>\n\n<template>\n    <div>\n        <input v-model=\"inputValue\" placeholder=\"Type something...\" />\n        <p>You typed: {{ inputValue }}</p>\n    </div>\n</template>\n```\n\n**Key Differences**\n\n- Vue offers cleaner syntax with `v-model`, while React needs manual event handling\n\n## Lifecycle Hooks\n\n### React\n\nReact’s lifecycle hooks like `useEffect` handle mount and unmount logic:\n\n```jsx\nimport { useEffect } from \"react\";\n\nfunction ExampleComponent() {\n    useEffect(() => {\n        console.log(\"Component mounted\");\n\n        return () => {\n            console.log(\"Component unmounted\");\n        };\n    }, []);\n\n    return <div>Lifecycle example</div>;\n}\n\nexport default ExampleComponent;\n```\n\n### Vue\n\nVue provides lifecycle hooks like `onMounted` and `onUnmounted`:\n\n```html\n<script setup>\n    import { onMounted, onUnmounted } from \"vue\";\n\n    onMounted(() => {\n        console.log(\"Component mounted\");\n    });\n\n    onUnmounted(() => {\n        console.log(\"Component unmounted\");\n    });\n</script>\n\n<template>\n    <div>Lifecycle example</div>\n</template>\n```\n\n**Key Differences:**\n\n- Vue uses separate lifecycle hooks such as `onMounted` and `onUnmounted` to handle lifecycle events.\n\n## Watching and Tracking Changes\n\n### React\n\nReact doesn’t have watchers; you use `useEffect`:\n\n```jsx\nimport { useState, useEffect } from \"react\";\n\nfunction ExampleComponent() {\n    const [count, setCount] = useState(0);\n\n    useEffect(() => {\n        console.log(\"Count changed:\", count);\n    }, [count]);\n\n    return <button onClick={() => setCount(count + 1)}>Increment</button>;\n}\n```\n\n### Vue\n\nVue provides a `watch` function to observe changes:\n\n```html\n<script setup>\n    import { ref, watch } from \"vue\";\n\n    const count = ref(0);\n\n    watch(count, (newValue) => {\n        console.log(\"Count changed:\", newValue);\n    });\n</script>\n\n<template>\n    <button @click=\"count++\">Increment</button>\n</template>\n```\n\n**Key Differences:**\n\n- Vue’s `watch` directly observes reactive variables.\n\n## Conditional Rendering\n\n### React\n\nReact uses JavaScript expressions or ternary operators:\n\n```jsx\nfunction ExampleComponent() {\n    const isLoggedIn = true;\n\n    return <p>{isLoggedIn ? \"Welcome back!\" : \"Please log in.\"}</p>;\n}\n```\n\n### Vue\n\nVue uses directives like `v-if` and `v-else`:\n\n**Key Differences:**\n\n- Vue uses declarative directives (`v-if`, `v-else`) for conditional rendering.\n\n```html\n<script setup>\n    const isLoggedIn = true;\n</script>\n\n<template>\n    <p v-if=\"isLoggedIn\">Welcome back!</p>\n    <p v-else>Please log in.</p>\n</template>\n```\n\n## Passing Props to Child Components\n\n### **React**\n\nIn React, props are passed by adding attributes to the child component in the parent component. The child component accesses these props through the `props` parameter.\n\n**Parent Component**\n\n```jsx\nfunction Parent() {\n    return <Child message=\"Hello from Parent!\" />;\n}\n\nexport default Parent;\n```\n\n**Child Component**\n\n```jsx\nfunction Child(props) {\n    return <h1>{props.message}</h1>;\n}\n\nexport default Child;\n```\n\n### **Vue**\n\nIn Vue, props are passed in a similar way by using attributes on the child component in the parent. However, the child component explicitly defines the props it expects.\n\n**Parent Component**\n\n```html\n<script setup>\n    import Child from \"./Child.vue\";\n</script>\n\n<template>\n    <Child message=\"Hello from Parent!\" />\n</template>\n```\n\n**Child Component**\n\n```html\n<script setup>\n    defineProps({\n        message: String,\n    });\n</script>\n\n<template>\n    <h1>{{ message }}</h1>\n</template>\n```\n\n**Key Differences**\n\n- Vue requires explicit prop definitions using `defineProps`, while React doesn't require prop declarations\n- Vue allows direct access to props as variables in the`template`section, while React requires accessing them through the props object unless they are destructured.\n- Vue has built-in prop type checking with `defineProps`, while React relies on PropTypes or TypeScript\n\n## Passing Components in Slots\n\n### React\n\nReact uses children props for dynamic content:\n\n```jsx\nfunction Modal({ children }) {\n    return <div className=\"modal\">{children}</div>;\n}\n\nfunction ExampleComponent() {\n    return (\n        <Modal>\n            <h1>Modal Content</h1>\n        </Modal>\n    );\n}\n```\n\n### Vue\n\nIn Vue, components need to be declared in separate files. We use the `<slot>` component as a placeholder where we expect the child component to be passed.\n\n**Modal Component (`Modal.vue`)**\n\n```html\n<template>\n    <div class=\"modal\">\n        <slot></slot>\n    </div>\n</template>\n```\n\n**Parent Component**\n\n```html\n<script setup>\n    import Modal from \"./Modal.vue\";\n</script>\n\n<template>\n    <Modal>\n        <h1>Modal Content</h1>\n    </Modal>\n</template>\n```\n\n**Vue Named Slots:**\n\nWith Vue named slots, we can define multiple slot places in the parent component and pass different children.\n\n**`Modal.vue`**\n\n```html\n<template>\n    <div class=\"modal\">\n        <slot name=\"header\"></slot>\n        <slot></slot>\n    </div>\n</template>\n```\n\n**Parent Component**\n\n```html\n<template>\n    <Modal>\n        <template #header>\n            <h1>Modal Header</h1>\n        </template>\n        <p>Modal Body</p>\n    </Modal>\n</template>\n```\n\n**Key Differences:**\n\n- Vue’s `slot` allows for flexible content placement within components.\n\n## Handling Events Between Parent and Child Components\n\n### React\n\nReact passes functions as props to children:\n\n```jsx\nfunction Child({ onClick }) {\n    return <button onClick={onClick}>Click me</button>;\n}\n\nfunction ExampleComponent() {\n    const handleClick = () => alert(\"Button clicked!\");\n    return <Child onClick={handleClick} />;\n}\n```\n\n### Vue\n\nVue uses `emit` for event communication:\n\n**Children Component**\n\n```html\n<script setup>\n    const emit = defineEmits([\"clicked\"]);\n</script>\n\n<template>\n    <button @click=\"emit('clicked')\">Click me</button>\n</template>\n```\n\n**Parent Component**\n\n```html\n<script setup>\n    import Children from \"./Children.vue\";\n\n    const handleClick = () => console.log(\"Button clicked!\");\n</script>\n\n<template>\n    <Children @clicked=\"handleClick\" />\n</template>\n```\n\n**Key Differences:**\n\n- Vue’s `emit` is designed for child-to-parent communication.\n\n## Accessing DOM Elements with Refs\n\n### React\n\nReact uses `useRef` to access DOM elements:\n\n```jsx\nimport { useRef } from \"react\";\n\nfunction ExampleComponent() {\n    const inputRef = useRef();\n\n    const focusInput = () => {\n        inputRef.current.focus();\n    };\n\n    return (\n        <div>\n            <input ref={inputRef} type=\"text\" />\n            <button onClick={focusInput}>Focus Input</button>\n        </div>\n    );\n}\n```\n\n### Vue\n\nVue uses template refs to access DOM elements:\n\n```html\n<script setup>\n    import { ref } from \"vue\";\n\n    const inputRef = ref();\n\n    const focusInput = () => {\n        inputRef.value.focus();\n    };\n</script>\n\n<template>\n    <div>\n        <input ref=\"inputRef\" type=\"text\" />\n        <button @click=\"focusInput\">Focus Input</button>\n    </div>\n</template>\n```\n\n**Key Differences:**\n\n- Vue’s `ref` is bound to DOM elements using the `ref` attribute in templates.\n- Access the element via `ref.value`.\n\n## Reusable Logic\n\n### React\n\nReact uses custom hooks for reusable logic:\n\n```jsx\nfunction useCounter() {\n    const [count, setCount] = useState(0);\n    const increment = () => setCount(count + 1);\n    return { count, increment };\n}\n\nfunction ExampleComponent() {\n    const { count, increment } = useCounter();\n\n    return <button onClick={increment}>Count: {count}</button>;\n}\n```\n\n### Vue\n\nVue uses composables for reusable logic:\n\n`composables/useCounter.js`\n\n```jsx\nimport { ref } from \"vue\";\n\nexport function useCounter() {\n    const count = ref(0);\n    const increment = () => count.value++;\n    return { count, increment };\n}\n```\n\n`Component.vue`\n\n```html\n<script setup>\n    import { useCounter } from \"./composables/useCounter\";\n\n    const { count, increment } = useCounter();\n</script>\n\n<template>\n    <button @click=\"increment\">Count: {{ count }}</button>\n</template>\n```\n\n**Key Differences:**\n\n- Composables are plain functions that return reactive state and methods.\n- They are imported and used like hooks in React.\n- Even though React hooks and Vue composables are very similar, they work fundamentally differently under the hood. For example:\n    - In Vue, the reactive state defined in a composable is shared and persistent when imported across multiple components. This allows composables to act as a lightweight state management solution, eliminating the need for external libraries like Redux for many use cases.\n    - Vue composables do not rely on a component's lifecycle or context, unlike React hooks which must be used within a component or another hook. This makes composables more flexible and usable in non-component logic like services or standalone utilities.\n\n### Shared State Between Components with Vue Composables\n\nHere’s an example of a Vue composable that creates a shared counter state. This composable will be imported and used in two different components, and the state (`count`) will be persistent across both components:\n\n`composables/useSharedCounter.js`\n\n```jsx\nimport { ref } from \"vue\";\n\nconst count = ref(0);\n\nexport function useSharedCounter() {\n    const increment = () => count.value++;\n    const decrement = () => count.value--;\n    return { count, increment, decrement };\n}\n```\n\n`ComponentA.vue`\n\n```html\n<script setup>\n    import { useSharedCounter } from \"./composables/useSharedCounter\";\n\n    const { count, increment } = useSharedCounter();\n</script>\n\n<template>\n    <div>\n        <h2>Component A</h2>\n        <button @click=\"increment\">Increment in A</button>\n        <p>Count: {{ count }}</p>\n    </div>\n</template>\n```\n\n`ComponentB.vue`\n\n```html\n<script setup>\n    import { useSharedCounter } from \"./composables/useSharedCounter\";\n\n    const { count, decrement } = useSharedCounter();\n</script>\n\n<template>\n    <div>\n        <h2>Component B</h2>\n        <button @click=\"decrement\">Decrement in B</button>\n        <p>Count: {{ count }}</p>\n    </div>\n</template>\n```\n\nBoth `ComponentA` and `ComponentB` in your app, they will share the same `count` state, and any changes in one will be reflected in the other.\n\n## **Conclusion**\n\nVue and React both excel in building modern web applications, but they take different paths. Vue's declarative syntax, reactivity, and lifecycle hooks make it approachable for beginners, at least in my experience. Having spent considerable time with both frameworks, I believe that while their approaches differ, they share core concepts and offer similar features.\n\nThis guide only scratches the surface. More advanced features like Vue Router and state management with Pinia are beyond the scope of this beginner's guide, but you can explore them at your own pace.\n\nHappy coding!\n\nThe code for this is available in the following GitHub repository <a href=\"https://github.com/Suv4o/a-beginners-guide-to-vue-for-react-developers\" target=\"_blank\" rel=\"noopener noreferrer\">here</a>.\n"
  },
  {
    "articlePath": "/2025/03/02/how-to-bind-props-in-vue-correctly",
    "embeddings": [
      -0.05372404307126999,
      0.006845472380518913,
      0.022979265078902245,
      0.0628623366355896,
      0.010211378335952759,
      0.07052066922187805,
      0.009116604924201965,
      0.0552823543548584,
      0.023595578968524933,
      0.016805753111839294,
      -0.05378729850053787,
      0.008108177222311497,
      -0.03015555627644062,
      0.08796900510787964,
      0.031352970749139786,
      0.08831021189689636,
      -0.047402821481227875,
      0.013111524283885956,
      -0.051387686282396317,
      0.04282153397798538,
      0.039140958338975906,
      0.011005880311131477,
      0.004235684871673584,
      -0.011388673447072506,
      -0.04338638484477997,
      0.055743392556905746,
      -0.08500879257917404,
      -0.026537442579865456,
      -0.05365897715091705,
      -0.04060332477092743,
      0.04262777045369148,
      0.024615133181214333,
      -0.07279177755117416,
      0.03465796262025833,
      -0.04229005053639412,
      0.05231158062815666,
      -0.021408414468169212,
      -0.05801510065793991,
      -0.02541850320994854,
      0.025005191564559937,
      0.07368764281272888,
      0.018309002742171288,
      -0.10963664203882217,
      -0.08534813672304153,
      0.03194830194115639,
      0.023761283606290817,
      0.015337594784796238,
      -0.00045785470865666866,
      -0.02286258526146412,
      -0.042346540838479996,
      -0.046903226524591446,
      -0.09411782026290894,
      0.014429202303290367,
      0.07249104231595993,
      -0.0363452285528183,
      -0.03960518166422844,
      -0.021081475540995598,
      0.0070361546240746975,
      0.06014842167496681,
      -0.03466922789812088,
      0.013755102641880512,
      -0.02594376727938652,
      -0.0132527444511652,
      -0.02001616731286049,
      0.045423198491334915,
      0.007777378894388676,
      0.029630491510033607,
      0.01642785780131817,
      -0.024355588480830193,
      0.09477952867746353,
      -0.056494615972042084,
      0.06019328534603119,
      0.08738620579242706,
      0.0037448641378432512,
      0.04411882162094116,
      -0.024999897927045822,
      -0.013492858037352562,
      -0.039447955787181854,
      0.07110375910997391,
      -0.1200011745095253,
      -0.026545770466327667,
      -0.020193468779325485,
      -0.058964718133211136,
      -0.02505057118833065,
      0.0301164910197258,
      0.07579223066568375,
      -0.0489606074988842,
      -0.007677929941564798,
      0.031033342704176903,
      -0.04951443150639534,
      -0.11123289912939072,
      -0.1110614761710167,
      0.031470563262701035,
      0.11969005316495895,
      0.08716055005788803,
      0.03995972499251366,
      0.033296480774879456,
      0.046712398529052734,
      -0.015716616064310074,
      0.007195852696895599,
      -0.01071383897215128,
      0.03218943625688553,
      0.0016891108825802803,
      0.02391028217971325,
      0.1087954118847847,
      0.05032055824995041,
      0.0007928175618872046,
      -0.025179913267493248,
      -0.10163531452417374,
      -0.01691914163529873,
      -0.026668090373277664,
      0.07601869851350784,
      0.010432170704007149,
      -0.05639092996716499,
      -0.04489332437515259,
      0.0360439158976078,
      0.08399483561515808,
      -0.014804777689278126,
      0.04128720238804817,
      0.06156439706683159,
      0.06302081793546677,
      -0.0026805514935404062,
      -0.004282275214791298,
      0.011242151260375977,
      -0.029048336669802666,
      -0.08383875340223312,
      -0.024627210572361946,
      5.874214165391721e-33,
      0.04313446581363678,
      0.05105054751038551,
      -0.059972379356622696,
      0.04767764359712601,
      0.015996871516108513,
      0.01662984862923622,
      0.02078123390674591,
      -0.027045216411352158,
      -0.0945822149515152,
      0.031779102981090546,
      -0.005522991064935923,
      -0.024991948157548904,
      -0.045946601778268814,
      0.051551636308431625,
      0.01624922640621662,
      -0.038888443261384964,
      0.023055484518408775,
      0.011853434145450592,
      -0.06396324932575226,
      -0.02411218173801899,
      0.08692118525505066,
      -0.017435457557439804,
      -0.05542639642953873,
      0.006532028783112764,
      -0.005402017384767532,
      -0.036155980080366135,
      -0.007150244899094105,
      0.012114767916500568,
      -0.0504269152879715,
      -0.05798691511154175,
      0.04748343303799629,
      0.010657413862645626,
      0.0563146211206913,
      -0.00420210650190711,
      -0.007683489937335253,
      -0.08253388851881027,
      -0.027615446597337723,
      -0.052590422332286835,
      -0.13162007927894592,
      -0.052560172975063324,
      0.05564366653561592,
      0.022746210917830467,
      -0.03194373473525047,
      -0.04680992662906647,
      -0.02269272319972515,
      -0.01901867240667343,
      0.04886244609951973,
      0.059409551322460175,
      0.10699542611837387,
      -0.023847784847021103,
      -0.08926570415496826,
      0.014458774589002132,
      -0.057640086859464645,
      -0.05936446040868759,
      0.025707252323627472,
      -0.012018198147416115,
      0.05579417571425438,
      0.0245478805154562,
      0.03324327990412712,
      -0.07637319713830948,
      -0.05535847321152687,
      0.032167740166187286,
      0.06656485050916672,
      -0.017100226134061813,
      -0.07434765994548798,
      0.04999756067991257,
      0.012355447746813297,
      0.0393635630607605,
      0.026326175779104233,
      -0.015569563955068588,
      -0.03410554304718971,
      0.05346610024571419,
      -0.03955599665641785,
      -0.010305245406925678,
      0.08775722235441208,
      -0.04719778150320053,
      -0.008037899620831013,
      -0.11400317400693893,
      -0.03444589674472809,
      0.0010135963093489408,
      -0.019486580044031143,
      0.03453315421938896,
      -0.04658897966146469,
      0.13016194105148315,
      -0.0593034103512764,
      -0.024970177561044693,
      0.025761259719729424,
      -0.02009318768978119,
      0.016612133011221886,
      -0.01481514424085617,
      -0.006833482533693314,
      -0.06250432133674622,
      -0.009243209846317768,
      -0.14196014404296875,
      -0.07656680047512054,
      -6.553830632423442e-33,
      0.08366343379020691,
      0.018523555248975754,
      0.00009282075916416943,
      0.11198720335960388,
      -0.008657271042466164,
      -0.04881233349442482,
      -0.02093982696533203,
      0.07804089039564133,
      0.041777778416872025,
      -0.11041206121444702,
      -0.005362180061638355,
      -0.03334440663456917,
      0.021776389330625534,
      -0.008074460551142693,
      -0.018498660996556282,
      0.10523927956819534,
      -0.1058570146560669,
      -0.12569041550159454,
      0.13939833641052246,
      -0.039015769958496094,
      0.04003874585032463,
      0.052249975502491,
      0.0016327884513884783,
      0.07758975028991699,
      -0.00016813917318359017,
      -0.020313847810029984,
      0.04197372496128082,
      -0.0011748680844902992,
      -0.010193229652941227,
      0.03243228793144226,
      -0.06594894826412201,
      0.00698520103469491,
      -0.06569886207580566,
      0.03268344700336456,
      -0.024911263957619667,
      -0.020880132913589478,
      0.004324068780988455,
      0.012772955000400543,
      -0.003872476052492857,
      -0.01675477996468544,
      0.03839359059929848,
      0.03255607932806015,
      -0.010510041378438473,
      -0.015350745059549809,
      -0.07487907260656357,
      0.005419743247330189,
      0.08639660477638245,
      -0.0208903718739748,
      0.02198169194161892,
      0.03675717115402222,
      0.038337208330631256,
      -0.09001688659191132,
      -0.10984335094690323,
      0.03137777000665665,
      -0.03468776121735573,
      -0.06608375906944275,
      -0.01103663258254528,
      -0.014025694690644741,
      0.025338931009173393,
      0.005625483114272356,
      -0.03139141574501991,
      -0.015564747154712677,
      0.03676144406199455,
      -0.014825394377112389,
      0.0017260040622204542,
      -0.07366620749235153,
      -0.11803086847066879,
      -0.04045800119638443,
      0.09017360210418701,
      -0.027475088834762573,
      0.021131550893187523,
      0.03148283064365387,
      0.08469890803098679,
      0.0012443187879398465,
      0.06255178153514862,
      -0.05758088454604149,
      0.02631094492971897,
      0.027878591790795326,
      0.06769417971372604,
      0.024179674685001373,
      -0.05845179036259651,
      -0.020510051399469376,
      0.004744029603898525,
      0.093193918466568,
      0.006390331778675318,
      0.1252627819776535,
      -0.011560141108930111,
      0.01514405570924282,
      -0.033244699239730835,
      0.018045706674456596,
      -0.0026761419139802456,
      0.015463844873011112,
      0.051334552466869354,
      0.021003946661949158,
      -0.040543731302022934,
      -5.9143403063899314e-8,
      -0.0014109996845945716,
      0.011614385060966015,
      -0.04119422286748886,
      -0.04859890788793564,
      -0.07503191381692886,
      -0.05163012817502022,
      0.057942867279052734,
      0.0018871332285925746,
      -0.06747967004776001,
      0.032683100551366806,
      0.0813511461019516,
      0.06760872900485992,
      -0.009324946440756321,
      -0.02740158699452877,
      0.0041970196180045605,
      -0.00523163378238678,
      -0.03255341202020645,
      0.07638981193304062,
      -0.08571597933769226,
      -0.03001847118139267,
      0.04805765300989151,
      0.059040773659944534,
      -0.0017991089262068272,
      -0.0016167158028110862,
      0.17769038677215576,
      0.054827939718961716,
      -0.013278447091579437,
      -0.003907431848347187,
      0.00016727426555007696,
      -0.025208694860339165,
      0.028267672285437584,
      0.025425363332033157,
      -0.009675173088908195,
      -0.05180298909544945,
      -0.009285211563110352,
      0.060473840683698654,
      0.013813122175633907,
      0.02132863737642765,
      -0.029722314327955246,
      0.11185775697231293,
      0.010101443156599998,
      -0.003917352762073278,
      -0.04059693589806557,
      -0.031131550669670105,
      0.00351318484172225,
      0.018263068050146103,
      -0.07553574442863464,
      0.00967628974467516,
      0.01908171735703945,
      -0.05955937132239342,
      0.0527830608189106,
      -0.08142128586769104,
      0.020373372361063957,
      0.05570796877145767,
      -0.02655164524912834,
      -0.048979803919792175,
      0.046751245856285095,
      -0.005551730748265982,
      0.07213005423545837,
      -0.09787211567163467,
      0.047193653881549835,
      0.007258635014295578,
      0.04693160951137543,
      0.005431790836155415
    ],
    "content": "---\ntitle: How to Bind Props in Vue Correctly\ndescription: Master Vue props binding with this in-depth guide! Learn how to correctly pass strings, numbers, booleans, objects, arrays, and functions as props. Avoid common mistakes, understand prop types, and follow best practices to write clean, efficient, and error-free Vue components.\nimage: https://res.cloudinary.com/suv4o/image/upload/q_auto,f_auto,w_1200,e_sharpen:100/v1740813459/blog/how-to-bind-props-in-vue-correctly/building_blocks_of_vue_3d_representation_of_1_wsoaxn\nkeywords:\n    - Vue props binding\n    - Vue component props\n    - Vue props tutorial\n    - Passing props in Vue\n    - Vue 3 props\n    - Vue props best practices\n    - Vue dynamic props\n    - Vue boolean props\n    - Vue function props\n    - Vue number props\n    - Vue object props\n    - Vue array props\n    - Vue template literals props\n    - Vue props validation\n    - Vue defineProps\n    - Vue props types\n    - How to pass props in Vue 3\n    - Best way to bind props in Vue\n    - Common mistakes in Vue props binding\n    - Difference between Vue 2 and Vue 3 props\n    - How to pass functions as props in Vue\ntype: page\nblog: post\npublished: 2nd March 2025\nreadTime: 6\nauthor: Aleksandar Trpkovski\narticleTags:\n    - FrontEnd\n    - Vue.js\n    - JavaScript\n---\n\n# How to Bind Props in Vue Correctly\n\n_{{$document.published}} • {{$document.readTime}} min read — by **[{{$document.author}}](/)**_\n\n::tag-pills{:tags=\"articleTags\"}\n::\n\n![Landing Image](https://res.cloudinary.com/suv4o/image/upload/q_auto,f_auto,w_750,e_sharpen:100/v1740813459/blog/how-to-bind-props-in-vue-correctly/building_blocks_of_vue_3d_representation_of_1_wsoaxn)\n\nVue makes data binding in props simple and intuitive, but small syntax errors, especially when coming from other frameworks or languages, can lead to unexpected behaviour.\n\nIn this article, we'll break down the correct, unnecessary, and incorrect ways to bind props in Vue components when using them in the template.\n\n## Understanding Vue Prop Types\n\nBefore diving into prop binding, it's essential to understand the different **prop types** that Vue supports:\n\n- **String (`String`)**: Accepts text values.\n- **Number (`Number`)**: Accepts numeric values.\n- **Boolean (`Boolean`)**: Accepts `true` or `false`.\n- **Object (`Object`)**: Accepts objects.\n- **Array (`Array`)**: Accepts arrays.\n- **Function (`Function`)**: Accepts functions.\n\n## Simple Vue Bindings\n\nVue uses `v-bind` (or shorthand `:`) to bind data dynamically to props. However, different types of props require different approaches. Let’s explore them with practical examples.\n\n### 1. Static Props\n\n✅ **Correct:**\n\n```html\n<Component prop=\"Text\" />\n```\n\n⚠️ **Unnecessary:**\n\n```html\n<Component :prop=\"'Text'\" />\n```\n\n❌ **Incorrect:**\n\n```html\n<Component :prop=\"Text\" />\n```\n\n**Explanation:** Static props should be written as plain strings without `:` since they don't need dynamic binding. The unnecessary syntax binds a static string dynamically, which isn’t needed. The incorrect syntax lacks quotes around `Text`, making Vue treat it as a variable instead of a string.\n\n### 2. Boolean Props\n\n✅ **Correct:**\n\n```html\n<Component :prop=\"true\" />\n```\n\n❌ **Incorrect:**\n\n```html\n<Component prop=\"true\" />\n```\n\n**Explanation:** Boolean props require `:` to be properly recognized as `true` or `false`. Without `:`, the value is treated as a string (`\"true\"`), which may not behave as expected.\n\n> 💡 **Tip:** In Vue, simply adding a boolean prop without a value (e.g., `<Component prop />`) is equivalent to passing `true`.\n\n### **3. Binding Numbers in Props**\n\n✅ **Correct:**\n\n```html\n<Component :prop=\"42\" />\n```\n\n❌ **Incorrect:**\n\n```html\n<Component prop=\"42\" />\n```\n\n**Explanation:** Numbers should always be bound using `:` to ensure they are treated as actual numeric values. Without `:`, Vue treats them as strings, which can lead to unexpected type issues in the component.\n\n### 4. Dynamic Props\n\n✅ **Correct:**\n\n```html\n<Component :prop=\"item.name\" />\n```\n\n⚠️ **Unnecessary:**\n\n```html\n<Component :prop=\"`${item.name}`\" />\n```\n\n❌ **Incorrect:**\n\n```html\n<Component :prop=\"{{ item.name }}\" /> <Component prop=\"item.name\" />\n```\n\n**Explanation:** To pass a dynamic value, `:` is required to bind `item.name` properly. The unnecessary syntax wraps the value in a template literal, which is redundant. The incorrect examples either incorrectly use `{{ }}` (which is for templates, not bindings) or treat `\"item.name\"` as a static string instead of referencing the variable.\n\n> 💡 **Tip:** The `:` shorthand tells Vue to evaluate an expression instead of treating it as a string.\n\n### 5. Props with Template Strings\n\n✅ **Correct:**\n\n```html\n<Component :prop=\"`Go to ${item.name}`\" />\n```\n\n⚠️ **Unnecessary:**\n\n```html\n<Component :prop=\"'Go to ' + item.name\" />\n```\n\n❌ **Incorrect:**\n\n```html\n<Component :prop=\"Go to ${item.name}\" />\n```\n\n**Explanation:** The best approach is using template literals with backticks for readability. The unnecessary syntax still works but concatenates strings in a less readable way. The incorrect syntax lacks quotes, making Vue crash because it expects a dynamic variable.\n\n> 💡 **Tip:** Template literals (``) improve readability, support multi-line strings, and eliminate the need for explicit `+` concatenation.\n\n### **6. Passing Objects as Props**\n\n✅ **Correct:**\n\n```html\n<Component :prop=\"{ name: 'Vue', version: 3 }\" />\n```\n\n❌ **Incorrect:**\n\n```html\n<Component prop=\"{ name: 'Vue', version: 3 }\" />\n```\n\n**Explanation:** Objects should always be bound dynamically using `:` to be correctly parsed as JavaScript objects.\n\n### **7. Passing Arrays as Props**\n\n✅ **Correct:**\n\n```html\n<Component :prop=\"[1, 2, 3]\" />\n```\n\n❌ **Incorrect:**\n\n```html\n<Component prop=\"[1, 2, 3]\" />\n```\n\n**Explanation:** Arrays must be bound using `:` to ensure they are treated as JavaScript arrays and not strings.\n\n### **8. Passing Functions to Props**\n\n✅ **Correct:**\n\n```html\n<Component :prop=\"handleClick\" />\n```\n\n❌ **Incorrect:**\n\n```html\n<Component :prop=\"handleClick()\" />\n```\n\n**Explanation:**\n\n- The correct approach passes the function `handleClick` as a reference, allowing Vue to call it when needed.\n- The incorrect approach **executes** `handleClick()` immediately when rendering, which is not the intended behaviour.\n\n## **Cheat Sheet**\n\n| Use Case                    | ✅ Correct Syntax                                   | ⚠️ Unnecessary Syntax                       | ❌ Incorrect Syntax                                                             |\n| --------------------------- | --------------------------------------------------- | ------------------------------------------- | ------------------------------------------------------------------------------- |\n| Static Props                | `<Component prop=\"Text\"/>`                          | `<Component :prop=\"'Text'\"/>`               | `<Component :prop=\"Text\"/>`                                                     |\n| Boolean Props               | `<Component prop />`                                | `<Component :prop=\"true\"/>`                 | `<Component prop=\"true\"/>`                                                      |\n| Number Props                | `<Component :prop=\"42\"/>`                           |                                             | `<Component prop=\"42\"/>`                                                        |\n| Dynamic Props               | `<Component :prop=\"item.name\"/>`                    | `<Component :prop=\"`\\``${item.name}`\\``\"/>` | `<Component :prop=\"{{ item.name }}\"/>`<br> <br> `<Component prop=\"item.name\"/>` |\n| Props with Template Strings | `<Component :prop=\"`\\``Go to ${item.name}`\\``\"/>`   | `<Component :prop=\"'Go to ' + item.name\"/>` | `<Component :prop=\"Go to ${item.name}\"/>`                                       |\n| Passing Objects as Props    | `<Component :prop=\"{ name: 'Vue', version: 3 }\" />` |                                             | `<Component prop=\"{ name: 'Vue', version: 3 }\" />`                              |\n| Passing Arrays as Props     | `<Component :prop=\"[1, 2, 3]\" />`                   |                                             | `<Component prop=\"[1, 2, 3]\" />`                                                |\n| Passing Functions to Props  | `<Component :prop=\"handleClick\" />`                 |                                             | `<Component :prop=\"handleClick()\" />`                                           |\n"
  },
  {
    "articlePath": "/2025/03/24/create-a-recommendation-engine-with-ai-for-free",
    "embeddings": [
      -0.09505531936883926,
      -0.00589695293456316,
      0.014870009385049343,
      0.10406790673732758,
      0.15438222885131836,
      0.013592985458672047,
      -0.016210461035370827,
      0.0031354594975709915,
      0.0707322284579277,
      -0.025757167488336563,
      -0.0011781792854890227,
      0.04319247603416443,
      0.11057323217391968,
      0.032067641615867615,
      -0.005744380876421928,
      0.10172522068023682,
      -0.01096340361982584,
      0.014663203619420528,
      -0.11362290382385254,
      -0.07498596608638763,
      0.013902164995670319,
      0.02003347873687744,
      0.06642011553049088,
      -0.04999639466404915,
      0.007712561637163162,
      0.03330614045262337,
      -0.07148606330156326,
      0.005111916456371546,
      -0.06238230690360069,
      -0.022026823833584785,
      0.06797274202108383,
      -0.025017259642481804,
      -0.008940507657825947,
      0.024602778255939484,
      -0.01318868063390255,
      0.029378915205597878,
      -0.08740700036287308,
      -0.0041205184534192085,
      0.02826441451907158,
      -0.004291499499231577,
      -0.007515497040003538,
      0.010980701074004173,
      -0.06713972240686417,
      0.01918626017868519,
      0.07721459120512009,
      0.04222065955400467,
      -0.08644059300422668,
      -0.04651087149977684,
      -0.022945307195186615,
      0.039065759629011154,
      -0.14163781702518463,
      -0.10272637754678726,
      -0.04454144462943077,
      -0.011549601331353188,
      -0.027796249836683273,
      0.00035669683711603284,
      -0.07477404922246933,
      -0.015055961906909943,
      -0.05090055242180824,
      -0.025469008833169937,
      0.05338633805513382,
      -0.06311679631471634,
      0.011297805234789848,
      -0.03114878386259079,
      0.01603475585579872,
      0.004393814597278833,
      -0.03909117728471756,
      0.01896042376756668,
      -0.02118682861328125,
      0.05073929578065872,
      0.027072355151176453,
      0.0629705935716629,
      -0.0003749266325030476,
      0.009562110528349876,
      0.01980675756931305,
      -0.018263110890984535,
      0.015761367976665497,
      -0.03491149842739105,
      -0.004914230201393366,
      -0.0374036468565464,
      -0.10062393546104431,
      -0.03218858689069748,
      0.03288465365767479,
      0.02475983276963234,
      -0.0015419627306982875,
      -0.03798401355743408,
      0.0711197629570961,
      -0.033259421586990356,
      0.021304085850715637,
      -0.021886460483074188,
      -0.026861274614930153,
      -0.058586180210113525,
      0.01996922306716442,
      -0.029202209785580635,
      0.04144729673862457,
      0.05817786604166031,
      -0.03485572710633278,
      -0.006049163639545441,
      -0.07583089172840118,
      0.10195466130971909,
      0.009638004936277866,
      0.02970881015062332,
      0.03214745223522186,
      -0.02217242307960987,
      0.05987134948372841,
      0.03162181377410889,
      0.037924401462078094,
      0.06628703325986862,
      -0.03060014359652996,
      -0.023523516952991486,
      -0.014593944884836674,
      0.07499225437641144,
      -0.05338948220014572,
      -0.03782668709754944,
      0.0067496695555746555,
      0.0012866657925769687,
      0.11089872568845749,
      -0.06278105080127716,
      0.0917930006980896,
      0.0858139768242836,
      0.0557464100420475,
      0.05179690942168236,
      0.023363851010799408,
      0.009602032601833344,
      -0.03295835480093956,
      -0.020805321633815765,
      -0.0015296905767172575,
      5.069693709403455e-33,
      0.023076597601175308,
      0.041549284011125565,
      0.02023404650390148,
      0.0008893592748790979,
      0.05389045551419258,
      -0.006480967625975609,
      -0.037792742252349854,
      0.005827789194881916,
      -0.13330009579658508,
      -0.036226388067007065,
      -0.031529370695352554,
      0.0986773744225502,
      -0.011304638348519802,
      0.031582292169332504,
      -0.008434051647782326,
      -0.07944060117006302,
      -0.024929994717240334,
      0.011452682316303253,
      0.05576246976852417,
      -0.04290599003434181,
      0.04542963579297066,
      -0.027600448578596115,
      -0.017861470580101013,
      0.009738048538565636,
      -0.09632938355207443,
      0.0002670898975338787,
      0.0177854523062706,
      -0.06729410588741302,
      -0.027910945937037468,
      -0.03552741929888725,
      -0.06539212912321091,
      0.04655113071203232,
      0.005975321866571903,
      -0.06620482355356216,
      -0.011699692346155643,
      -0.04237793758511543,
      -0.039884477853775024,
      -0.026364922523498535,
      -0.014350931160151958,
      -0.015197626315057278,
      0.08967035263776779,
      0.007301464211195707,
      0.0347091443836689,
      -0.13009662926197052,
      -0.055760160088539124,
      0.0684504583477974,
      -0.02985139563679695,
      0.013176501728594303,
      0.0006165363593026996,
      -0.0305703803896904,
      -0.012211216613650322,
      -0.02437993884086609,
      -0.05245508626103401,
      -0.0034566177055239677,
      -0.039915405213832855,
      -0.007263762876391411,
      -0.007612030487507582,
      0.02420314960181713,
      0.07085961103439331,
      -0.05542086064815521,
      0.03340979292988777,
      0.0025198652874678373,
      0.050462376326322556,
      -0.011046955361962318,
      0.01222765538841486,
      0.0076797413639724255,
      0.06742369383573532,
      0.10653682798147202,
      0.05341411381959915,
      0.03213852271437645,
      -0.0074074589647352695,
      0.06809036433696747,
      0.041309941560029984,
      -0.044656407088041306,
      -0.015202444978058338,
      -0.08497830480337143,
      -0.05831966549158096,
      -0.10244935005903244,
      -0.019030481576919556,
      0.011817540042102337,
      -0.004738036543130875,
      -0.03846658393740654,
      -0.05520322173833847,
      -0.06391311436891556,
      -0.07669702917337418,
      -0.05281848460435867,
      0.021758921444416046,
      -0.0885448008775711,
      -0.02067631483078003,
      -0.00046497798757627606,
      0.0036695050075650215,
      0.08122187107801437,
      -0.0681612491607666,
      -0.05229243263602257,
      -0.01689513400197029,
      -4.130041361580535e-33,
      0.022438764572143555,
      -0.052030980587005615,
      0.00671709468588233,
      0.06203398108482361,
      0.09497429430484772,
      -0.03138572350144386,
      -0.06056397035717964,
      0.10625630617141724,
      0.060494326055049896,
      -0.04370895400643349,
      -0.02412264421582222,
      -0.07827873528003693,
      0.0013775443658232689,
      -0.006146486382931471,
      0.07819148898124695,
      0.05960644781589508,
      -0.07144128531217575,
      -0.04341384768486023,
      -0.008604285307228565,
      0.04766960069537163,
      -0.018221473321318626,
      0.10608979314565659,
      -0.04571632295846939,
      0.0447329543530941,
      0.05539163202047348,
      0.073667511343956,
      0.04961051046848297,
      0.12315014749765396,
      0.020096102729439735,
      -0.0589185394346714,
      -0.010448813438415527,
      -0.022033032029867172,
      -0.10555218160152435,
      0.0076873027719557285,
      -0.023088878020644188,
      0.01963767223060131,
      -0.06184079870581627,
      0.05913665518164635,
      -0.02147694118320942,
      0.06269921362400055,
      0.07000911980867386,
      0.04500013589859009,
      -0.036511536687612534,
      -0.0063374838791787624,
      -0.03082917630672455,
      -0.005702355410903692,
      -0.0022606938146054745,
      0.0035335791762918234,
      0.02190125733613968,
      -0.028970099985599518,
      -0.020918555557727814,
      -0.08682753145694733,
      -0.09909078478813171,
      0.006828427314758301,
      -0.07468746602535248,
      -0.05231868475675583,
      0.013652344234287739,
      0.025355618447065353,
      -0.00548316165804863,
      0.004792599473148584,
      -0.022057507187128067,
      -0.03721558675169945,
      -0.021345676854252815,
      -0.06839282065629959,
      0.023667342960834503,
      -0.10722803324460983,
      -0.011311492882668972,
      -0.015454398468136787,
      -0.03008848987519741,
      0.0275373924523592,
      0.011615045368671417,
      0.07567550241947174,
      0.05065425857901573,
      -0.009237297810614109,
      0.06957510113716125,
      0.020399194210767746,
      0.08235502243041992,
      0.020949754863977432,
      0.02875698171555996,
      -0.12913571298122406,
      -0.029579496011137962,
      -0.00516916997730732,
      0.000812363054137677,
      0.02605370804667473,
      0.035031046718358994,
      0.03373649716377258,
      -0.013665317557752132,
      0.018027527257800102,
      -0.029035307466983795,
      -0.010870568454265594,
      0.013696519657969475,
      -0.015092829242348671,
      0.03941605985164642,
      0.10001514852046967,
      -0.06327790021896362,
      -5.621451393267307e-8,
      -0.04474686458706856,
      -0.031559061259031296,
      -0.03871085122227669,
      0.10290365666151047,
      0.001166472677141428,
      0.006081225350499153,
      0.07386014610528946,
      0.02057277411222458,
      -0.06790973246097565,
      -0.01651049219071865,
      0.10116638243198395,
      0.01983199268579483,
      -0.04521297290921211,
      0.04470694065093994,
      -0.042110640555620193,
      -0.010735979303717613,
      -0.0181864183396101,
      0.018145116046071053,
      0.01562870480120182,
      -0.0006515016430057585,
      0.018444713205099106,
      0.02699885703623295,
      -0.0001674623927101493,
      -0.05278746783733368,
      0.062275368720293045,
      0.035399362444877625,
      -0.03914870321750641,
      0.006589289754629135,
      0.0069595566019415855,
      0.0267547145485878,
      0.010276854038238525,
      0.017379626631736755,
      0.05111240968108177,
      -0.057410042732954025,
      0.045074213296175,
      0.019618051126599312,
      -0.0009475767728872597,
      -0.06553108990192413,
      -0.1165362298488617,
      0.008849700912833214,
      0.11053720116615295,
      0.056471943855285645,
      -0.04343538358807564,
      -0.0599251426756382,
      0.10627443343400955,
      0.0013924017548561096,
      0.04381411895155907,
      -0.12407972663640976,
      0.06578762084245682,
      0.015457215718925,
      0.026548141613602638,
      -0.12458038330078125,
      0.07889015972614288,
      0.03957820683717728,
      0.01629943773150444,
      -0.02597445249557495,
      0.06352829188108444,
      0.04040117189288139,
      0.07785172760486603,
      0.05806352198123932,
      0.06724205613136292,
      0.014894518069922924,
      0.06767658144235611,
      0.0571863017976284
    ],
    "content": "---\ntitle: Create a Recommendation Engine with AI for Free\ndescription: Learn how to build a free AI-powered recommendation engine using open-source embedding models from Hugging Face and Transformer.js. This step-by-step guide will show you how to generate text embeddings, compare article similarities, and create personalised content suggestions—without relying on paid APIs.\nimage: https://res.cloudinary.com/suv4o/image/upload/q_auto,f_auto,w_1200,e_sharpen:100/v1742804621/blog/create-a-recommendation-engine-with-ai-for-free/create-a-recommendation-engine-with-ai-for-free_ysdjwd\nkeywords:\n    - AI\n    - Machine Learning\n    - JavaScript\n    - Transformer.js\n    - AI recommendation engine\n    - Free AI models\n    - Hugging Face\n    - Embedding models\n    - Blog recommendations\n    - AI article suggestions\n    - Open-source AI\n    - Text embeddings\n    - JavaScript AI\ntype: page\nblog: post\npublished: 24th March 2025\nreadTime: 6\nauthor: Aleksandar Trpkovski\narticleTags:\n    - AI\n    - Node.js\n    - JavaScript\n---\n\n# Create a Recommendation Engine with AI for Free\n\n_{{$document.published}} • {{$document.readTime}} min read — by **[{{$document.author}}](/)**_\n\n::tag-pills{:tags=\"articleTags\"}\n::\n\n![Landing Image](https://res.cloudinary.com/suv4o/image/upload/q_auto,f_auto,w_750,e_sharpen:100/v1742804621/blog/create-a-recommendation-engine-with-ai-for-free/create-a-recommendation-engine-with-ai-for-free_ysdjwd)\n\nRecently, I had some free time since I was taking a month off work for the arrival of my daughter. While at home, I decided to make some updates to my personal blog.\n\nPreviously, my blog displayed three recommended articles at the bottom of each post. These articles were simply the next consecutive ones, which was easy to implement and required no AI or complex algorithms. For example, if an article was written on March 2, 2025, the recommended articles would be from January 15, January 9, and January 4, since these were the three most recently published articles before the current one. See image below\n\n![Image One](https://res.cloudinary.com/suv4o/image/upload/q_auto,f_auto,w_750,e_sharpen:100/v1742804593/blog/create-a-recommendation-engine-with-ai-for-free/image-1_dtbwt2)\n\nHowever, these recommendations weren't very relevant—readers rarely found articles that matched their interests.\n\nIn this article, I'll walk you through exactly how I did it—for free—using open-source AI models to make article suggestions more relevant for readers. Let's dive in!\n\n## What Are Embedding Models and Why Do We Need Them?\n\nBefore we dive into the implementation, let's first understand embedding models and why they are essential for building a recommendation system.\n\nAt a high level, embedding models are AI models that convert text into **numerical vectors**—essentially transforming words, sentences, or even entire articles into numbers that a computer can understand. These vectors help capture the meaning and relationships between different pieces of text.\n\nFor example, imagine we want to represent words in a 2D space where similar words are close together. An embedding model can do this. Take the words `cat`, `dog`, `fish`, and `sun`. We can represent them with vectors like this: `cat` becomes `[2, 3]`, `dog` `[3, 4]`, `fish` `[6, 2]`, and `sun` `[8, 9]`. Here, `cat` and `dog` are close because they are both animals, while `fish` is further away (another animal but different category), and `sun` is very far because it's unrelated.\n\n![Image Two](https://res.cloudinary.com/suv4o/image/upload/q_auto,f_auto,w_750,e_sharpen:100/v1742805960/blog/create-a-recommendation-engine-with-ai-for-free/image_dygz3c)\n\nIn the context of our recommendation system, embeddings allow us to measure the similarity between articles. Instead of just suggesting the next article in order, we can recommend articles that are most relevant to what the reader is currently viewing.\n\n## Paid vs. Free Embedding Models\n\nThere are many different embedding models available, and they generally fall into two categories:\n\n### Paid Embedding Models (e.g., OpenAI, VoyageAI, Google)\n\nThe major AI companies like OpenAI, VoyageAI, and Google provide embedding models.\n\nOpenAI offers high-quality embedding models, such as `text-embedding-3-large`, `text-embedding-3-small`, and `text-embedding-ada-002`.\n\nVoyageAI's options include `voyage-3`, `voyage-3-large`, and `voyage-3-lite`.\n\nGoogle provides `text-embedding-004` and `text-embedding-005`.\n\nSince these models charge API usage fees, they aren't ideal for small projects or personal blogs.\n\n### **Free Embedding Models (e.g., Hugging Face)**\n\nFortunately, there are open-source alternatives that are completely free! <a href=\"https://huggingface.co/\" target=\"_blank\" rel=\"noopener noreferrer\">Hugging Face</a> is a popular platform that hosts a wide range of pre-trained AI models, including embedding models. Many of these models can be used without any cost, making them perfect for personal projects like ours.\n\nFor this tutorial, we will use a free embedding model from Hugging Face. This allows us to build a zero-cost recommendation system while still leveraging the power of AI.\n\n## Understanding Embedding Dimensions and Sizes\n\nIn the world of embedding models, \"dimensions\" or \"sizes\" refer to the number of numerical values (or \"coordinates\") used to represent text in a numerical space.\n\nRemember our earlier example with two-dimensional coordinates (x, y)? Embedding models work the same way but use hundreds or thousands of dimensions instead of just 2 or 3.\n\nMore dimensions allow the model to capture finer nuances and relationships between words and concepts—like having a more detailed meaning map. Fewer dimensions create a simpler representation, which produces a smaller numerical representation (the \"embedding\"). Higher dimensions offer better accuracy but require more storage and computing power.\n\nFor example, OpenAI and VoyageAI offer various types of embedding models. Their larger models like `text-embedding-3-large` and `voyage-3-large` use **3072** and **2048** dimensions respectively, while their lighter models like `embedding-3-small` and `voyage-3-lite` use as few as **512** dimensions.\n\n## Using Hugging Face and Transformer.js\n\nFor my blog article, I decided to use a free recommendation engine by leveraging the power of Hugging Face and Transformer.js.\n\n### What is Transformer.js?\n\n<a href=\"https://huggingface.co/docs/transformers.js/en/index\" target=\"_blank\" rel=\"noopener noreferrer\">Transformer.js</a> is a JavaScript library that lets you run AI models directly in your web browser or Node.js application. It downloads models locally, allowing them to run entirely on your device.\n\nIt supports various models including text generation, translation, image recognition, and embedding generation—all without relying on external APIs. This means zero usage fees, making it ideal for my personal blog project.\n\n### Choosing the Right Model\n\nSince the models in Transformer.js run locally, we need to be mindful not to choose a model that's too large in size and requires significant computing power to generate embeddings. For that purpose, I chose a model called `all-MiniLM-L6-v2`.\n\nThis model converts sentences and paragraphs into **384**-dimensional dense vector embeddings, providing an excellent balance of performance and efficiency.\n\nFor compatibility with Transformers.js, I use the <a href=\"https://huggingface.co/Xenova/all-MiniLM-L6-v2\" target=\"_blank\" rel=\"noopener noreferrer\">`Xenova/all-MiniLM-L6-v2`</a> model from Hugging Face.\n\n### Implementing the Embedding Extraction\n\nFirst, let's install the `@huggingface/transformers` package:\n\n```bash\nnpm install @huggingface/transformers\n```\n\nHere's the simple code to compute embeddings from text:\n\n```ts\nimport { pipeline } from \"@huggingface/transformers\";\n\nconst text = \"The Importance of Machine Learning in Modern Web Development\";\n\nconst extractor = await pipeline(\"feature-extraction\", \"Xenova/all-MiniLM-L6-v2\");\nconst output = await extractor(text, { pooling: \"mean\", normalize: true });\nconst vector = output.tolist();\nconsole.log(vector[0]);\n```\n\nThe console log from the above code will output the following 384-dimensional vector:\n\n```ts\n[\n   -0.020516404882073402,   -0.00818917341530323,    0.02859281376004219,\n    0.039169277995824814,    0.07049212604761124,   -0.02238479070365429,\n    -0.03139492869377136,   -0.06332399696111679,   -0.04767751693725586,\n    -0.02019294537603855,   -0.05919709429144859,    0.04298273101449013,\n    0.016094526275992393,    -0.0438438318669796,  -0.024306558072566986,\n     0.01921924203634262,  -0.028016094118356705,   -0.03439173847436905,\n    -0.04121260717511177,   -0.10778705775737762,  -0.021788278594613075,\n    -0.03216289356350899,    0.01833938993513584,  -0.017994459718465805,\n  0.00037811059155501425,    0.04635584354400635,   0.019866760820150375,\n     0.05040336400270462,    0.06332680583000183,   -0.03538951650261879,\n   -0.005023809149861336,    -0.0143986064940691, -0.0052444711327552795,\n    0.023529207333922386,   -0.07226388156414032,    0.07632710039615631,\n     0.01021984126418829,   -0.00824225414544344,    0.03339964896440506,\n    -0.01060909777879715,   -0.09655245393514633,  -0.055546682327985764,\n   -0.012066159397363663, -0.0076921964064240456,    0.04580942541360855,\n     0.02390001341700554,   -0.08683866262435913,   -0.08001071214675903,\n     -0.0641876757144928,   0.017844615504145622,   -0.08620015531778336,\n    -0.08266746997833252,   0.022476131096482277,  -0.036314111202955246,\n    -0.06440844386816025,     0.0329846553504467,    0.03954195976257324,\n    -0.02818935364484787,   0.016931047663092613, -0.0027509541250765324,\n   -0.012003917247056961,   -0.08396296203136444,   0.020469816401600838,\n    0.007711503189057112,   0.039566002786159515,  -0.023063624277710915,\n   -0.001518305274657905,    0.03386910259723663,  -0.005670216400176287,\n     0.01568906381726265,    -0.0874529480934143,     0.0704861655831337,\n    -0.08309027552604675,    0.06774929165840149,  -0.013879545032978058,\n    -0.03932321444153786,  -0.026192566379904747,  0.0037247256841510534,\n    0.025735696777701378,   0.042777273803949356,  -0.006177722010761499,\n    0.016913456842303276,  -0.019507644698023796,    0.07432487607002258,\n    0.043784961104393005,    0.03311076760292053,   0.005122023168951273,\n   -0.019937295466661453,  -0.058375801891088486,   -0.07924377918243408,\n   -0.015307264402508736,  -0.026857662945985794,    0.04473648965358734,\n   -0.003576496383175254,   -0.03769933804869652,   0.016773588955402374,\n    0.008591416291892529,   -0.07192342728376389,   -0.03686879947781563,\n     0.09621886163949966,\n  ... 284 more items\n]\n```\n\nAt first glance, these numbers might look meaningless, but trust me—we'll see later how these numbers help us compare vectors of different texts to determine their similarity. But before that, let's see what each part of the code above does:\n\n- **Load a Feature Extraction Model** – The `pipeline` function loads the `Xenova/all-MiniLM-L6-v2` model. It downloads once and caches locally, making subsequent runs faster.\n- **Process the Text** – The extractor converts the input text (`\"The Importance of Machine Learning in Modern Web Development\"`) into a **384**-dimensional vector.\n- **Pooling & Normalisation** – The `pooling: \"mean\"` option averages the token embeddings, while `normalize: true` ensures consistent scaling.\n- **Convert to Array & Output** – The resulting vector is converted to an array and logged to the console.\n\n## Calculate cosine similarity between two embeddings\n\nNow that we have extracted embeddings from a single text, let's compare the similarity between two different texts using cosine similarity. Cosine similarity is a common metric for measuring the similarity between two vectors, with a value between -1 (completely opposite) and 1 (identical).\n\nFor calculating the cosine similarity, we'll use a helper library for Node.js from TensorFlow called `@tensorflow/tfjs-node`. First, we need to ensure we have this package installed:\n\n```bash\nnpm install @tensorflow/tfjs-node\n```\n\n### Compute Embeddings for Two Texts\n\n```ts\nimport { pipeline } from \"@huggingface/transformers\";\nimport * as tf from \"@tensorflow/tfjs-node\";\n\n// Define two different texts\nconst text1 = \"The Importance of Machine Learning in Modern Web Development\";\nconst text2 = \"Machine learning is transforming the future of web applications.\";\n\n// Load the feature extraction model\nconst extractor = await pipeline(\"feature-extraction\", \"Xenova/all-MiniLM-L6-v2\");\n\n// Extract embeddings for both texts\nconst output1 = await extractor(text1, { pooling: \"mean\", normalize: true });\nconst output2 = await extractor(text2, { pooling: \"mean\", normalize: true });\n\nconst vector1 = output1.tolist();\nconst vector2 = output2.tolist();\n```\n\n### Compute Cosine Similarity\n\n```ts\n// Function to calculate cosine similarity\nfunction cosineSimilarity(vec1, vec2) {\n    const dotProduct = tf.sum(tf.mul(vec1, vec2));\n    const magnitude1 = tf.norm(vec1);\n    const magnitude2 = tf.norm(vec2);\n    return dotProduct.div(magnitude1.mul(magnitude2)).dataSync()[0];\n}\n\n// Calculate similarity\nconst similarityScore = cosineSimilarity(vector1, vector2);\nconsole.log(\"Cosine Similarity Score:\", similarityScore);\n```\n\n### Understanding the Results\n\nThe cosine similarity score indicates how semantically similar two texts are. A score closer to 1 means the texts are very similar, while a lower score indicates they are less related.\n\nFor example, from above the output will be like:\n\n```bash\nCosine Similarity Score: 0.787977933883667\n```\n\nThis indicates that the two texts are quite similar in meaning. If we compared completely different topics, the score would be much lower, like `0.2` or `0.3`.\n\n## Similar Article Suggestions in My Blog\n\nNow that we understand how to generate embeddings and calculate cosine similarity, let me show you how I implemented this in my personal blog. Built with Nuxt.js and the Nuxt Content module, my blog stores articles in Markdown format, providing a structured way to access and process content.\n\nThe first step was extracting textual content from all blog articles' Markdown files. During static site generation, I used the embedding extraction code we discussed earlier to generate a numerical vector representation for each blog post.\n\nWith all articles converted to numerical vectors, the next step was determining article similarity. When someone reads a blog post, my system calculates the cosine similarity between that article's vector and all other articles' vectors. This reveals which articles are most semantically related.\n\nI then select the three articles with the highest cosine similarity scores. These closest content matches appear at the bottom of the current article as reading suggestions.\n\nFor example, when a user reads an article about **Nest.js Authorisation with Firebase Auth**, they'll see suggestions for: **Nest.js Auth/Authorisation with Okta**, **Nest.js @CurrentUser Custom Decorator**, **Firebase Auth token verification with a custom backend server**\n\n![Image Three](https://res.cloudinary.com/suv4o/image/upload/q_auto,f_auto,w_750,e_sharpen:100/v1742804587/blog/create-a-recommendation-engine-with-ai-for-free/image-3_effv29)\n\nFor those interested in seeing the implementation details, the complete source code of my blog is available on GitHub <a href=\"https://github.com/Suv4o/personal-blog-2023\" target=\"_blank\" rel=\"noopener noreferrer\">here</a>.\n\nThe example above is available on this repository <a href=\"https://github.com/Suv4o/create-a-recommendation-engine-with-ai-for-free\" target=\"_blank\" rel=\"noopener noreferrer\">here</a>.\n"
  }
]